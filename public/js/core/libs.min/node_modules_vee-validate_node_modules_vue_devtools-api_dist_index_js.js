/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_vee-validate_node_modules_vue_devtools-api_dist_index_js"],{

/***/ "./node_modules/@vue/devtools-kit/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@vue/devtools-kit/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DevToolsContextHookKeys: () => (/* binding */ DevToolsContextHookKeys),\n/* harmony export */   DevToolsMessagingHookKeys: () => (/* binding */ DevToolsMessagingHookKeys),\n/* harmony export */   DevToolsV6PluginAPIHookKeys: () => (/* binding */ DevToolsV6PluginAPIHookKeys),\n/* harmony export */   INFINITY: () => (/* binding */ INFINITY),\n/* harmony export */   NAN: () => (/* binding */ NAN),\n/* harmony export */   NEGATIVE_INFINITY: () => (/* binding */ NEGATIVE_INFINITY),\n/* harmony export */   ROUTER_INFO_KEY: () => (/* binding */ ROUTER_INFO_KEY),\n/* harmony export */   ROUTER_KEY: () => (/* binding */ ROUTER_KEY),\n/* harmony export */   UNDEFINED: () => (/* binding */ UNDEFINED),\n/* harmony export */   activeAppRecord: () => (/* binding */ activeAppRecord),\n/* harmony export */   addCustomCommand: () => (/* binding */ addCustomCommand),\n/* harmony export */   addCustomTab: () => (/* binding */ addCustomTab),\n/* harmony export */   addDevToolsAppRecord: () => (/* binding */ addDevToolsAppRecord),\n/* harmony export */   addDevToolsPluginToBuffer: () => (/* binding */ addDevToolsPluginToBuffer),\n/* harmony export */   addInspector: () => (/* binding */ addInspector),\n/* harmony export */   callConnectedUpdatedHook: () => (/* binding */ callConnectedUpdatedHook),\n/* harmony export */   callDevToolsPluginSetupFn: () => (/* binding */ callDevToolsPluginSetupFn),\n/* harmony export */   callInspectorUpdatedHook: () => (/* binding */ callInspectorUpdatedHook),\n/* harmony export */   callStateUpdatedHook: () => (/* binding */ callStateUpdatedHook),\n/* harmony export */   createComponentsDevToolsPlugin: () => (/* binding */ createComponentsDevToolsPlugin),\n/* harmony export */   createDevToolsApi: () => (/* binding */ createDevToolsApi),\n/* harmony export */   createDevToolsCtxHooks: () => (/* binding */ createDevToolsCtxHooks),\n/* harmony export */   createRpcClient: () => (/* binding */ createRpcClient),\n/* harmony export */   createRpcProxy: () => (/* binding */ createRpcProxy),\n/* harmony export */   createRpcServer: () => (/* binding */ createRpcServer),\n/* harmony export */   devtools: () => (/* binding */ devtools),\n/* harmony export */   devtoolsAppRecords: () => (/* binding */ devtoolsAppRecords),\n/* harmony export */   devtoolsContext: () => (/* binding */ devtoolsContext),\n/* harmony export */   devtoolsInspector: () => (/* binding */ devtoolsInspector),\n/* harmony export */   devtoolsPluginBuffer: () => (/* binding */ devtoolsPluginBuffer),\n/* harmony export */   devtoolsRouter: () => (/* binding */ devtoolsRouter),\n/* harmony export */   devtoolsRouterInfo: () => (/* binding */ devtoolsRouterInfo),\n/* harmony export */   devtoolsState: () => (/* binding */ devtoolsState),\n/* harmony export */   escape: () => (/* binding */ escape),\n/* harmony export */   formatInspectorStateValue: () => (/* binding */ formatInspectorStateValue),\n/* harmony export */   getActiveInspectors: () => (/* binding */ getActiveInspectors),\n/* harmony export */   getDevToolsEnv: () => (/* binding */ getDevToolsEnv),\n/* harmony export */   getExtensionClientContext: () => (/* binding */ getExtensionClientContext),\n/* harmony export */   getInspector: () => (/* binding */ getInspector),\n/* harmony export */   getInspectorActions: () => (/* binding */ getInspectorActions),\n/* harmony export */   getInspectorInfo: () => (/* binding */ getInspectorInfo),\n/* harmony export */   getInspectorNodeActions: () => (/* binding */ getInspectorNodeActions),\n/* harmony export */   getInspectorStateValueType: () => (/* binding */ getInspectorStateValueType),\n/* harmony export */   getRaw: () => (/* binding */ getRaw),\n/* harmony export */   getRpcClient: () => (/* binding */ getRpcClient),\n/* harmony export */   getRpcServer: () => (/* binding */ getRpcServer),\n/* harmony export */   getViteRpcClient: () => (/* binding */ getViteRpcClient),\n/* harmony export */   getViteRpcServer: () => (/* binding */ getViteRpcServer),\n/* harmony export */   initDevTools: () => (/* binding */ initDevTools),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   onDevToolsClientConnected: () => (/* binding */ onDevToolsClientConnected),\n/* harmony export */   onDevToolsConnected: () => (/* binding */ onDevToolsConnected),\n/* harmony export */   parse: () => (/* binding */ parse2),\n/* harmony export */   registerDevToolsPlugin: () => (/* binding */ registerDevToolsPlugin),\n/* harmony export */   removeCustomCommand: () => (/* binding */ removeCustomCommand),\n/* harmony export */   removeDevToolsAppRecord: () => (/* binding */ removeDevToolsAppRecord),\n/* harmony export */   removeRegisteredPluginApp: () => (/* binding */ removeRegisteredPluginApp),\n/* harmony export */   resetDevToolsState: () => (/* binding */ resetDevToolsState),\n/* harmony export */   setActiveAppRecord: () => (/* binding */ setActiveAppRecord),\n/* harmony export */   setActiveAppRecordId: () => (/* binding */ setActiveAppRecordId),\n/* harmony export */   setDevToolsEnv: () => (/* binding */ setDevToolsEnv),\n/* harmony export */   setElectronClientContext: () => (/* binding */ setElectronClientContext),\n/* harmony export */   setElectronProxyContext: () => (/* binding */ setElectronProxyContext),\n/* harmony export */   setElectronServerContext: () => (/* binding */ setElectronServerContext),\n/* harmony export */   setExtensionClientContext: () => (/* binding */ setExtensionClientContext),\n/* harmony export */   setIframeServerContext: () => (/* binding */ setIframeServerContext),\n/* harmony export */   setOpenInEditorBaseUrl: () => (/* binding */ setOpenInEditorBaseUrl),\n/* harmony export */   setRpcServerToGlobal: () => (/* binding */ setRpcServerToGlobal),\n/* harmony export */   setViteClientContext: () => (/* binding */ setViteClientContext),\n/* harmony export */   setViteRpcClientToGlobal: () => (/* binding */ setViteRpcClientToGlobal),\n/* harmony export */   setViteRpcServerToGlobal: () => (/* binding */ setViteRpcServerToGlobal),\n/* harmony export */   setViteServerContext: () => (/* binding */ setViteServerContext),\n/* harmony export */   setupDevToolsPlugin: () => (/* binding */ setupDevToolsPlugin),\n/* harmony export */   stringify: () => (/* binding */ stringify2),\n/* harmony export */   toEdit: () => (/* binding */ toEdit),\n/* harmony export */   toSubmit: () => (/* binding */ toSubmit),\n/* harmony export */   toggleClientConnected: () => (/* binding */ toggleClientConnected),\n/* harmony export */   toggleComponentInspectorEnabled: () => (/* binding */ toggleComponentInspectorEnabled),\n/* harmony export */   toggleHighPerfMode: () => (/* binding */ toggleHighPerfMode),\n/* harmony export */   updateDevToolsClientDetected: () => (/* binding */ updateDevToolsClientDetected),\n/* harmony export */   updateDevToolsState: () => (/* binding */ updateDevToolsState),\n/* harmony export */   updateTimelineLayersState: () => (/* binding */ updateTimelineLayersState)\n/* harmony export */ });\n/* harmony import */ var _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/devtools-shared */ \"./node_modules/@vue/devtools-shared/dist/index.js\");\n/* harmony import */ var perfect_debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! perfect-debounce */ \"./node_modules/perfect-debounce/dist/index.mjs\");\n/* harmony import */ var hookable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hookable */ \"./node_modules/hookable/dist/index.mjs\");\n/* harmony import */ var birpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! birpc */ \"./node_modules/birpc/dist/index.mjs\");\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target22) => (target22 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target22, \"default\", { value: mod, enumerable: true }) : target22,\n  mod\n));\n\n// ../../node_modules/.pnpm/tsup@8.3.5_@microsoft+api-extractor@7.48.1_@types+node@22.10.5__jiti@2.4.2_postcss@8.4.49_tsx_s7k37zks4wtn7x2grzma6lrsfa/node_modules/tsup/assets/esm_shims.js\nvar init_esm_shims = __esm({\n  \"../../node_modules/.pnpm/tsup@8.3.5_@microsoft+api-extractor@7.48.1_@types+node@22.10.5__jiti@2.4.2_postcss@8.4.49_tsx_s7k37zks4wtn7x2grzma6lrsfa/node_modules/tsup/assets/esm_shims.js\"() {\n    \"use strict\";\n  }\n});\n\n// ../../node_modules/.pnpm/speakingurl@14.0.1/node_modules/speakingurl/lib/speakingurl.js\nvar require_speakingurl = __commonJS({\n  \"../../node_modules/.pnpm/speakingurl@14.0.1/node_modules/speakingurl/lib/speakingurl.js\"(exports, module) {\n    \"use strict\";\n    init_esm_shims();\n    (function(root) {\n      \"use strict\";\n      var charMap = {\n        // latin\n        \"\\xC0\": \"A\",\n        \"\\xC1\": \"A\",\n        \"\\xC2\": \"A\",\n        \"\\xC3\": \"A\",\n        \"\\xC4\": \"Ae\",\n        \"\\xC5\": \"A\",\n        \"\\xC6\": \"AE\",\n        \"\\xC7\": \"C\",\n        \"\\xC8\": \"E\",\n        \"\\xC9\": \"E\",\n        \"\\xCA\": \"E\",\n        \"\\xCB\": \"E\",\n        \"\\xCC\": \"I\",\n        \"\\xCD\": \"I\",\n        \"\\xCE\": \"I\",\n        \"\\xCF\": \"I\",\n        \"\\xD0\": \"D\",\n        \"\\xD1\": \"N\",\n        \"\\xD2\": \"O\",\n        \"\\xD3\": \"O\",\n        \"\\xD4\": \"O\",\n        \"\\xD5\": \"O\",\n        \"\\xD6\": \"Oe\",\n        \"\\u0150\": \"O\",\n        \"\\xD8\": \"O\",\n        \"\\xD9\": \"U\",\n        \"\\xDA\": \"U\",\n        \"\\xDB\": \"U\",\n        \"\\xDC\": \"Ue\",\n        \"\\u0170\": \"U\",\n        \"\\xDD\": \"Y\",\n        \"\\xDE\": \"TH\",\n        \"\\xDF\": \"ss\",\n        \"\\xE0\": \"a\",\n        \"\\xE1\": \"a\",\n        \"\\xE2\": \"a\",\n        \"\\xE3\": \"a\",\n        \"\\xE4\": \"ae\",\n        \"\\xE5\": \"a\",\n        \"\\xE6\": \"ae\",\n        \"\\xE7\": \"c\",\n        \"\\xE8\": \"e\",\n        \"\\xE9\": \"e\",\n        \"\\xEA\": \"e\",\n        \"\\xEB\": \"e\",\n        \"\\xEC\": \"i\",\n        \"\\xED\": \"i\",\n        \"\\xEE\": \"i\",\n        \"\\xEF\": \"i\",\n        \"\\xF0\": \"d\",\n        \"\\xF1\": \"n\",\n        \"\\xF2\": \"o\",\n        \"\\xF3\": \"o\",\n        \"\\xF4\": \"o\",\n        \"\\xF5\": \"o\",\n        \"\\xF6\": \"oe\",\n        \"\\u0151\": \"o\",\n        \"\\xF8\": \"o\",\n        \"\\xF9\": \"u\",\n        \"\\xFA\": \"u\",\n        \"\\xFB\": \"u\",\n        \"\\xFC\": \"ue\",\n        \"\\u0171\": \"u\",\n        \"\\xFD\": \"y\",\n        \"\\xFE\": \"th\",\n        \"\\xFF\": \"y\",\n        \"\\u1E9E\": \"SS\",\n        // language specific\n        // Arabic\n        \"\\u0627\": \"a\",\n        \"\\u0623\": \"a\",\n        \"\\u0625\": \"i\",\n        \"\\u0622\": \"aa\",\n        \"\\u0624\": \"u\",\n        \"\\u0626\": \"e\",\n        \"\\u0621\": \"a\",\n        \"\\u0628\": \"b\",\n        \"\\u062A\": \"t\",\n        \"\\u062B\": \"th\",\n        \"\\u062C\": \"j\",\n        \"\\u062D\": \"h\",\n        \"\\u062E\": \"kh\",\n        \"\\u062F\": \"d\",\n        \"\\u0630\": \"th\",\n        \"\\u0631\": \"r\",\n        \"\\u0632\": \"z\",\n        \"\\u0633\": \"s\",\n        \"\\u0634\": \"sh\",\n        \"\\u0635\": \"s\",\n        \"\\u0636\": \"dh\",\n        \"\\u0637\": \"t\",\n        \"\\u0638\": \"z\",\n        \"\\u0639\": \"a\",\n        \"\\u063A\": \"gh\",\n        \"\\u0641\": \"f\",\n        \"\\u0642\": \"q\",\n        \"\\u0643\": \"k\",\n        \"\\u0644\": \"l\",\n        \"\\u0645\": \"m\",\n        \"\\u0646\": \"n\",\n        \"\\u0647\": \"h\",\n        \"\\u0648\": \"w\",\n        \"\\u064A\": \"y\",\n        \"\\u0649\": \"a\",\n        \"\\u0629\": \"h\",\n        \"\\uFEFB\": \"la\",\n        \"\\uFEF7\": \"laa\",\n        \"\\uFEF9\": \"lai\",\n        \"\\uFEF5\": \"laa\",\n        // Persian additional characters than Arabic\n        \"\\u06AF\": \"g\",\n        \"\\u0686\": \"ch\",\n        \"\\u067E\": \"p\",\n        \"\\u0698\": \"zh\",\n        \"\\u06A9\": \"k\",\n        \"\\u06CC\": \"y\",\n        // Arabic diactrics\n        \"\\u064E\": \"a\",\n        \"\\u064B\": \"an\",\n        \"\\u0650\": \"e\",\n        \"\\u064D\": \"en\",\n        \"\\u064F\": \"u\",\n        \"\\u064C\": \"on\",\n        \"\\u0652\": \"\",\n        // Arabic numbers\n        \"\\u0660\": \"0\",\n        \"\\u0661\": \"1\",\n        \"\\u0662\": \"2\",\n        \"\\u0663\": \"3\",\n        \"\\u0664\": \"4\",\n        \"\\u0665\": \"5\",\n        \"\\u0666\": \"6\",\n        \"\\u0667\": \"7\",\n        \"\\u0668\": \"8\",\n        \"\\u0669\": \"9\",\n        // Persian numbers\n        \"\\u06F0\": \"0\",\n        \"\\u06F1\": \"1\",\n        \"\\u06F2\": \"2\",\n        \"\\u06F3\": \"3\",\n        \"\\u06F4\": \"4\",\n        \"\\u06F5\": \"5\",\n        \"\\u06F6\": \"6\",\n        \"\\u06F7\": \"7\",\n        \"\\u06F8\": \"8\",\n        \"\\u06F9\": \"9\",\n        // Burmese consonants\n        \"\\u1000\": \"k\",\n        \"\\u1001\": \"kh\",\n        \"\\u1002\": \"g\",\n        \"\\u1003\": \"ga\",\n        \"\\u1004\": \"ng\",\n        \"\\u1005\": \"s\",\n        \"\\u1006\": \"sa\",\n        \"\\u1007\": \"z\",\n        \"\\u1005\\u103B\": \"za\",\n        \"\\u100A\": \"ny\",\n        \"\\u100B\": \"t\",\n        \"\\u100C\": \"ta\",\n        \"\\u100D\": \"d\",\n        \"\\u100E\": \"da\",\n        \"\\u100F\": \"na\",\n        \"\\u1010\": \"t\",\n        \"\\u1011\": \"ta\",\n        \"\\u1012\": \"d\",\n        \"\\u1013\": \"da\",\n        \"\\u1014\": \"n\",\n        \"\\u1015\": \"p\",\n        \"\\u1016\": \"pa\",\n        \"\\u1017\": \"b\",\n        \"\\u1018\": \"ba\",\n        \"\\u1019\": \"m\",\n        \"\\u101A\": \"y\",\n        \"\\u101B\": \"ya\",\n        \"\\u101C\": \"l\",\n        \"\\u101D\": \"w\",\n        \"\\u101E\": \"th\",\n        \"\\u101F\": \"h\",\n        \"\\u1020\": \"la\",\n        \"\\u1021\": \"a\",\n        // consonant character combos\n        \"\\u103C\": \"y\",\n        \"\\u103B\": \"ya\",\n        \"\\u103D\": \"w\",\n        \"\\u103C\\u103D\": \"yw\",\n        \"\\u103B\\u103D\": \"ywa\",\n        \"\\u103E\": \"h\",\n        // independent vowels\n        \"\\u1027\": \"e\",\n        \"\\u104F\": \"-e\",\n        \"\\u1023\": \"i\",\n        \"\\u1024\": \"-i\",\n        \"\\u1009\": \"u\",\n        \"\\u1026\": \"-u\",\n        \"\\u1029\": \"aw\",\n        \"\\u101E\\u103C\\u1031\\u102C\": \"aw\",\n        \"\\u102A\": \"aw\",\n        // numbers\n        \"\\u1040\": \"0\",\n        \"\\u1041\": \"1\",\n        \"\\u1042\": \"2\",\n        \"\\u1043\": \"3\",\n        \"\\u1044\": \"4\",\n        \"\\u1045\": \"5\",\n        \"\\u1046\": \"6\",\n        \"\\u1047\": \"7\",\n        \"\\u1048\": \"8\",\n        \"\\u1049\": \"9\",\n        // virama and tone marks which are silent in transliteration\n        \"\\u1039\": \"\",\n        \"\\u1037\": \"\",\n        \"\\u1038\": \"\",\n        // Czech\n        \"\\u010D\": \"c\",\n        \"\\u010F\": \"d\",\n        \"\\u011B\": \"e\",\n        \"\\u0148\": \"n\",\n        \"\\u0159\": \"r\",\n        \"\\u0161\": \"s\",\n        \"\\u0165\": \"t\",\n        \"\\u016F\": \"u\",\n        \"\\u017E\": \"z\",\n        \"\\u010C\": \"C\",\n        \"\\u010E\": \"D\",\n        \"\\u011A\": \"E\",\n        \"\\u0147\": \"N\",\n        \"\\u0158\": \"R\",\n        \"\\u0160\": \"S\",\n        \"\\u0164\": \"T\",\n        \"\\u016E\": \"U\",\n        \"\\u017D\": \"Z\",\n        // Dhivehi\n        \"\\u0780\": \"h\",\n        \"\\u0781\": \"sh\",\n        \"\\u0782\": \"n\",\n        \"\\u0783\": \"r\",\n        \"\\u0784\": \"b\",\n        \"\\u0785\": \"lh\",\n        \"\\u0786\": \"k\",\n        \"\\u0787\": \"a\",\n        \"\\u0788\": \"v\",\n        \"\\u0789\": \"m\",\n        \"\\u078A\": \"f\",\n        \"\\u078B\": \"dh\",\n        \"\\u078C\": \"th\",\n        \"\\u078D\": \"l\",\n        \"\\u078E\": \"g\",\n        \"\\u078F\": \"gn\",\n        \"\\u0790\": \"s\",\n        \"\\u0791\": \"d\",\n        \"\\u0792\": \"z\",\n        \"\\u0793\": \"t\",\n        \"\\u0794\": \"y\",\n        \"\\u0795\": \"p\",\n        \"\\u0796\": \"j\",\n        \"\\u0797\": \"ch\",\n        \"\\u0798\": \"tt\",\n        \"\\u0799\": \"hh\",\n        \"\\u079A\": \"kh\",\n        \"\\u079B\": \"th\",\n        \"\\u079C\": \"z\",\n        \"\\u079D\": \"sh\",\n        \"\\u079E\": \"s\",\n        \"\\u079F\": \"d\",\n        \"\\u07A0\": \"t\",\n        \"\\u07A1\": \"z\",\n        \"\\u07A2\": \"a\",\n        \"\\u07A3\": \"gh\",\n        \"\\u07A4\": \"q\",\n        \"\\u07A5\": \"w\",\n        \"\\u07A6\": \"a\",\n        \"\\u07A7\": \"aa\",\n        \"\\u07A8\": \"i\",\n        \"\\u07A9\": \"ee\",\n        \"\\u07AA\": \"u\",\n        \"\\u07AB\": \"oo\",\n        \"\\u07AC\": \"e\",\n        \"\\u07AD\": \"ey\",\n        \"\\u07AE\": \"o\",\n        \"\\u07AF\": \"oa\",\n        \"\\u07B0\": \"\",\n        // Georgian https://en.wikipedia.org/wiki/Romanization_of_Georgian\n        // National system (2002)\n        \"\\u10D0\": \"a\",\n        \"\\u10D1\": \"b\",\n        \"\\u10D2\": \"g\",\n        \"\\u10D3\": \"d\",\n        \"\\u10D4\": \"e\",\n        \"\\u10D5\": \"v\",\n        \"\\u10D6\": \"z\",\n        \"\\u10D7\": \"t\",\n        \"\\u10D8\": \"i\",\n        \"\\u10D9\": \"k\",\n        \"\\u10DA\": \"l\",\n        \"\\u10DB\": \"m\",\n        \"\\u10DC\": \"n\",\n        \"\\u10DD\": \"o\",\n        \"\\u10DE\": \"p\",\n        \"\\u10DF\": \"zh\",\n        \"\\u10E0\": \"r\",\n        \"\\u10E1\": \"s\",\n        \"\\u10E2\": \"t\",\n        \"\\u10E3\": \"u\",\n        \"\\u10E4\": \"p\",\n        \"\\u10E5\": \"k\",\n        \"\\u10E6\": \"gh\",\n        \"\\u10E7\": \"q\",\n        \"\\u10E8\": \"sh\",\n        \"\\u10E9\": \"ch\",\n        \"\\u10EA\": \"ts\",\n        \"\\u10EB\": \"dz\",\n        \"\\u10EC\": \"ts\",\n        \"\\u10ED\": \"ch\",\n        \"\\u10EE\": \"kh\",\n        \"\\u10EF\": \"j\",\n        \"\\u10F0\": \"h\",\n        // Greek\n        \"\\u03B1\": \"a\",\n        \"\\u03B2\": \"v\",\n        \"\\u03B3\": \"g\",\n        \"\\u03B4\": \"d\",\n        \"\\u03B5\": \"e\",\n        \"\\u03B6\": \"z\",\n        \"\\u03B7\": \"i\",\n        \"\\u03B8\": \"th\",\n        \"\\u03B9\": \"i\",\n        \"\\u03BA\": \"k\",\n        \"\\u03BB\": \"l\",\n        \"\\u03BC\": \"m\",\n        \"\\u03BD\": \"n\",\n        \"\\u03BE\": \"ks\",\n        \"\\u03BF\": \"o\",\n        \"\\u03C0\": \"p\",\n        \"\\u03C1\": \"r\",\n        \"\\u03C3\": \"s\",\n        \"\\u03C4\": \"t\",\n        \"\\u03C5\": \"y\",\n        \"\\u03C6\": \"f\",\n        \"\\u03C7\": \"x\",\n        \"\\u03C8\": \"ps\",\n        \"\\u03C9\": \"o\",\n        \"\\u03AC\": \"a\",\n        \"\\u03AD\": \"e\",\n        \"\\u03AF\": \"i\",\n        \"\\u03CC\": \"o\",\n        \"\\u03CD\": \"y\",\n        \"\\u03AE\": \"i\",\n        \"\\u03CE\": \"o\",\n        \"\\u03C2\": \"s\",\n        \"\\u03CA\": \"i\",\n        \"\\u03B0\": \"y\",\n        \"\\u03CB\": \"y\",\n        \"\\u0390\": \"i\",\n        \"\\u0391\": \"A\",\n        \"\\u0392\": \"B\",\n        \"\\u0393\": \"G\",\n        \"\\u0394\": \"D\",\n        \"\\u0395\": \"E\",\n        \"\\u0396\": \"Z\",\n        \"\\u0397\": \"I\",\n        \"\\u0398\": \"TH\",\n        \"\\u0399\": \"I\",\n        \"\\u039A\": \"K\",\n        \"\\u039B\": \"L\",\n        \"\\u039C\": \"M\",\n        \"\\u039D\": \"N\",\n        \"\\u039E\": \"KS\",\n        \"\\u039F\": \"O\",\n        \"\\u03A0\": \"P\",\n        \"\\u03A1\": \"R\",\n        \"\\u03A3\": \"S\",\n        \"\\u03A4\": \"T\",\n        \"\\u03A5\": \"Y\",\n        \"\\u03A6\": \"F\",\n        \"\\u03A7\": \"X\",\n        \"\\u03A8\": \"PS\",\n        \"\\u03A9\": \"O\",\n        \"\\u0386\": \"A\",\n        \"\\u0388\": \"E\",\n        \"\\u038A\": \"I\",\n        \"\\u038C\": \"O\",\n        \"\\u038E\": \"Y\",\n        \"\\u0389\": \"I\",\n        \"\\u038F\": \"O\",\n        \"\\u03AA\": \"I\",\n        \"\\u03AB\": \"Y\",\n        // Latvian\n        \"\\u0101\": \"a\",\n        // 'č': 'c', // duplicate\n        \"\\u0113\": \"e\",\n        \"\\u0123\": \"g\",\n        \"\\u012B\": \"i\",\n        \"\\u0137\": \"k\",\n        \"\\u013C\": \"l\",\n        \"\\u0146\": \"n\",\n        // 'š': 's', // duplicate\n        \"\\u016B\": \"u\",\n        // 'ž': 'z', // duplicate\n        \"\\u0100\": \"A\",\n        // 'Č': 'C', // duplicate\n        \"\\u0112\": \"E\",\n        \"\\u0122\": \"G\",\n        \"\\u012A\": \"I\",\n        \"\\u0136\": \"k\",\n        \"\\u013B\": \"L\",\n        \"\\u0145\": \"N\",\n        // 'Š': 'S', // duplicate\n        \"\\u016A\": \"U\",\n        // 'Ž': 'Z', // duplicate\n        // Macedonian\n        \"\\u040C\": \"Kj\",\n        \"\\u045C\": \"kj\",\n        \"\\u0409\": \"Lj\",\n        \"\\u0459\": \"lj\",\n        \"\\u040A\": \"Nj\",\n        \"\\u045A\": \"nj\",\n        \"\\u0422\\u0441\": \"Ts\",\n        \"\\u0442\\u0441\": \"ts\",\n        // Polish\n        \"\\u0105\": \"a\",\n        \"\\u0107\": \"c\",\n        \"\\u0119\": \"e\",\n        \"\\u0142\": \"l\",\n        \"\\u0144\": \"n\",\n        // 'ó': 'o', // duplicate\n        \"\\u015B\": \"s\",\n        \"\\u017A\": \"z\",\n        \"\\u017C\": \"z\",\n        \"\\u0104\": \"A\",\n        \"\\u0106\": \"C\",\n        \"\\u0118\": \"E\",\n        \"\\u0141\": \"L\",\n        \"\\u0143\": \"N\",\n        \"\\u015A\": \"S\",\n        \"\\u0179\": \"Z\",\n        \"\\u017B\": \"Z\",\n        // Ukranian\n        \"\\u0404\": \"Ye\",\n        \"\\u0406\": \"I\",\n        \"\\u0407\": \"Yi\",\n        \"\\u0490\": \"G\",\n        \"\\u0454\": \"ye\",\n        \"\\u0456\": \"i\",\n        \"\\u0457\": \"yi\",\n        \"\\u0491\": \"g\",\n        // Romanian\n        \"\\u0103\": \"a\",\n        \"\\u0102\": \"A\",\n        \"\\u0219\": \"s\",\n        \"\\u0218\": \"S\",\n        // 'ş': 's', // duplicate\n        // 'Ş': 'S', // duplicate\n        \"\\u021B\": \"t\",\n        \"\\u021A\": \"T\",\n        \"\\u0163\": \"t\",\n        \"\\u0162\": \"T\",\n        // Russian https://en.wikipedia.org/wiki/Romanization_of_Russian\n        // ICAO\n        \"\\u0430\": \"a\",\n        \"\\u0431\": \"b\",\n        \"\\u0432\": \"v\",\n        \"\\u0433\": \"g\",\n        \"\\u0434\": \"d\",\n        \"\\u0435\": \"e\",\n        \"\\u0451\": \"yo\",\n        \"\\u0436\": \"zh\",\n        \"\\u0437\": \"z\",\n        \"\\u0438\": \"i\",\n        \"\\u0439\": \"i\",\n        \"\\u043A\": \"k\",\n        \"\\u043B\": \"l\",\n        \"\\u043C\": \"m\",\n        \"\\u043D\": \"n\",\n        \"\\u043E\": \"o\",\n        \"\\u043F\": \"p\",\n        \"\\u0440\": \"r\",\n        \"\\u0441\": \"s\",\n        \"\\u0442\": \"t\",\n        \"\\u0443\": \"u\",\n        \"\\u0444\": \"f\",\n        \"\\u0445\": \"kh\",\n        \"\\u0446\": \"c\",\n        \"\\u0447\": \"ch\",\n        \"\\u0448\": \"sh\",\n        \"\\u0449\": \"sh\",\n        \"\\u044A\": \"\",\n        \"\\u044B\": \"y\",\n        \"\\u044C\": \"\",\n        \"\\u044D\": \"e\",\n        \"\\u044E\": \"yu\",\n        \"\\u044F\": \"ya\",\n        \"\\u0410\": \"A\",\n        \"\\u0411\": \"B\",\n        \"\\u0412\": \"V\",\n        \"\\u0413\": \"G\",\n        \"\\u0414\": \"D\",\n        \"\\u0415\": \"E\",\n        \"\\u0401\": \"Yo\",\n        \"\\u0416\": \"Zh\",\n        \"\\u0417\": \"Z\",\n        \"\\u0418\": \"I\",\n        \"\\u0419\": \"I\",\n        \"\\u041A\": \"K\",\n        \"\\u041B\": \"L\",\n        \"\\u041C\": \"M\",\n        \"\\u041D\": \"N\",\n        \"\\u041E\": \"O\",\n        \"\\u041F\": \"P\",\n        \"\\u0420\": \"R\",\n        \"\\u0421\": \"S\",\n        \"\\u0422\": \"T\",\n        \"\\u0423\": \"U\",\n        \"\\u0424\": \"F\",\n        \"\\u0425\": \"Kh\",\n        \"\\u0426\": \"C\",\n        \"\\u0427\": \"Ch\",\n        \"\\u0428\": \"Sh\",\n        \"\\u0429\": \"Sh\",\n        \"\\u042A\": \"\",\n        \"\\u042B\": \"Y\",\n        \"\\u042C\": \"\",\n        \"\\u042D\": \"E\",\n        \"\\u042E\": \"Yu\",\n        \"\\u042F\": \"Ya\",\n        // Serbian\n        \"\\u0452\": \"dj\",\n        \"\\u0458\": \"j\",\n        // 'љ': 'lj',  // duplicate\n        // 'њ': 'nj', // duplicate\n        \"\\u045B\": \"c\",\n        \"\\u045F\": \"dz\",\n        \"\\u0402\": \"Dj\",\n        \"\\u0408\": \"j\",\n        // 'Љ': 'Lj', // duplicate\n        // 'Њ': 'Nj', // duplicate\n        \"\\u040B\": \"C\",\n        \"\\u040F\": \"Dz\",\n        // Slovak\n        \"\\u013E\": \"l\",\n        \"\\u013A\": \"l\",\n        \"\\u0155\": \"r\",\n        \"\\u013D\": \"L\",\n        \"\\u0139\": \"L\",\n        \"\\u0154\": \"R\",\n        // Turkish\n        \"\\u015F\": \"s\",\n        \"\\u015E\": \"S\",\n        \"\\u0131\": \"i\",\n        \"\\u0130\": \"I\",\n        // 'ç': 'c', // duplicate\n        // 'Ç': 'C', // duplicate\n        // 'ü': 'u', // duplicate, see langCharMap\n        // 'Ü': 'U', // duplicate, see langCharMap\n        // 'ö': 'o', // duplicate, see langCharMap\n        // 'Ö': 'O', // duplicate, see langCharMap\n        \"\\u011F\": \"g\",\n        \"\\u011E\": \"G\",\n        // Vietnamese\n        \"\\u1EA3\": \"a\",\n        \"\\u1EA2\": \"A\",\n        \"\\u1EB3\": \"a\",\n        \"\\u1EB2\": \"A\",\n        \"\\u1EA9\": \"a\",\n        \"\\u1EA8\": \"A\",\n        \"\\u0111\": \"d\",\n        \"\\u0110\": \"D\",\n        \"\\u1EB9\": \"e\",\n        \"\\u1EB8\": \"E\",\n        \"\\u1EBD\": \"e\",\n        \"\\u1EBC\": \"E\",\n        \"\\u1EBB\": \"e\",\n        \"\\u1EBA\": \"E\",\n        \"\\u1EBF\": \"e\",\n        \"\\u1EBE\": \"E\",\n        \"\\u1EC1\": \"e\",\n        \"\\u1EC0\": \"E\",\n        \"\\u1EC7\": \"e\",\n        \"\\u1EC6\": \"E\",\n        \"\\u1EC5\": \"e\",\n        \"\\u1EC4\": \"E\",\n        \"\\u1EC3\": \"e\",\n        \"\\u1EC2\": \"E\",\n        \"\\u1ECF\": \"o\",\n        \"\\u1ECD\": \"o\",\n        \"\\u1ECC\": \"o\",\n        \"\\u1ED1\": \"o\",\n        \"\\u1ED0\": \"O\",\n        \"\\u1ED3\": \"o\",\n        \"\\u1ED2\": \"O\",\n        \"\\u1ED5\": \"o\",\n        \"\\u1ED4\": \"O\",\n        \"\\u1ED9\": \"o\",\n        \"\\u1ED8\": \"O\",\n        \"\\u1ED7\": \"o\",\n        \"\\u1ED6\": \"O\",\n        \"\\u01A1\": \"o\",\n        \"\\u01A0\": \"O\",\n        \"\\u1EDB\": \"o\",\n        \"\\u1EDA\": \"O\",\n        \"\\u1EDD\": \"o\",\n        \"\\u1EDC\": \"O\",\n        \"\\u1EE3\": \"o\",\n        \"\\u1EE2\": \"O\",\n        \"\\u1EE1\": \"o\",\n        \"\\u1EE0\": \"O\",\n        \"\\u1EDE\": \"o\",\n        \"\\u1EDF\": \"o\",\n        \"\\u1ECB\": \"i\",\n        \"\\u1ECA\": \"I\",\n        \"\\u0129\": \"i\",\n        \"\\u0128\": \"I\",\n        \"\\u1EC9\": \"i\",\n        \"\\u1EC8\": \"i\",\n        \"\\u1EE7\": \"u\",\n        \"\\u1EE6\": \"U\",\n        \"\\u1EE5\": \"u\",\n        \"\\u1EE4\": \"U\",\n        \"\\u0169\": \"u\",\n        \"\\u0168\": \"U\",\n        \"\\u01B0\": \"u\",\n        \"\\u01AF\": \"U\",\n        \"\\u1EE9\": \"u\",\n        \"\\u1EE8\": \"U\",\n        \"\\u1EEB\": \"u\",\n        \"\\u1EEA\": \"U\",\n        \"\\u1EF1\": \"u\",\n        \"\\u1EF0\": \"U\",\n        \"\\u1EEF\": \"u\",\n        \"\\u1EEE\": \"U\",\n        \"\\u1EED\": \"u\",\n        \"\\u1EEC\": \"\\u01B0\",\n        \"\\u1EF7\": \"y\",\n        \"\\u1EF6\": \"y\",\n        \"\\u1EF3\": \"y\",\n        \"\\u1EF2\": \"Y\",\n        \"\\u1EF5\": \"y\",\n        \"\\u1EF4\": \"Y\",\n        \"\\u1EF9\": \"y\",\n        \"\\u1EF8\": \"Y\",\n        \"\\u1EA1\": \"a\",\n        \"\\u1EA0\": \"A\",\n        \"\\u1EA5\": \"a\",\n        \"\\u1EA4\": \"A\",\n        \"\\u1EA7\": \"a\",\n        \"\\u1EA6\": \"A\",\n        \"\\u1EAD\": \"a\",\n        \"\\u1EAC\": \"A\",\n        \"\\u1EAB\": \"a\",\n        \"\\u1EAA\": \"A\",\n        // 'ă': 'a', // duplicate\n        // 'Ă': 'A', // duplicate\n        \"\\u1EAF\": \"a\",\n        \"\\u1EAE\": \"A\",\n        \"\\u1EB1\": \"a\",\n        \"\\u1EB0\": \"A\",\n        \"\\u1EB7\": \"a\",\n        \"\\u1EB6\": \"A\",\n        \"\\u1EB5\": \"a\",\n        \"\\u1EB4\": \"A\",\n        \"\\u24EA\": \"0\",\n        \"\\u2460\": \"1\",\n        \"\\u2461\": \"2\",\n        \"\\u2462\": \"3\",\n        \"\\u2463\": \"4\",\n        \"\\u2464\": \"5\",\n        \"\\u2465\": \"6\",\n        \"\\u2466\": \"7\",\n        \"\\u2467\": \"8\",\n        \"\\u2468\": \"9\",\n        \"\\u2469\": \"10\",\n        \"\\u246A\": \"11\",\n        \"\\u246B\": \"12\",\n        \"\\u246C\": \"13\",\n        \"\\u246D\": \"14\",\n        \"\\u246E\": \"15\",\n        \"\\u246F\": \"16\",\n        \"\\u2470\": \"17\",\n        \"\\u2471\": \"18\",\n        \"\\u2472\": \"18\",\n        \"\\u2473\": \"18\",\n        \"\\u24F5\": \"1\",\n        \"\\u24F6\": \"2\",\n        \"\\u24F7\": \"3\",\n        \"\\u24F8\": \"4\",\n        \"\\u24F9\": \"5\",\n        \"\\u24FA\": \"6\",\n        \"\\u24FB\": \"7\",\n        \"\\u24FC\": \"8\",\n        \"\\u24FD\": \"9\",\n        \"\\u24FE\": \"10\",\n        \"\\u24FF\": \"0\",\n        \"\\u24EB\": \"11\",\n        \"\\u24EC\": \"12\",\n        \"\\u24ED\": \"13\",\n        \"\\u24EE\": \"14\",\n        \"\\u24EF\": \"15\",\n        \"\\u24F0\": \"16\",\n        \"\\u24F1\": \"17\",\n        \"\\u24F2\": \"18\",\n        \"\\u24F3\": \"19\",\n        \"\\u24F4\": \"20\",\n        \"\\u24B6\": \"A\",\n        \"\\u24B7\": \"B\",\n        \"\\u24B8\": \"C\",\n        \"\\u24B9\": \"D\",\n        \"\\u24BA\": \"E\",\n        \"\\u24BB\": \"F\",\n        \"\\u24BC\": \"G\",\n        \"\\u24BD\": \"H\",\n        \"\\u24BE\": \"I\",\n        \"\\u24BF\": \"J\",\n        \"\\u24C0\": \"K\",\n        \"\\u24C1\": \"L\",\n        \"\\u24C2\": \"M\",\n        \"\\u24C3\": \"N\",\n        \"\\u24C4\": \"O\",\n        \"\\u24C5\": \"P\",\n        \"\\u24C6\": \"Q\",\n        \"\\u24C7\": \"R\",\n        \"\\u24C8\": \"S\",\n        \"\\u24C9\": \"T\",\n        \"\\u24CA\": \"U\",\n        \"\\u24CB\": \"V\",\n        \"\\u24CC\": \"W\",\n        \"\\u24CD\": \"X\",\n        \"\\u24CE\": \"Y\",\n        \"\\u24CF\": \"Z\",\n        \"\\u24D0\": \"a\",\n        \"\\u24D1\": \"b\",\n        \"\\u24D2\": \"c\",\n        \"\\u24D3\": \"d\",\n        \"\\u24D4\": \"e\",\n        \"\\u24D5\": \"f\",\n        \"\\u24D6\": \"g\",\n        \"\\u24D7\": \"h\",\n        \"\\u24D8\": \"i\",\n        \"\\u24D9\": \"j\",\n        \"\\u24DA\": \"k\",\n        \"\\u24DB\": \"l\",\n        \"\\u24DC\": \"m\",\n        \"\\u24DD\": \"n\",\n        \"\\u24DE\": \"o\",\n        \"\\u24DF\": \"p\",\n        \"\\u24E0\": \"q\",\n        \"\\u24E1\": \"r\",\n        \"\\u24E2\": \"s\",\n        \"\\u24E3\": \"t\",\n        \"\\u24E4\": \"u\",\n        \"\\u24E6\": \"v\",\n        \"\\u24E5\": \"w\",\n        \"\\u24E7\": \"x\",\n        \"\\u24E8\": \"y\",\n        \"\\u24E9\": \"z\",\n        // symbols\n        \"\\u201C\": '\"',\n        \"\\u201D\": '\"',\n        \"\\u2018\": \"'\",\n        \"\\u2019\": \"'\",\n        \"\\u2202\": \"d\",\n        \"\\u0192\": \"f\",\n        \"\\u2122\": \"(TM)\",\n        \"\\xA9\": \"(C)\",\n        \"\\u0153\": \"oe\",\n        \"\\u0152\": \"OE\",\n        \"\\xAE\": \"(R)\",\n        \"\\u2020\": \"+\",\n        \"\\u2120\": \"(SM)\",\n        \"\\u2026\": \"...\",\n        \"\\u02DA\": \"o\",\n        \"\\xBA\": \"o\",\n        \"\\xAA\": \"a\",\n        \"\\u2022\": \"*\",\n        \"\\u104A\": \",\",\n        \"\\u104B\": \".\",\n        // currency\n        \"$\": \"USD\",\n        \"\\u20AC\": \"EUR\",\n        \"\\u20A2\": \"BRN\",\n        \"\\u20A3\": \"FRF\",\n        \"\\xA3\": \"GBP\",\n        \"\\u20A4\": \"ITL\",\n        \"\\u20A6\": \"NGN\",\n        \"\\u20A7\": \"ESP\",\n        \"\\u20A9\": \"KRW\",\n        \"\\u20AA\": \"ILS\",\n        \"\\u20AB\": \"VND\",\n        \"\\u20AD\": \"LAK\",\n        \"\\u20AE\": \"MNT\",\n        \"\\u20AF\": \"GRD\",\n        \"\\u20B1\": \"ARS\",\n        \"\\u20B2\": \"PYG\",\n        \"\\u20B3\": \"ARA\",\n        \"\\u20B4\": \"UAH\",\n        \"\\u20B5\": \"GHS\",\n        \"\\xA2\": \"cent\",\n        \"\\xA5\": \"CNY\",\n        \"\\u5143\": \"CNY\",\n        \"\\u5186\": \"YEN\",\n        \"\\uFDFC\": \"IRR\",\n        \"\\u20A0\": \"EWE\",\n        \"\\u0E3F\": \"THB\",\n        \"\\u20A8\": \"INR\",\n        \"\\u20B9\": \"INR\",\n        \"\\u20B0\": \"PF\",\n        \"\\u20BA\": \"TRY\",\n        \"\\u060B\": \"AFN\",\n        \"\\u20BC\": \"AZN\",\n        \"\\u043B\\u0432\": \"BGN\",\n        \"\\u17DB\": \"KHR\",\n        \"\\u20A1\": \"CRC\",\n        \"\\u20B8\": \"KZT\",\n        \"\\u0434\\u0435\\u043D\": \"MKD\",\n        \"z\\u0142\": \"PLN\",\n        \"\\u20BD\": \"RUB\",\n        \"\\u20BE\": \"GEL\"\n      };\n      var lookAheadCharArray = [\n        // burmese\n        \"\\u103A\",\n        // Dhivehi\n        \"\\u07B0\"\n      ];\n      var diatricMap = {\n        // Burmese\n        // dependent vowels\n        \"\\u102C\": \"a\",\n        \"\\u102B\": \"a\",\n        \"\\u1031\": \"e\",\n        \"\\u1032\": \"e\",\n        \"\\u102D\": \"i\",\n        \"\\u102E\": \"i\",\n        \"\\u102D\\u102F\": \"o\",\n        \"\\u102F\": \"u\",\n        \"\\u1030\": \"u\",\n        \"\\u1031\\u102B\\u1004\\u103A\": \"aung\",\n        \"\\u1031\\u102C\": \"aw\",\n        \"\\u1031\\u102C\\u103A\": \"aw\",\n        \"\\u1031\\u102B\": \"aw\",\n        \"\\u1031\\u102B\\u103A\": \"aw\",\n        \"\\u103A\": \"\\u103A\",\n        // this is special case but the character will be converted to latin in the code\n        \"\\u1000\\u103A\": \"et\",\n        \"\\u102D\\u102F\\u1000\\u103A\": \"aik\",\n        \"\\u1031\\u102C\\u1000\\u103A\": \"auk\",\n        \"\\u1004\\u103A\": \"in\",\n        \"\\u102D\\u102F\\u1004\\u103A\": \"aing\",\n        \"\\u1031\\u102C\\u1004\\u103A\": \"aung\",\n        \"\\u1005\\u103A\": \"it\",\n        \"\\u100A\\u103A\": \"i\",\n        \"\\u1010\\u103A\": \"at\",\n        \"\\u102D\\u1010\\u103A\": \"eik\",\n        \"\\u102F\\u1010\\u103A\": \"ok\",\n        \"\\u103D\\u1010\\u103A\": \"ut\",\n        \"\\u1031\\u1010\\u103A\": \"it\",\n        \"\\u1012\\u103A\": \"d\",\n        \"\\u102D\\u102F\\u1012\\u103A\": \"ok\",\n        \"\\u102F\\u1012\\u103A\": \"ait\",\n        \"\\u1014\\u103A\": \"an\",\n        \"\\u102C\\u1014\\u103A\": \"an\",\n        \"\\u102D\\u1014\\u103A\": \"ein\",\n        \"\\u102F\\u1014\\u103A\": \"on\",\n        \"\\u103D\\u1014\\u103A\": \"un\",\n        \"\\u1015\\u103A\": \"at\",\n        \"\\u102D\\u1015\\u103A\": \"eik\",\n        \"\\u102F\\u1015\\u103A\": \"ok\",\n        \"\\u103D\\u1015\\u103A\": \"ut\",\n        \"\\u1014\\u103A\\u102F\\u1015\\u103A\": \"nub\",\n        \"\\u1019\\u103A\": \"an\",\n        \"\\u102D\\u1019\\u103A\": \"ein\",\n        \"\\u102F\\u1019\\u103A\": \"on\",\n        \"\\u103D\\u1019\\u103A\": \"un\",\n        \"\\u101A\\u103A\": \"e\",\n        \"\\u102D\\u102F\\u101C\\u103A\": \"ol\",\n        \"\\u1009\\u103A\": \"in\",\n        \"\\u1036\": \"an\",\n        \"\\u102D\\u1036\": \"ein\",\n        \"\\u102F\\u1036\": \"on\",\n        // Dhivehi\n        \"\\u07A6\\u0787\\u07B0\": \"ah\",\n        \"\\u07A6\\u0781\\u07B0\": \"ah\"\n      };\n      var langCharMap = {\n        \"en\": {},\n        // default language\n        \"az\": {\n          // Azerbaijani\n          \"\\xE7\": \"c\",\n          \"\\u0259\": \"e\",\n          \"\\u011F\": \"g\",\n          \"\\u0131\": \"i\",\n          \"\\xF6\": \"o\",\n          \"\\u015F\": \"s\",\n          \"\\xFC\": \"u\",\n          \"\\xC7\": \"C\",\n          \"\\u018F\": \"E\",\n          \"\\u011E\": \"G\",\n          \"\\u0130\": \"I\",\n          \"\\xD6\": \"O\",\n          \"\\u015E\": \"S\",\n          \"\\xDC\": \"U\"\n        },\n        \"cs\": {\n          // Czech\n          \"\\u010D\": \"c\",\n          \"\\u010F\": \"d\",\n          \"\\u011B\": \"e\",\n          \"\\u0148\": \"n\",\n          \"\\u0159\": \"r\",\n          \"\\u0161\": \"s\",\n          \"\\u0165\": \"t\",\n          \"\\u016F\": \"u\",\n          \"\\u017E\": \"z\",\n          \"\\u010C\": \"C\",\n          \"\\u010E\": \"D\",\n          \"\\u011A\": \"E\",\n          \"\\u0147\": \"N\",\n          \"\\u0158\": \"R\",\n          \"\\u0160\": \"S\",\n          \"\\u0164\": \"T\",\n          \"\\u016E\": \"U\",\n          \"\\u017D\": \"Z\"\n        },\n        \"fi\": {\n          // Finnish\n          // 'å': 'a', duplicate see charMap/latin\n          // 'Å': 'A', duplicate see charMap/latin\n          \"\\xE4\": \"a\",\n          // ok\n          \"\\xC4\": \"A\",\n          // ok\n          \"\\xF6\": \"o\",\n          // ok\n          \"\\xD6\": \"O\"\n          // ok\n        },\n        \"hu\": {\n          // Hungarian\n          \"\\xE4\": \"a\",\n          // ok\n          \"\\xC4\": \"A\",\n          // ok\n          // 'á': 'a', duplicate see charMap/latin\n          // 'Á': 'A', duplicate see charMap/latin\n          \"\\xF6\": \"o\",\n          // ok\n          \"\\xD6\": \"O\",\n          // ok\n          // 'ő': 'o', duplicate see charMap/latin\n          // 'Ő': 'O', duplicate see charMap/latin\n          \"\\xFC\": \"u\",\n          \"\\xDC\": \"U\",\n          \"\\u0171\": \"u\",\n          \"\\u0170\": \"U\"\n        },\n        \"lt\": {\n          // Lithuanian\n          \"\\u0105\": \"a\",\n          \"\\u010D\": \"c\",\n          \"\\u0119\": \"e\",\n          \"\\u0117\": \"e\",\n          \"\\u012F\": \"i\",\n          \"\\u0161\": \"s\",\n          \"\\u0173\": \"u\",\n          \"\\u016B\": \"u\",\n          \"\\u017E\": \"z\",\n          \"\\u0104\": \"A\",\n          \"\\u010C\": \"C\",\n          \"\\u0118\": \"E\",\n          \"\\u0116\": \"E\",\n          \"\\u012E\": \"I\",\n          \"\\u0160\": \"S\",\n          \"\\u0172\": \"U\",\n          \"\\u016A\": \"U\"\n        },\n        \"lv\": {\n          // Latvian\n          \"\\u0101\": \"a\",\n          \"\\u010D\": \"c\",\n          \"\\u0113\": \"e\",\n          \"\\u0123\": \"g\",\n          \"\\u012B\": \"i\",\n          \"\\u0137\": \"k\",\n          \"\\u013C\": \"l\",\n          \"\\u0146\": \"n\",\n          \"\\u0161\": \"s\",\n          \"\\u016B\": \"u\",\n          \"\\u017E\": \"z\",\n          \"\\u0100\": \"A\",\n          \"\\u010C\": \"C\",\n          \"\\u0112\": \"E\",\n          \"\\u0122\": \"G\",\n          \"\\u012A\": \"i\",\n          \"\\u0136\": \"k\",\n          \"\\u013B\": \"L\",\n          \"\\u0145\": \"N\",\n          \"\\u0160\": \"S\",\n          \"\\u016A\": \"u\",\n          \"\\u017D\": \"Z\"\n        },\n        \"pl\": {\n          // Polish\n          \"\\u0105\": \"a\",\n          \"\\u0107\": \"c\",\n          \"\\u0119\": \"e\",\n          \"\\u0142\": \"l\",\n          \"\\u0144\": \"n\",\n          \"\\xF3\": \"o\",\n          \"\\u015B\": \"s\",\n          \"\\u017A\": \"z\",\n          \"\\u017C\": \"z\",\n          \"\\u0104\": \"A\",\n          \"\\u0106\": \"C\",\n          \"\\u0118\": \"e\",\n          \"\\u0141\": \"L\",\n          \"\\u0143\": \"N\",\n          \"\\xD3\": \"O\",\n          \"\\u015A\": \"S\",\n          \"\\u0179\": \"Z\",\n          \"\\u017B\": \"Z\"\n        },\n        \"sv\": {\n          // Swedish\n          // 'å': 'a', duplicate see charMap/latin\n          // 'Å': 'A', duplicate see charMap/latin\n          \"\\xE4\": \"a\",\n          // ok\n          \"\\xC4\": \"A\",\n          // ok\n          \"\\xF6\": \"o\",\n          // ok\n          \"\\xD6\": \"O\"\n          // ok\n        },\n        \"sk\": {\n          // Slovak\n          \"\\xE4\": \"a\",\n          \"\\xC4\": \"A\"\n        },\n        \"sr\": {\n          // Serbian\n          \"\\u0459\": \"lj\",\n          \"\\u045A\": \"nj\",\n          \"\\u0409\": \"Lj\",\n          \"\\u040A\": \"Nj\",\n          \"\\u0111\": \"dj\",\n          \"\\u0110\": \"Dj\"\n        },\n        \"tr\": {\n          // Turkish\n          \"\\xDC\": \"U\",\n          \"\\xD6\": \"O\",\n          \"\\xFC\": \"u\",\n          \"\\xF6\": \"o\"\n        }\n      };\n      var symbolMap = {\n        \"ar\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"la-nihaya\",\n          \"\\u2665\": \"hob\",\n          \"&\": \"wa\",\n          \"|\": \"aw\",\n          \"<\": \"aqal-men\",\n          \">\": \"akbar-men\",\n          \"\\u2211\": \"majmou\",\n          \"\\xA4\": \"omla\"\n        },\n        \"az\": {},\n        \"ca\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinit\",\n          \"\\u2665\": \"amor\",\n          \"&\": \"i\",\n          \"|\": \"o\",\n          \"<\": \"menys que\",\n          \">\": \"mes que\",\n          \"\\u2211\": \"suma dels\",\n          \"\\xA4\": \"moneda\"\n        },\n        \"cs\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"nekonecno\",\n          \"\\u2665\": \"laska\",\n          \"&\": \"a\",\n          \"|\": \"nebo\",\n          \"<\": \"mensi nez\",\n          \">\": \"vetsi nez\",\n          \"\\u2211\": \"soucet\",\n          \"\\xA4\": \"mena\"\n        },\n        \"de\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"unendlich\",\n          \"\\u2665\": \"Liebe\",\n          \"&\": \"und\",\n          \"|\": \"oder\",\n          \"<\": \"kleiner als\",\n          \">\": \"groesser als\",\n          \"\\u2211\": \"Summe von\",\n          \"\\xA4\": \"Waehrung\"\n        },\n        \"dv\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"kolunulaa\",\n          \"\\u2665\": \"loabi\",\n          \"&\": \"aai\",\n          \"|\": \"noonee\",\n          \"<\": \"ah vure kuda\",\n          \">\": \"ah vure bodu\",\n          \"\\u2211\": \"jumula\",\n          \"\\xA4\": \"faisaa\"\n        },\n        \"en\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinity\",\n          \"\\u2665\": \"love\",\n          \"&\": \"and\",\n          \"|\": \"or\",\n          \"<\": \"less than\",\n          \">\": \"greater than\",\n          \"\\u2211\": \"sum\",\n          \"\\xA4\": \"currency\"\n        },\n        \"es\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinito\",\n          \"\\u2665\": \"amor\",\n          \"&\": \"y\",\n          \"|\": \"u\",\n          \"<\": \"menos que\",\n          \">\": \"mas que\",\n          \"\\u2211\": \"suma de los\",\n          \"\\xA4\": \"moneda\"\n        },\n        \"fa\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"bi-nahayat\",\n          \"\\u2665\": \"eshgh\",\n          \"&\": \"va\",\n          \"|\": \"ya\",\n          \"<\": \"kamtar-az\",\n          \">\": \"bishtar-az\",\n          \"\\u2211\": \"majmooe\",\n          \"\\xA4\": \"vahed\"\n        },\n        \"fi\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"aarettomyys\",\n          \"\\u2665\": \"rakkaus\",\n          \"&\": \"ja\",\n          \"|\": \"tai\",\n          \"<\": \"pienempi kuin\",\n          \">\": \"suurempi kuin\",\n          \"\\u2211\": \"summa\",\n          \"\\xA4\": \"valuutta\"\n        },\n        \"fr\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infiniment\",\n          \"\\u2665\": \"Amour\",\n          \"&\": \"et\",\n          \"|\": \"ou\",\n          \"<\": \"moins que\",\n          \">\": \"superieure a\",\n          \"\\u2211\": \"somme des\",\n          \"\\xA4\": \"monnaie\"\n        },\n        \"ge\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"usasruloba\",\n          \"\\u2665\": \"siqvaruli\",\n          \"&\": \"da\",\n          \"|\": \"an\",\n          \"<\": \"naklebi\",\n          \">\": \"meti\",\n          \"\\u2211\": \"jami\",\n          \"\\xA4\": \"valuta\"\n        },\n        \"gr\": {},\n        \"hu\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"vegtelen\",\n          \"\\u2665\": \"szerelem\",\n          \"&\": \"es\",\n          \"|\": \"vagy\",\n          \"<\": \"kisebb mint\",\n          \">\": \"nagyobb mint\",\n          \"\\u2211\": \"szumma\",\n          \"\\xA4\": \"penznem\"\n        },\n        \"it\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinito\",\n          \"\\u2665\": \"amore\",\n          \"&\": \"e\",\n          \"|\": \"o\",\n          \"<\": \"minore di\",\n          \">\": \"maggiore di\",\n          \"\\u2211\": \"somma\",\n          \"\\xA4\": \"moneta\"\n        },\n        \"lt\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"begalybe\",\n          \"\\u2665\": \"meile\",\n          \"&\": \"ir\",\n          \"|\": \"ar\",\n          \"<\": \"maziau nei\",\n          \">\": \"daugiau nei\",\n          \"\\u2211\": \"suma\",\n          \"\\xA4\": \"valiuta\"\n        },\n        \"lv\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"bezgaliba\",\n          \"\\u2665\": \"milestiba\",\n          \"&\": \"un\",\n          \"|\": \"vai\",\n          \"<\": \"mazak neka\",\n          \">\": \"lielaks neka\",\n          \"\\u2211\": \"summa\",\n          \"\\xA4\": \"valuta\"\n        },\n        \"my\": {\n          \"\\u2206\": \"kwahkhyaet\",\n          \"\\u221E\": \"asaonasme\",\n          \"\\u2665\": \"akhyait\",\n          \"&\": \"nhin\",\n          \"|\": \"tho\",\n          \"<\": \"ngethaw\",\n          \">\": \"kyithaw\",\n          \"\\u2211\": \"paungld\",\n          \"\\xA4\": \"ngwekye\"\n        },\n        \"mk\": {},\n        \"nl\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"oneindig\",\n          \"\\u2665\": \"liefde\",\n          \"&\": \"en\",\n          \"|\": \"of\",\n          \"<\": \"kleiner dan\",\n          \">\": \"groter dan\",\n          \"\\u2211\": \"som\",\n          \"\\xA4\": \"valuta\"\n        },\n        \"pl\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"nieskonczonosc\",\n          \"\\u2665\": \"milosc\",\n          \"&\": \"i\",\n          \"|\": \"lub\",\n          \"<\": \"mniejsze niz\",\n          \">\": \"wieksze niz\",\n          \"\\u2211\": \"suma\",\n          \"\\xA4\": \"waluta\"\n        },\n        \"pt\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinito\",\n          \"\\u2665\": \"amor\",\n          \"&\": \"e\",\n          \"|\": \"ou\",\n          \"<\": \"menor que\",\n          \">\": \"maior que\",\n          \"\\u2211\": \"soma\",\n          \"\\xA4\": \"moeda\"\n        },\n        \"ro\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"infinit\",\n          \"\\u2665\": \"dragoste\",\n          \"&\": \"si\",\n          \"|\": \"sau\",\n          \"<\": \"mai mic ca\",\n          \">\": \"mai mare ca\",\n          \"\\u2211\": \"suma\",\n          \"\\xA4\": \"valuta\"\n        },\n        \"ru\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"beskonechno\",\n          \"\\u2665\": \"lubov\",\n          \"&\": \"i\",\n          \"|\": \"ili\",\n          \"<\": \"menshe\",\n          \">\": \"bolshe\",\n          \"\\u2211\": \"summa\",\n          \"\\xA4\": \"valjuta\"\n        },\n        \"sk\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"nekonecno\",\n          \"\\u2665\": \"laska\",\n          \"&\": \"a\",\n          \"|\": \"alebo\",\n          \"<\": \"menej ako\",\n          \">\": \"viac ako\",\n          \"\\u2211\": \"sucet\",\n          \"\\xA4\": \"mena\"\n        },\n        \"sr\": {},\n        \"tr\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"sonsuzluk\",\n          \"\\u2665\": \"ask\",\n          \"&\": \"ve\",\n          \"|\": \"veya\",\n          \"<\": \"kucuktur\",\n          \">\": \"buyuktur\",\n          \"\\u2211\": \"toplam\",\n          \"\\xA4\": \"para birimi\"\n        },\n        \"uk\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"bezkinechnist\",\n          \"\\u2665\": \"lubov\",\n          \"&\": \"i\",\n          \"|\": \"abo\",\n          \"<\": \"menshe\",\n          \">\": \"bilshe\",\n          \"\\u2211\": \"suma\",\n          \"\\xA4\": \"valjuta\"\n        },\n        \"vn\": {\n          \"\\u2206\": \"delta\",\n          \"\\u221E\": \"vo cuc\",\n          \"\\u2665\": \"yeu\",\n          \"&\": \"va\",\n          \"|\": \"hoac\",\n          \"<\": \"nho hon\",\n          \">\": \"lon hon\",\n          \"\\u2211\": \"tong\",\n          \"\\xA4\": \"tien te\"\n        }\n      };\n      var uricChars = [\";\", \"?\", \":\", \"@\", \"&\", \"=\", \"+\", \"$\", \",\", \"/\"].join(\"\");\n      var uricNoSlashChars = [\";\", \"?\", \":\", \"@\", \"&\", \"=\", \"+\", \"$\", \",\"].join(\"\");\n      var markChars = [\".\", \"!\", \"~\", \"*\", \"'\", \"(\", \")\"].join(\"\");\n      var getSlug = function getSlug2(input, opts) {\n        var separator = \"-\";\n        var result = \"\";\n        var diatricString = \"\";\n        var convertSymbols = true;\n        var customReplacements = {};\n        var maintainCase;\n        var titleCase;\n        var truncate;\n        var uricFlag;\n        var uricNoSlashFlag;\n        var markFlag;\n        var symbol;\n        var langChar;\n        var lucky;\n        var i;\n        var ch;\n        var l;\n        var lastCharWasSymbol;\n        var lastCharWasDiatric;\n        var allowedChars = \"\";\n        if (typeof input !== \"string\") {\n          return \"\";\n        }\n        if (typeof opts === \"string\") {\n          separator = opts;\n        }\n        symbol = symbolMap.en;\n        langChar = langCharMap.en;\n        if (typeof opts === \"object\") {\n          maintainCase = opts.maintainCase || false;\n          customReplacements = opts.custom && typeof opts.custom === \"object\" ? opts.custom : customReplacements;\n          truncate = +opts.truncate > 1 && opts.truncate || false;\n          uricFlag = opts.uric || false;\n          uricNoSlashFlag = opts.uricNoSlash || false;\n          markFlag = opts.mark || false;\n          convertSymbols = opts.symbols === false || opts.lang === false ? false : true;\n          separator = opts.separator || separator;\n          if (uricFlag) {\n            allowedChars += uricChars;\n          }\n          if (uricNoSlashFlag) {\n            allowedChars += uricNoSlashChars;\n          }\n          if (markFlag) {\n            allowedChars += markChars;\n          }\n          symbol = opts.lang && symbolMap[opts.lang] && convertSymbols ? symbolMap[opts.lang] : convertSymbols ? symbolMap.en : {};\n          langChar = opts.lang && langCharMap[opts.lang] ? langCharMap[opts.lang] : opts.lang === false || opts.lang === true ? {} : langCharMap.en;\n          if (opts.titleCase && typeof opts.titleCase.length === \"number\" && Array.prototype.toString.call(opts.titleCase)) {\n            opts.titleCase.forEach(function(v) {\n              customReplacements[v + \"\"] = v + \"\";\n            });\n            titleCase = true;\n          } else {\n            titleCase = !!opts.titleCase;\n          }\n          if (opts.custom && typeof opts.custom.length === \"number\" && Array.prototype.toString.call(opts.custom)) {\n            opts.custom.forEach(function(v) {\n              customReplacements[v + \"\"] = v + \"\";\n            });\n          }\n          Object.keys(customReplacements).forEach(function(v) {\n            var r;\n            if (v.length > 1) {\n              r = new RegExp(\"\\\\b\" + escapeChars(v) + \"\\\\b\", \"gi\");\n            } else {\n              r = new RegExp(escapeChars(v), \"gi\");\n            }\n            input = input.replace(r, customReplacements[v]);\n          });\n          for (ch in customReplacements) {\n            allowedChars += ch;\n          }\n        }\n        allowedChars += separator;\n        allowedChars = escapeChars(allowedChars);\n        input = input.replace(/(^\\s+|\\s+$)/g, \"\");\n        lastCharWasSymbol = false;\n        lastCharWasDiatric = false;\n        for (i = 0, l = input.length; i < l; i++) {\n          ch = input[i];\n          if (isReplacedCustomChar(ch, customReplacements)) {\n            lastCharWasSymbol = false;\n          } else if (langChar[ch]) {\n            ch = lastCharWasSymbol && langChar[ch].match(/[A-Za-z0-9]/) ? \" \" + langChar[ch] : langChar[ch];\n            lastCharWasSymbol = false;\n          } else if (ch in charMap) {\n            if (i + 1 < l && lookAheadCharArray.indexOf(input[i + 1]) >= 0) {\n              diatricString += ch;\n              ch = \"\";\n            } else if (lastCharWasDiatric === true) {\n              ch = diatricMap[diatricString] + charMap[ch];\n              diatricString = \"\";\n            } else {\n              ch = lastCharWasSymbol && charMap[ch].match(/[A-Za-z0-9]/) ? \" \" + charMap[ch] : charMap[ch];\n            }\n            lastCharWasSymbol = false;\n            lastCharWasDiatric = false;\n          } else if (ch in diatricMap) {\n            diatricString += ch;\n            ch = \"\";\n            if (i === l - 1) {\n              ch = diatricMap[diatricString];\n            }\n            lastCharWasDiatric = true;\n          } else if (\n            // process symbol chars\n            symbol[ch] && !(uricFlag && uricChars.indexOf(ch) !== -1) && !(uricNoSlashFlag && uricNoSlashChars.indexOf(ch) !== -1)\n          ) {\n            ch = lastCharWasSymbol || result.substr(-1).match(/[A-Za-z0-9]/) ? separator + symbol[ch] : symbol[ch];\n            ch += input[i + 1] !== void 0 && input[i + 1].match(/[A-Za-z0-9]/) ? separator : \"\";\n            lastCharWasSymbol = true;\n          } else {\n            if (lastCharWasDiatric === true) {\n              ch = diatricMap[diatricString] + ch;\n              diatricString = \"\";\n              lastCharWasDiatric = false;\n            } else if (lastCharWasSymbol && (/[A-Za-z0-9]/.test(ch) || result.substr(-1).match(/A-Za-z0-9]/))) {\n              ch = \" \" + ch;\n            }\n            lastCharWasSymbol = false;\n          }\n          result += ch.replace(new RegExp(\"[^\\\\w\\\\s\" + allowedChars + \"_-]\", \"g\"), separator);\n        }\n        if (titleCase) {\n          result = result.replace(/(\\w)(\\S*)/g, function(_, i2, r) {\n            var j = i2.toUpperCase() + (r !== null ? r : \"\");\n            return Object.keys(customReplacements).indexOf(j.toLowerCase()) < 0 ? j : j.toLowerCase();\n          });\n        }\n        result = result.replace(/\\s+/g, separator).replace(new RegExp(\"\\\\\" + separator + \"+\", \"g\"), separator).replace(new RegExp(\"(^\\\\\" + separator + \"+|\\\\\" + separator + \"+$)\", \"g\"), \"\");\n        if (truncate && result.length > truncate) {\n          lucky = result.charAt(truncate) === separator;\n          result = result.slice(0, truncate);\n          if (!lucky) {\n            result = result.slice(0, result.lastIndexOf(separator));\n          }\n        }\n        if (!maintainCase && !titleCase) {\n          result = result.toLowerCase();\n        }\n        return result;\n      };\n      var createSlug = function createSlug2(opts) {\n        return function getSlugWithConfig(input) {\n          return getSlug(input, opts);\n        };\n      };\n      var escapeChars = function escapeChars2(input) {\n        return input.replace(/[-\\\\^$*+?.()|[\\]{}\\/]/g, \"\\\\$&\");\n      };\n      var isReplacedCustomChar = function(ch, customReplacements) {\n        for (var c in customReplacements) {\n          if (customReplacements[c] === ch) {\n            return true;\n          }\n        }\n      };\n      if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = getSlug;\n        module.exports.createSlug = createSlug;\n      } else if (typeof define !== \"undefined\" && define.amd) {\n        define([], function() {\n          return getSlug;\n        });\n      } else {\n        try {\n          if (root.getSlug || root.createSlug) {\n            throw \"speakingurl: globals exists /(getSlug|createSlug)/\";\n          } else {\n            root.getSlug = getSlug;\n            root.createSlug = createSlug;\n          }\n        } catch (e) {\n        }\n      }\n    })(exports);\n  }\n});\n\n// ../../node_modules/.pnpm/speakingurl@14.0.1/node_modules/speakingurl/index.js\nvar require_speakingurl2 = __commonJS({\n  \"../../node_modules/.pnpm/speakingurl@14.0.1/node_modules/speakingurl/index.js\"(exports, module) {\n    \"use strict\";\n    init_esm_shims();\n    module.exports = require_speakingurl();\n  }\n});\n\n// src/index.ts\ninit_esm_shims();\n\n// src/core/index.ts\ninit_esm_shims();\n\n\n// src/compat/index.ts\ninit_esm_shims();\n\nfunction onLegacyDevToolsPluginApiAvailable(cb) {\n  if (_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__) {\n    cb();\n    return;\n  }\n  Object.defineProperty(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target, \"__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__\", {\n    set(value) {\n      if (value)\n        cb();\n    },\n    configurable: true\n  });\n}\n\n// src/ctx/index.ts\ninit_esm_shims();\n\n\n// src/ctx/api.ts\ninit_esm_shims();\n\n\n// src/core/component-highlighter/index.ts\ninit_esm_shims();\n\n// src/core/component/state/bounding-rect.ts\ninit_esm_shims();\n\n// src/core/component/utils/index.ts\ninit_esm_shims();\n\nfunction getComponentTypeName(options) {\n  var _a25;\n  const name = options.name || options._componentTag || options.__VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__ || options.__name;\n  if (name === \"index\" && ((_a25 = options.__file) == null ? void 0 : _a25.endsWith(\"index.vue\"))) {\n    return \"\";\n  }\n  return name;\n}\nfunction getComponentFileName(options) {\n  const file = options.__file;\n  if (file)\n    return (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.classify)((0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.basename)(file, \".vue\"));\n}\nfunction getComponentName(options) {\n  const name = options.displayName || options.name || options._componentTag;\n  if (name)\n    return name;\n  return getComponentFileName(options);\n}\nfunction saveComponentGussedName(instance, name) {\n  instance.type.__VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__ = name;\n  return name;\n}\nfunction getAppRecord(instance) {\n  if (instance.__VUE_DEVTOOLS_NEXT_APP_RECORD__)\n    return instance.__VUE_DEVTOOLS_NEXT_APP_RECORD__;\n  else if (instance.root)\n    return instance.appContext.app.__VUE_DEVTOOLS_NEXT_APP_RECORD__;\n}\nasync function getComponentId(options) {\n  const { app, uid, instance } = options;\n  try {\n    if (instance.__VUE_DEVTOOLS_NEXT_UID__)\n      return instance.__VUE_DEVTOOLS_NEXT_UID__;\n    const appRecord = await getAppRecord(app);\n    if (!appRecord)\n      return null;\n    const isRoot = appRecord.rootInstance === instance;\n    return `${appRecord.id}:${isRoot ? \"root\" : uid}`;\n  } catch (e) {\n  }\n}\nfunction isFragment(instance) {\n  var _a25, _b25;\n  const subTreeType = (_a25 = instance.subTree) == null ? void 0 : _a25.type;\n  const appRecord = getAppRecord(instance);\n  if (appRecord) {\n    return ((_b25 = appRecord == null ? void 0 : appRecord.types) == null ? void 0 : _b25.Fragment) === subTreeType;\n  }\n  return false;\n}\nfunction isBeingDestroyed(instance) {\n  return instance._isBeingDestroyed || instance.isUnmounted;\n}\nfunction getInstanceName(instance) {\n  var _a25, _b25, _c;\n  const name = getComponentTypeName((instance == null ? void 0 : instance.type) || {});\n  if (name)\n    return name;\n  if ((instance == null ? void 0 : instance.root) === instance)\n    return \"Root\";\n  for (const key in (_b25 = (_a25 = instance.parent) == null ? void 0 : _a25.type) == null ? void 0 : _b25.components) {\n    if (instance.parent.type.components[key] === (instance == null ? void 0 : instance.type))\n      return saveComponentGussedName(instance, key);\n  }\n  for (const key in (_c = instance.appContext) == null ? void 0 : _c.components) {\n    if (instance.appContext.components[key] === (instance == null ? void 0 : instance.type))\n      return saveComponentGussedName(instance, key);\n  }\n  const fileName = getComponentFileName((instance == null ? void 0 : instance.type) || {});\n  if (fileName)\n    return fileName;\n  return \"Anonymous Component\";\n}\nfunction getUniqueComponentId(instance) {\n  var _a25, _b25, _c;\n  const appId = (_c = (_b25 = (_a25 = instance == null ? void 0 : instance.appContext) == null ? void 0 : _a25.app) == null ? void 0 : _b25.__VUE_DEVTOOLS_NEXT_APP_RECORD_ID__) != null ? _c : 0;\n  const instanceId = instance === (instance == null ? void 0 : instance.root) ? \"root\" : instance.uid;\n  return `${appId}:${instanceId}`;\n}\nfunction getRenderKey(value) {\n  if (value == null)\n    return \"\";\n  if (typeof value === \"number\")\n    return value;\n  else if (typeof value === \"string\")\n    return `'${value}'`;\n  else if (Array.isArray(value))\n    return \"Array\";\n  else\n    return \"Object\";\n}\nfunction returnError(cb) {\n  try {\n    return cb();\n  } catch (e) {\n    return e;\n  }\n}\nfunction getComponentInstance(appRecord, instanceId) {\n  instanceId = instanceId || `${appRecord.id}:root`;\n  const instance = appRecord.instanceMap.get(instanceId);\n  return instance || appRecord.instanceMap.get(\":root\");\n}\nfunction ensurePropertyExists(obj, key, skipObjCheck = false) {\n  return skipObjCheck ? key in obj : typeof obj === \"object\" && obj !== null ? key in obj : false;\n}\n\n// src/core/component/state/bounding-rect.ts\nfunction createRect() {\n  const rect = {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    get width() {\n      return rect.right - rect.left;\n    },\n    get height() {\n      return rect.bottom - rect.top;\n    }\n  };\n  return rect;\n}\nvar range;\nfunction getTextRect(node) {\n  if (!range)\n    range = document.createRange();\n  range.selectNode(node);\n  return range.getBoundingClientRect();\n}\nfunction getFragmentRect(vnode) {\n  const rect = createRect();\n  if (!vnode.children)\n    return rect;\n  for (let i = 0, l = vnode.children.length; i < l; i++) {\n    const childVnode = vnode.children[i];\n    let childRect;\n    if (childVnode.component) {\n      childRect = getComponentBoundingRect(childVnode.component);\n    } else if (childVnode.el) {\n      const el = childVnode.el;\n      if (el.nodeType === 1 || el.getBoundingClientRect)\n        childRect = el.getBoundingClientRect();\n      else if (el.nodeType === 3 && el.data.trim())\n        childRect = getTextRect(el);\n    }\n    if (childRect)\n      mergeRects(rect, childRect);\n  }\n  return rect;\n}\nfunction mergeRects(a, b) {\n  if (!a.top || b.top < a.top)\n    a.top = b.top;\n  if (!a.bottom || b.bottom > a.bottom)\n    a.bottom = b.bottom;\n  if (!a.left || b.left < a.left)\n    a.left = b.left;\n  if (!a.right || b.right > a.right)\n    a.right = b.right;\n  return a;\n}\nvar DEFAULT_RECT = {\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: 0,\n  height: 0\n};\nfunction getComponentBoundingRect(instance) {\n  const el = instance.subTree.el;\n  if (typeof window === \"undefined\") {\n    return DEFAULT_RECT;\n  }\n  if (isFragment(instance))\n    return getFragmentRect(instance.subTree);\n  else if ((el == null ? void 0 : el.nodeType) === 1)\n    return el == null ? void 0 : el.getBoundingClientRect();\n  else if (instance.subTree.component)\n    return getComponentBoundingRect(instance.subTree.component);\n  else\n    return DEFAULT_RECT;\n}\n\n// src/core/component/tree/el.ts\ninit_esm_shims();\nfunction getRootElementsFromComponentInstance(instance) {\n  if (isFragment(instance))\n    return getFragmentRootElements(instance.subTree);\n  if (!instance.subTree)\n    return [];\n  return [instance.subTree.el];\n}\nfunction getFragmentRootElements(vnode) {\n  if (!vnode.children)\n    return [];\n  const list = [];\n  vnode.children.forEach((childVnode) => {\n    if (childVnode.component)\n      list.push(...getRootElementsFromComponentInstance(childVnode.component));\n    else if (childVnode == null ? void 0 : childVnode.el)\n      list.push(childVnode.el);\n  });\n  return list;\n}\n\n// src/core/component-highlighter/index.ts\nvar CONTAINER_ELEMENT_ID = \"__vue-devtools-component-inspector__\";\nvar CARD_ELEMENT_ID = \"__vue-devtools-component-inspector__card__\";\nvar COMPONENT_NAME_ELEMENT_ID = \"__vue-devtools-component-inspector__name__\";\nvar INDICATOR_ELEMENT_ID = \"__vue-devtools-component-inspector__indicator__\";\nvar containerStyles = {\n  display: \"block\",\n  zIndex: 2147483640,\n  position: \"fixed\",\n  backgroundColor: \"#42b88325\",\n  border: \"1px solid #42b88350\",\n  borderRadius: \"5px\",\n  transition: \"all 0.1s ease-in\",\n  pointerEvents: \"none\"\n};\nvar cardStyles = {\n  fontFamily: \"Arial, Helvetica, sans-serif\",\n  padding: \"5px 8px\",\n  borderRadius: \"4px\",\n  textAlign: \"left\",\n  position: \"absolute\",\n  left: 0,\n  color: \"#e9e9e9\",\n  fontSize: \"14px\",\n  fontWeight: 600,\n  lineHeight: \"24px\",\n  backgroundColor: \"#42b883\",\n  boxShadow: \"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)\"\n};\nvar indicatorStyles = {\n  display: \"inline-block\",\n  fontWeight: 400,\n  fontStyle: \"normal\",\n  fontSize: \"12px\",\n  opacity: 0.7\n};\nfunction getContainerElement() {\n  return document.getElementById(CONTAINER_ELEMENT_ID);\n}\nfunction getCardElement() {\n  return document.getElementById(CARD_ELEMENT_ID);\n}\nfunction getIndicatorElement() {\n  return document.getElementById(INDICATOR_ELEMENT_ID);\n}\nfunction getNameElement() {\n  return document.getElementById(COMPONENT_NAME_ELEMENT_ID);\n}\nfunction getStyles(bounds) {\n  return {\n    left: `${Math.round(bounds.left * 100) / 100}px`,\n    top: `${Math.round(bounds.top * 100) / 100}px`,\n    width: `${Math.round(bounds.width * 100) / 100}px`,\n    height: `${Math.round(bounds.height * 100) / 100}px`\n  };\n}\nfunction create(options) {\n  var _a25;\n  const containerEl = document.createElement(\"div\");\n  containerEl.id = (_a25 = options.elementId) != null ? _a25 : CONTAINER_ELEMENT_ID;\n  Object.assign(containerEl.style, {\n    ...containerStyles,\n    ...getStyles(options.bounds),\n    ...options.style\n  });\n  const cardEl = document.createElement(\"span\");\n  cardEl.id = CARD_ELEMENT_ID;\n  Object.assign(cardEl.style, {\n    ...cardStyles,\n    top: options.bounds.top < 35 ? 0 : \"-35px\"\n  });\n  const nameEl = document.createElement(\"span\");\n  nameEl.id = COMPONENT_NAME_ELEMENT_ID;\n  nameEl.innerHTML = `&lt;${options.name}&gt;&nbsp;&nbsp;`;\n  const indicatorEl = document.createElement(\"i\");\n  indicatorEl.id = INDICATOR_ELEMENT_ID;\n  indicatorEl.innerHTML = `${Math.round(options.bounds.width * 100) / 100} x ${Math.round(options.bounds.height * 100) / 100}`;\n  Object.assign(indicatorEl.style, indicatorStyles);\n  cardEl.appendChild(nameEl);\n  cardEl.appendChild(indicatorEl);\n  containerEl.appendChild(cardEl);\n  document.body.appendChild(containerEl);\n  return containerEl;\n}\nfunction update(options) {\n  const containerEl = getContainerElement();\n  const cardEl = getCardElement();\n  const nameEl = getNameElement();\n  const indicatorEl = getIndicatorElement();\n  if (containerEl) {\n    Object.assign(containerEl.style, {\n      ...containerStyles,\n      ...getStyles(options.bounds)\n    });\n    Object.assign(cardEl.style, {\n      top: options.bounds.top < 35 ? 0 : \"-35px\"\n    });\n    nameEl.innerHTML = `&lt;${options.name}&gt;&nbsp;&nbsp;`;\n    indicatorEl.innerHTML = `${Math.round(options.bounds.width * 100) / 100} x ${Math.round(options.bounds.height * 100) / 100}`;\n  }\n}\nfunction highlight(instance) {\n  const bounds = getComponentBoundingRect(instance);\n  if (!bounds.width && !bounds.height)\n    return;\n  const name = getInstanceName(instance);\n  const container = getContainerElement();\n  container ? update({ bounds, name }) : create({ bounds, name });\n}\nfunction unhighlight() {\n  const el = getContainerElement();\n  if (el)\n    el.style.display = \"none\";\n}\nvar inspectInstance = null;\nfunction inspectFn(e) {\n  const target22 = e.target;\n  if (target22) {\n    const instance = target22.__vueParentComponent;\n    if (instance) {\n      inspectInstance = instance;\n      const el = instance.vnode.el;\n      if (el) {\n        const bounds = getComponentBoundingRect(instance);\n        const name = getInstanceName(instance);\n        const container = getContainerElement();\n        container ? update({ bounds, name }) : create({ bounds, name });\n      }\n    }\n  }\n}\nfunction selectComponentFn(e, cb) {\n  e.preventDefault();\n  e.stopPropagation();\n  if (inspectInstance) {\n    const uniqueComponentId = getUniqueComponentId(inspectInstance);\n    cb(uniqueComponentId);\n  }\n}\nvar inspectComponentHighLighterSelectFn = null;\nfunction cancelInspectComponentHighLighter() {\n  unhighlight();\n  window.removeEventListener(\"mouseover\", inspectFn);\n  window.removeEventListener(\"click\", inspectComponentHighLighterSelectFn, true);\n  inspectComponentHighLighterSelectFn = null;\n}\nfunction inspectComponentHighLighter() {\n  window.addEventListener(\"mouseover\", inspectFn);\n  return new Promise((resolve) => {\n    function onSelect(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      selectComponentFn(e, (id) => {\n        window.removeEventListener(\"click\", onSelect, true);\n        inspectComponentHighLighterSelectFn = null;\n        window.removeEventListener(\"mouseover\", inspectFn);\n        const el = getContainerElement();\n        if (el)\n          el.style.display = \"none\";\n        resolve(JSON.stringify({ id }));\n      });\n    }\n    inspectComponentHighLighterSelectFn = onSelect;\n    window.addEventListener(\"click\", onSelect, true);\n  });\n}\nfunction scrollToComponent(options) {\n  const instance = getComponentInstance(activeAppRecord.value, options.id);\n  if (instance) {\n    const [el] = getRootElementsFromComponentInstance(instance);\n    if (typeof el.scrollIntoView === \"function\") {\n      el.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else {\n      const bounds = getComponentBoundingRect(instance);\n      const scrollTarget = document.createElement(\"div\");\n      const styles = {\n        ...getStyles(bounds),\n        position: \"absolute\"\n      };\n      Object.assign(scrollTarget.style, styles);\n      document.body.appendChild(scrollTarget);\n      scrollTarget.scrollIntoView({\n        behavior: \"smooth\"\n      });\n      setTimeout(() => {\n        document.body.removeChild(scrollTarget);\n      }, 2e3);\n    }\n    setTimeout(() => {\n      const bounds = getComponentBoundingRect(instance);\n      if (bounds.width || bounds.height) {\n        const name = getInstanceName(instance);\n        const el2 = getContainerElement();\n        el2 ? update({ ...options, name, bounds }) : create({ ...options, name, bounds });\n        setTimeout(() => {\n          if (el2)\n            el2.style.display = \"none\";\n        }, 1500);\n      }\n    }, 1200);\n  }\n}\n\n// src/core/component-inspector/index.ts\ninit_esm_shims();\n\nvar _a, _b;\n(_b = (_a = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_COMPONENT_INSPECTOR_ENABLED__) != null ? _b : _a.__VUE_DEVTOOLS_COMPONENT_INSPECTOR_ENABLED__ = true;\nfunction toggleComponentInspectorEnabled(enabled) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_COMPONENT_INSPECTOR_ENABLED__ = enabled;\n}\nfunction waitForInspectorInit(cb) {\n  let total = 0;\n  const timer = setInterval(() => {\n    if (_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_INSPECTOR__) {\n      clearInterval(timer);\n      total += 30;\n      cb();\n    }\n    if (total >= /* 5s */\n    5e3)\n      clearInterval(timer);\n  }, 30);\n}\nfunction setupInspector() {\n  const inspector = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_INSPECTOR__;\n  const _openInEditor = inspector.openInEditor;\n  inspector.openInEditor = async (...params) => {\n    inspector.disable();\n    _openInEditor(...params);\n  };\n}\nfunction getComponentInspector() {\n  return new Promise((resolve) => {\n    function setup() {\n      setupInspector();\n      resolve(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_INSPECTOR__);\n    }\n    if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_INSPECTOR__) {\n      waitForInspectorInit(() => {\n        setup();\n      });\n    } else {\n      setup();\n    }\n  });\n}\n\n// src/core/component/state/editor.ts\ninit_esm_shims();\n\n// src/shared/stub-vue.ts\ninit_esm_shims();\nfunction isReadonly(value) {\n  return !!(value && value[\"__v_isReadonly\" /* IS_READONLY */]);\n}\nfunction isReactive(value) {\n  if (isReadonly(value)) {\n    return isReactive(value[\"__v_raw\" /* RAW */]);\n  }\n  return !!(value && value[\"__v_isReactive\" /* IS_REACTIVE */]);\n}\nfunction isRef(r) {\n  return !!(r && r.__v_isRef === true);\n}\nfunction toRaw(observed) {\n  const raw = observed && observed[\"__v_raw\" /* RAW */];\n  return raw ? toRaw(raw) : observed;\n}\nvar Fragment = Symbol.for(\"v-fgt\");\n\n// src/core/component/state/editor.ts\nvar StateEditor = class {\n  constructor() {\n    this.refEditor = new RefStateEditor();\n  }\n  set(object, path, value, cb) {\n    const sections = Array.isArray(path) ? path : path.split(\".\");\n    const markRef = false;\n    while (sections.length > 1) {\n      const section = sections.shift();\n      if (object instanceof Map)\n        object = object.get(section);\n      if (object instanceof Set)\n        object = Array.from(object.values())[section];\n      else object = object[section];\n      if (this.refEditor.isRef(object))\n        object = this.refEditor.get(object);\n    }\n    const field = sections[0];\n    const item = this.refEditor.get(object)[field];\n    if (cb) {\n      cb(object, field, value);\n    } else {\n      if (this.refEditor.isRef(item))\n        this.refEditor.set(item, value);\n      else if (markRef)\n        object[field] = value;\n      else\n        object[field] = value;\n    }\n  }\n  get(object, path) {\n    const sections = Array.isArray(path) ? path : path.split(\".\");\n    for (let i = 0; i < sections.length; i++) {\n      if (object instanceof Map)\n        object = object.get(sections[i]);\n      else\n        object = object[sections[i]];\n      if (this.refEditor.isRef(object))\n        object = this.refEditor.get(object);\n      if (!object)\n        return void 0;\n    }\n    return object;\n  }\n  has(object, path, parent = false) {\n    if (typeof object === \"undefined\")\n      return false;\n    const sections = Array.isArray(path) ? path.slice() : path.split(\".\");\n    const size = !parent ? 1 : 2;\n    while (object && sections.length > size) {\n      const section = sections.shift();\n      object = object[section];\n      if (this.refEditor.isRef(object))\n        object = this.refEditor.get(object);\n    }\n    return object != null && Object.prototype.hasOwnProperty.call(object, sections[0]);\n  }\n  createDefaultSetCallback(state) {\n    return (object, field, value) => {\n      if (state.remove || state.newKey) {\n        if (Array.isArray(object))\n          object.splice(field, 1);\n        else if (toRaw(object) instanceof Map)\n          object.delete(field);\n        else if (toRaw(object) instanceof Set)\n          object.delete(Array.from(object.values())[field]);\n        else Reflect.deleteProperty(object, field);\n      }\n      if (!state.remove) {\n        const target22 = object[state.newKey || field];\n        if (this.refEditor.isRef(target22))\n          this.refEditor.set(target22, value);\n        else if (toRaw(object) instanceof Map)\n          object.set(state.newKey || field, value);\n        else if (toRaw(object) instanceof Set)\n          object.add(value);\n        else\n          object[state.newKey || field] = value;\n      }\n    };\n  }\n};\nvar RefStateEditor = class {\n  set(ref, value) {\n    if (isRef(ref)) {\n      ref.value = value;\n    } else {\n      if (ref instanceof Set && Array.isArray(value)) {\n        ref.clear();\n        value.forEach((v) => ref.add(v));\n        return;\n      }\n      const currentKeys = Object.keys(value);\n      if (ref instanceof Map) {\n        const previousKeysSet2 = new Set(ref.keys());\n        currentKeys.forEach((key) => {\n          ref.set(key, Reflect.get(value, key));\n          previousKeysSet2.delete(key);\n        });\n        previousKeysSet2.forEach((key) => ref.delete(key));\n        return;\n      }\n      const previousKeysSet = new Set(Object.keys(ref));\n      currentKeys.forEach((key) => {\n        Reflect.set(ref, key, Reflect.get(value, key));\n        previousKeysSet.delete(key);\n      });\n      previousKeysSet.forEach((key) => Reflect.deleteProperty(ref, key));\n    }\n  }\n  get(ref) {\n    return isRef(ref) ? ref.value : ref;\n  }\n  isRef(ref) {\n    return isRef(ref) || isReactive(ref);\n  }\n};\nasync function editComponentState(payload, stateEditor2) {\n  const { path, nodeId, state, type } = payload;\n  const instance = getComponentInstance(activeAppRecord.value, nodeId);\n  if (!instance)\n    return;\n  const targetPath = path.slice();\n  let target22;\n  if (Object.keys(instance.props).includes(path[0])) {\n    target22 = instance.props;\n  } else if (instance.devtoolsRawSetupState && Object.keys(instance.devtoolsRawSetupState).includes(path[0])) {\n    target22 = instance.devtoolsRawSetupState;\n  } else if (instance.data && Object.keys(instance.data).includes(path[0])) {\n    target22 = instance.data;\n  } else {\n    target22 = instance.proxy;\n  }\n  if (target22 && targetPath) {\n    if (state.type === \"object\" && type === \"reactive\") {\n    }\n    stateEditor2.set(target22, targetPath, state.value, stateEditor2.createDefaultSetCallback(state));\n  }\n}\nvar stateEditor = new StateEditor();\nasync function editState(payload) {\n  editComponentState(payload, stateEditor);\n}\n\n// src/core/open-in-editor/index.ts\ninit_esm_shims();\n\n\n// src/ctx/state.ts\ninit_esm_shims();\n\n\n\n// src/core/timeline/storage.ts\ninit_esm_shims();\n\nvar TIMELINE_LAYERS_STATE_STORAGE_ID = \"__VUE_DEVTOOLS_KIT_TIMELINE_LAYERS_STATE__\";\nfunction addTimelineLayersStateToStorage(state) {\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isBrowser || typeof localStorage === \"undefined\" || localStorage === null) {\n    return;\n  }\n  localStorage.setItem(TIMELINE_LAYERS_STATE_STORAGE_ID, JSON.stringify(state));\n}\nfunction getTimelineLayersStateFromStorage() {\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isBrowser || typeof localStorage === \"undefined\" || localStorage === null) {\n    return {\n      recordingState: false,\n      mouseEventEnabled: false,\n      keyboardEventEnabled: false,\n      componentEventEnabled: false,\n      performanceEventEnabled: false,\n      selected: \"\"\n    };\n  }\n  const state = localStorage.getItem(TIMELINE_LAYERS_STATE_STORAGE_ID);\n  return state ? JSON.parse(state) : {\n    recordingState: false,\n    mouseEventEnabled: false,\n    keyboardEventEnabled: false,\n    componentEventEnabled: false,\n    performanceEventEnabled: false,\n    selected: \"\"\n  };\n}\n\n// src/ctx/hook.ts\ninit_esm_shims();\n\n\n\n// src/ctx/inspector.ts\ninit_esm_shims();\n\n\n\n// src/ctx/timeline.ts\ninit_esm_shims();\n\nvar _a2, _b2;\n(_b2 = (_a2 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_TIMELINE_LAYERS) != null ? _b2 : _a2.__VUE_DEVTOOLS_KIT_TIMELINE_LAYERS = [];\nvar devtoolsTimelineLayers = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_TIMELINE_LAYERS, {\n  get(target22, prop, receiver) {\n    return Reflect.get(target22, prop, receiver);\n  }\n});\nfunction addTimelineLayer(options, descriptor) {\n  devtoolsState.timelineLayersState[descriptor.id] = false;\n  devtoolsTimelineLayers.push({\n    ...options,\n    descriptorId: descriptor.id,\n    appRecord: getAppRecord(descriptor.app)\n  });\n}\nfunction updateTimelineLayersState(state) {\n  const updatedState = {\n    ...devtoolsState.timelineLayersState,\n    ...state\n  };\n  addTimelineLayersStateToStorage(updatedState);\n  updateDevToolsState({\n    timelineLayersState: updatedState\n  });\n}\n\n// src/ctx/inspector.ts\nvar _a3, _b3;\n(_b3 = (_a3 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_INSPECTOR__) != null ? _b3 : _a3.__VUE_DEVTOOLS_KIT_INSPECTOR__ = [];\nvar devtoolsInspector = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_INSPECTOR__, {\n  get(target22, prop, receiver) {\n    return Reflect.get(target22, prop, receiver);\n  }\n});\nvar callInspectorUpdatedHook = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => {\n  devtoolsContext.hooks.callHook(\"sendInspectorToClient\" /* SEND_INSPECTOR_TO_CLIENT */, getActiveInspectors());\n});\nfunction addInspector(inspector, descriptor) {\n  var _a25, _b25;\n  devtoolsInspector.push({\n    options: inspector,\n    descriptor,\n    treeFilterPlaceholder: (_a25 = inspector.treeFilterPlaceholder) != null ? _a25 : \"Search tree...\",\n    stateFilterPlaceholder: (_b25 = inspector.stateFilterPlaceholder) != null ? _b25 : \"Search state...\",\n    treeFilter: \"\",\n    selectedNodeId: \"\",\n    appRecord: getAppRecord(descriptor.app)\n  });\n  callInspectorUpdatedHook();\n}\nfunction getActiveInspectors() {\n  return devtoolsInspector.filter((inspector) => inspector.descriptor.app === activeAppRecord.value.app).filter((inspector) => inspector.descriptor.id !== \"components\").map((inspector) => {\n    var _a25;\n    const descriptor = inspector.descriptor;\n    const options = inspector.options;\n    return {\n      id: options.id,\n      label: options.label,\n      logo: descriptor.logo,\n      icon: `custom-ic-baseline-${(_a25 = options == null ? void 0 : options.icon) == null ? void 0 : _a25.replace(/_/g, \"-\")}`,\n      packageName: descriptor.packageName,\n      homepage: descriptor.homepage,\n      pluginId: descriptor.id\n    };\n  });\n}\nfunction getInspectorInfo(id) {\n  const inspector = getInspector(id, activeAppRecord.value.app);\n  if (!inspector)\n    return;\n  const descriptor = inspector.descriptor;\n  const options = inspector.options;\n  const timelineLayers = devtoolsTimelineLayers.filter((layer) => layer.descriptorId === descriptor.id).map((item) => ({\n    id: item.id,\n    label: item.label,\n    color: item.color\n  }));\n  return {\n    id: options.id,\n    label: options.label,\n    logo: descriptor.logo,\n    packageName: descriptor.packageName,\n    homepage: descriptor.homepage,\n    timelineLayers,\n    treeFilterPlaceholder: inspector.treeFilterPlaceholder,\n    stateFilterPlaceholder: inspector.stateFilterPlaceholder\n  };\n}\nfunction getInspector(id, app) {\n  return devtoolsInspector.find((inspector) => inspector.options.id === id && (app ? inspector.descriptor.app === app : true));\n}\nfunction getInspectorActions(id) {\n  const inspector = getInspector(id);\n  return inspector == null ? void 0 : inspector.options.actions;\n}\nfunction getInspectorNodeActions(id) {\n  const inspector = getInspector(id);\n  return inspector == null ? void 0 : inspector.options.nodeActions;\n}\n\n// src/ctx/hook.ts\nvar DevToolsV6PluginAPIHookKeys = /* @__PURE__ */ ((DevToolsV6PluginAPIHookKeys2) => {\n  DevToolsV6PluginAPIHookKeys2[\"VISIT_COMPONENT_TREE\"] = \"visitComponentTree\";\n  DevToolsV6PluginAPIHookKeys2[\"INSPECT_COMPONENT\"] = \"inspectComponent\";\n  DevToolsV6PluginAPIHookKeys2[\"EDIT_COMPONENT_STATE\"] = \"editComponentState\";\n  DevToolsV6PluginAPIHookKeys2[\"GET_INSPECTOR_TREE\"] = \"getInspectorTree\";\n  DevToolsV6PluginAPIHookKeys2[\"GET_INSPECTOR_STATE\"] = \"getInspectorState\";\n  DevToolsV6PluginAPIHookKeys2[\"EDIT_INSPECTOR_STATE\"] = \"editInspectorState\";\n  DevToolsV6PluginAPIHookKeys2[\"INSPECT_TIMELINE_EVENT\"] = \"inspectTimelineEvent\";\n  DevToolsV6PluginAPIHookKeys2[\"TIMELINE_CLEARED\"] = \"timelineCleared\";\n  DevToolsV6PluginAPIHookKeys2[\"SET_PLUGIN_SETTINGS\"] = \"setPluginSettings\";\n  return DevToolsV6PluginAPIHookKeys2;\n})(DevToolsV6PluginAPIHookKeys || {});\nvar DevToolsContextHookKeys = /* @__PURE__ */ ((DevToolsContextHookKeys2) => {\n  DevToolsContextHookKeys2[\"ADD_INSPECTOR\"] = \"addInspector\";\n  DevToolsContextHookKeys2[\"SEND_INSPECTOR_TREE\"] = \"sendInspectorTree\";\n  DevToolsContextHookKeys2[\"SEND_INSPECTOR_STATE\"] = \"sendInspectorState\";\n  DevToolsContextHookKeys2[\"CUSTOM_INSPECTOR_SELECT_NODE\"] = \"customInspectorSelectNode\";\n  DevToolsContextHookKeys2[\"TIMELINE_LAYER_ADDED\"] = \"timelineLayerAdded\";\n  DevToolsContextHookKeys2[\"TIMELINE_EVENT_ADDED\"] = \"timelineEventAdded\";\n  DevToolsContextHookKeys2[\"GET_COMPONENT_INSTANCES\"] = \"getComponentInstances\";\n  DevToolsContextHookKeys2[\"GET_COMPONENT_BOUNDS\"] = \"getComponentBounds\";\n  DevToolsContextHookKeys2[\"GET_COMPONENT_NAME\"] = \"getComponentName\";\n  DevToolsContextHookKeys2[\"COMPONENT_HIGHLIGHT\"] = \"componentHighlight\";\n  DevToolsContextHookKeys2[\"COMPONENT_UNHIGHLIGHT\"] = \"componentUnhighlight\";\n  return DevToolsContextHookKeys2;\n})(DevToolsContextHookKeys || {});\nvar DevToolsMessagingHookKeys = /* @__PURE__ */ ((DevToolsMessagingHookKeys2) => {\n  DevToolsMessagingHookKeys2[\"SEND_INSPECTOR_TREE_TO_CLIENT\"] = \"sendInspectorTreeToClient\";\n  DevToolsMessagingHookKeys2[\"SEND_INSPECTOR_STATE_TO_CLIENT\"] = \"sendInspectorStateToClient\";\n  DevToolsMessagingHookKeys2[\"SEND_TIMELINE_EVENT_TO_CLIENT\"] = \"sendTimelineEventToClient\";\n  DevToolsMessagingHookKeys2[\"SEND_INSPECTOR_TO_CLIENT\"] = \"sendInspectorToClient\";\n  DevToolsMessagingHookKeys2[\"SEND_ACTIVE_APP_UNMOUNTED_TO_CLIENT\"] = \"sendActiveAppUpdatedToClient\";\n  DevToolsMessagingHookKeys2[\"DEVTOOLS_STATE_UPDATED\"] = \"devtoolsStateUpdated\";\n  DevToolsMessagingHookKeys2[\"DEVTOOLS_CONNECTED_UPDATED\"] = \"devtoolsConnectedUpdated\";\n  DevToolsMessagingHookKeys2[\"ROUTER_INFO_UPDATED\"] = \"routerInfoUpdated\";\n  return DevToolsMessagingHookKeys2;\n})(DevToolsMessagingHookKeys || {});\nfunction createDevToolsCtxHooks() {\n  const hooks2 = (0,hookable__WEBPACK_IMPORTED_MODULE_1__.createHooks)();\n  hooks2.hook(\"addInspector\" /* ADD_INSPECTOR */, ({ inspector, plugin }) => {\n    addInspector(inspector, plugin.descriptor);\n  });\n  const debounceSendInspectorTree = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(async ({ inspectorId, plugin }) => {\n    var _a25;\n    if (!inspectorId || !((_a25 = plugin == null ? void 0 : plugin.descriptor) == null ? void 0 : _a25.app) || devtoolsState.highPerfModeEnabled)\n      return;\n    const inspector = getInspector(inspectorId, plugin.descriptor.app);\n    const _payload = {\n      app: plugin.descriptor.app,\n      inspectorId,\n      filter: (inspector == null ? void 0 : inspector.treeFilter) || \"\",\n      rootNodes: []\n    };\n    await new Promise((resolve) => {\n      hooks2.callHookWith(async (callbacks) => {\n        await Promise.all(callbacks.map((cb) => cb(_payload)));\n        resolve();\n      }, \"getInspectorTree\" /* GET_INSPECTOR_TREE */);\n    });\n    hooks2.callHookWith(async (callbacks) => {\n      await Promise.all(callbacks.map((cb) => cb({\n        inspectorId,\n        rootNodes: _payload.rootNodes\n      })));\n    }, \"sendInspectorTreeToClient\" /* SEND_INSPECTOR_TREE_TO_CLIENT */);\n  }, 120);\n  hooks2.hook(\"sendInspectorTree\" /* SEND_INSPECTOR_TREE */, debounceSendInspectorTree);\n  const debounceSendInspectorState = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(async ({ inspectorId, plugin }) => {\n    var _a25;\n    if (!inspectorId || !((_a25 = plugin == null ? void 0 : plugin.descriptor) == null ? void 0 : _a25.app) || devtoolsState.highPerfModeEnabled)\n      return;\n    const inspector = getInspector(inspectorId, plugin.descriptor.app);\n    const _payload = {\n      app: plugin.descriptor.app,\n      inspectorId,\n      nodeId: (inspector == null ? void 0 : inspector.selectedNodeId) || \"\",\n      state: null\n    };\n    const ctx = {\n      currentTab: `custom-inspector:${inspectorId}`\n    };\n    if (_payload.nodeId) {\n      await new Promise((resolve) => {\n        hooks2.callHookWith(async (callbacks) => {\n          await Promise.all(callbacks.map((cb) => cb(_payload, ctx)));\n          resolve();\n        }, \"getInspectorState\" /* GET_INSPECTOR_STATE */);\n      });\n    }\n    hooks2.callHookWith(async (callbacks) => {\n      await Promise.all(callbacks.map((cb) => cb({\n        inspectorId,\n        nodeId: _payload.nodeId,\n        state: _payload.state\n      })));\n    }, \"sendInspectorStateToClient\" /* SEND_INSPECTOR_STATE_TO_CLIENT */);\n  }, 120);\n  hooks2.hook(\"sendInspectorState\" /* SEND_INSPECTOR_STATE */, debounceSendInspectorState);\n  hooks2.hook(\"customInspectorSelectNode\" /* CUSTOM_INSPECTOR_SELECT_NODE */, ({ inspectorId, nodeId, plugin }) => {\n    const inspector = getInspector(inspectorId, plugin.descriptor.app);\n    if (!inspector)\n      return;\n    inspector.selectedNodeId = nodeId;\n  });\n  hooks2.hook(\"timelineLayerAdded\" /* TIMELINE_LAYER_ADDED */, ({ options, plugin }) => {\n    addTimelineLayer(options, plugin.descriptor);\n  });\n  hooks2.hook(\"timelineEventAdded\" /* TIMELINE_EVENT_ADDED */, ({ options, plugin }) => {\n    var _a25;\n    const internalLayerIds = [\"performance\", \"component-event\", \"keyboard\", \"mouse\"];\n    if (devtoolsState.highPerfModeEnabled || !((_a25 = devtoolsState.timelineLayersState) == null ? void 0 : _a25[plugin.descriptor.id]) && !internalLayerIds.includes(options.layerId))\n      return;\n    hooks2.callHookWith(async (callbacks) => {\n      await Promise.all(callbacks.map((cb) => cb(options)));\n    }, \"sendTimelineEventToClient\" /* SEND_TIMELINE_EVENT_TO_CLIENT */);\n  });\n  hooks2.hook(\"getComponentInstances\" /* GET_COMPONENT_INSTANCES */, async ({ app }) => {\n    const appRecord = app.__VUE_DEVTOOLS_NEXT_APP_RECORD__;\n    if (!appRecord)\n      return null;\n    const appId = appRecord.id.toString();\n    const instances = [...appRecord.instanceMap].filter(([key]) => key.split(\":\")[0] === appId).map(([, instance]) => instance);\n    return instances;\n  });\n  hooks2.hook(\"getComponentBounds\" /* GET_COMPONENT_BOUNDS */, async ({ instance }) => {\n    const bounds = getComponentBoundingRect(instance);\n    return bounds;\n  });\n  hooks2.hook(\"getComponentName\" /* GET_COMPONENT_NAME */, ({ instance }) => {\n    const name = getInstanceName(instance);\n    return name;\n  });\n  hooks2.hook(\"componentHighlight\" /* COMPONENT_HIGHLIGHT */, ({ uid }) => {\n    const instance = activeAppRecord.value.instanceMap.get(uid);\n    if (instance) {\n      highlight(instance);\n    }\n  });\n  hooks2.hook(\"componentUnhighlight\" /* COMPONENT_UNHIGHLIGHT */, () => {\n    unhighlight();\n  });\n  return hooks2;\n}\n\n// src/ctx/state.ts\nvar _a4, _b4;\n(_b4 = (_a4 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_APP_RECORDS__) != null ? _b4 : _a4.__VUE_DEVTOOLS_KIT_APP_RECORDS__ = [];\nvar _a5, _b5;\n(_b5 = (_a5 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__) != null ? _b5 : _a5.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__ = {};\nvar _a6, _b6;\n(_b6 = (_a6 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD_ID__) != null ? _b6 : _a6.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD_ID__ = \"\";\nvar _a7, _b7;\n(_b7 = (_a7 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_CUSTOM_TABS__) != null ? _b7 : _a7.__VUE_DEVTOOLS_KIT_CUSTOM_TABS__ = [];\nvar _a8, _b8;\n(_b8 = (_a8 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__) != null ? _b8 : _a8.__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__ = [];\nvar STATE_KEY = \"__VUE_DEVTOOLS_KIT_GLOBAL_STATE__\";\nfunction initStateFactory() {\n  return {\n    connected: false,\n    clientConnected: false,\n    vitePluginDetected: true,\n    appRecords: [],\n    activeAppRecordId: \"\",\n    tabs: [],\n    commands: [],\n    highPerfModeEnabled: true,\n    devtoolsClientDetected: {},\n    perfUniqueGroupId: 0,\n    timelineLayersState: getTimelineLayersStateFromStorage()\n  };\n}\nvar _a9, _b9;\n(_b9 = (_a9 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target)[STATE_KEY]) != null ? _b9 : _a9[STATE_KEY] = initStateFactory();\nvar callStateUpdatedHook = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)((state) => {\n  devtoolsContext.hooks.callHook(\"devtoolsStateUpdated\" /* DEVTOOLS_STATE_UPDATED */, { state });\n});\nvar callConnectedUpdatedHook = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)((state, oldState) => {\n  devtoolsContext.hooks.callHook(\"devtoolsConnectedUpdated\" /* DEVTOOLS_CONNECTED_UPDATED */, { state, oldState });\n});\nvar devtoolsAppRecords = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__, {\n  get(_target, prop, receiver) {\n    if (prop === \"value\")\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__;\n    return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__[prop];\n  }\n});\nvar addDevToolsAppRecord = (app) => {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__ = [\n    ..._vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__,\n    app\n  ];\n};\nvar removeDevToolsAppRecord = (app) => {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_APP_RECORDS__ = devtoolsAppRecords.value.filter((record) => record.app !== app);\n};\nvar activeAppRecord = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__, {\n  get(_target, prop, receiver) {\n    if (prop === \"value\")\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__;\n    else if (prop === \"id\")\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD_ID__;\n    return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__[prop];\n  }\n});\nfunction updateAllStates() {\n  callStateUpdatedHook({\n    ..._vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY],\n    appRecords: devtoolsAppRecords.value,\n    activeAppRecordId: activeAppRecord.id,\n    tabs: _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_TABS__,\n    commands: _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__\n  });\n}\nfunction setActiveAppRecord(app) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD__ = app;\n  updateAllStates();\n}\nfunction setActiveAppRecordId(id) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_ACTIVE_APP_RECORD_ID__ = id;\n  updateAllStates();\n}\nvar devtoolsState = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY], {\n  get(target22, property) {\n    if (property === \"appRecords\") {\n      return devtoolsAppRecords;\n    } else if (property === \"activeAppRecordId\") {\n      return activeAppRecord.id;\n    } else if (property === \"tabs\") {\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_TABS__;\n    } else if (property === \"commands\") {\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__;\n    }\n    return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY][property];\n  },\n  deleteProperty(target22, property) {\n    delete target22[property];\n    return true;\n  },\n  set(target22, property, value) {\n    const oldState = { ..._vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY] };\n    target22[property] = value;\n    _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY][property] = value;\n    return true;\n  }\n});\nfunction resetDevToolsState() {\n  Object.assign(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY], initStateFactory());\n}\nfunction updateDevToolsState(state) {\n  const oldState = {\n    ..._vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY],\n    appRecords: devtoolsAppRecords.value,\n    activeAppRecordId: activeAppRecord.id\n  };\n  if (oldState.connected !== state.connected && state.connected || oldState.clientConnected !== state.clientConnected && state.clientConnected) {\n    callConnectedUpdatedHook(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY], oldState);\n  }\n  Object.assign(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[STATE_KEY], state);\n  updateAllStates();\n}\nfunction onDevToolsConnected(fn) {\n  return new Promise((resolve) => {\n    if (devtoolsState.connected) {\n      fn();\n      resolve();\n    }\n    devtoolsContext.hooks.hook(\"devtoolsConnectedUpdated\" /* DEVTOOLS_CONNECTED_UPDATED */, ({ state }) => {\n      if (state.connected) {\n        fn();\n        resolve();\n      }\n    });\n  });\n}\nvar resolveIcon = (icon) => {\n  if (!icon)\n    return;\n  if (icon.startsWith(\"baseline-\")) {\n    return `custom-ic-${icon}`;\n  }\n  if (icon.startsWith(\"i-\") || (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isUrlString)(icon))\n    return icon;\n  return `custom-ic-baseline-${icon}`;\n};\nfunction addCustomTab(tab) {\n  const tabs = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_TABS__;\n  if (tabs.some((t) => t.name === tab.name))\n    return;\n  tabs.push({\n    ...tab,\n    icon: resolveIcon(tab.icon)\n  });\n  updateAllStates();\n}\nfunction addCustomCommand(action) {\n  const commands = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__;\n  if (commands.some((t) => t.id === action.id))\n    return;\n  commands.push({\n    ...action,\n    icon: resolveIcon(action.icon),\n    children: action.children ? action.children.map((child) => ({\n      ...child,\n      icon: resolveIcon(child.icon)\n    })) : void 0\n  });\n  updateAllStates();\n}\nfunction removeCustomCommand(actionId) {\n  const commands = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CUSTOM_COMMANDS__;\n  const index = commands.findIndex((t) => t.id === actionId);\n  if (index === -1)\n    return;\n  commands.splice(index, 1);\n  updateAllStates();\n}\nfunction toggleClientConnected(state) {\n  updateDevToolsState({ clientConnected: state });\n}\n\n// src/core/open-in-editor/index.ts\nfunction setOpenInEditorBaseUrl(url) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_OPEN_IN_EDITOR_BASE_URL__ = url;\n}\nfunction openInEditor(options = {}) {\n  var _a25, _b25, _c;\n  const { file, host, baseUrl = window.location.origin, line = 0, column = 0 } = options;\n  if (file) {\n    if (host === \"chrome-extension\") {\n      const fileName = file.replace(/\\\\/g, \"\\\\\\\\\");\n      const _baseUrl = (_b25 = (_a25 = window.VUE_DEVTOOLS_CONFIG) == null ? void 0 : _a25.openInEditorHost) != null ? _b25 : \"/\";\n      fetch(`${_baseUrl}__open-in-editor?file=${encodeURI(file)}`).then((response) => {\n        if (!response.ok) {\n          const msg = `Opening component ${fileName} failed`;\n          console.log(`%c${msg}`, \"color:red\");\n        }\n      });\n    } else if (devtoolsState.vitePluginDetected) {\n      const _baseUrl = (_c = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_OPEN_IN_EDITOR_BASE_URL__) != null ? _c : baseUrl;\n      _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_INSPECTOR__.openInEditor(_baseUrl, file, line, column);\n    }\n  }\n}\n\n// src/core/plugin/index.ts\ninit_esm_shims();\n\n\n// src/api/index.ts\ninit_esm_shims();\n\n// src/api/v6/index.ts\ninit_esm_shims();\n\n// src/core/plugin/plugin-settings.ts\ninit_esm_shims();\n\n// src/ctx/plugin.ts\ninit_esm_shims();\n\nvar _a10, _b10;\n(_b10 = (_a10 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_PLUGIN_BUFFER__) != null ? _b10 : _a10.__VUE_DEVTOOLS_KIT_PLUGIN_BUFFER__ = [];\nvar devtoolsPluginBuffer = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_PLUGIN_BUFFER__, {\n  get(target22, prop, receiver) {\n    return Reflect.get(target22, prop, receiver);\n  }\n});\nfunction addDevToolsPluginToBuffer(pluginDescriptor, setupFn) {\n  devtoolsPluginBuffer.push([pluginDescriptor, setupFn]);\n}\n\n// src/core/plugin/plugin-settings.ts\nfunction _getSettings(settings) {\n  const _settings = {};\n  Object.keys(settings).forEach((key) => {\n    _settings[key] = settings[key].defaultValue;\n  });\n  return _settings;\n}\nfunction getPluginLocalKey(pluginId) {\n  return `__VUE_DEVTOOLS_NEXT_PLUGIN_SETTINGS__${pluginId}__`;\n}\nfunction getPluginSettingsOptions(pluginId) {\n  var _a25, _b25, _c;\n  const item = (_b25 = (_a25 = devtoolsPluginBuffer.find((item2) => {\n    var _a26;\n    return item2[0].id === pluginId && !!((_a26 = item2[0]) == null ? void 0 : _a26.settings);\n  })) == null ? void 0 : _a25[0]) != null ? _b25 : null;\n  return (_c = item == null ? void 0 : item.settings) != null ? _c : null;\n}\nfunction getPluginSettings(pluginId, fallbackValue) {\n  var _a25, _b25, _c;\n  const localKey = getPluginLocalKey(pluginId);\n  if (localKey) {\n    const localSettings = localStorage.getItem(localKey);\n    if (localSettings) {\n      return JSON.parse(localSettings);\n    }\n  }\n  if (pluginId) {\n    const item = (_b25 = (_a25 = devtoolsPluginBuffer.find((item2) => item2[0].id === pluginId)) == null ? void 0 : _a25[0]) != null ? _b25 : null;\n    return _getSettings((_c = item == null ? void 0 : item.settings) != null ? _c : {});\n  }\n  return _getSettings(fallbackValue);\n}\nfunction initPluginSettings(pluginId, settings) {\n  const localKey = getPluginLocalKey(pluginId);\n  const localSettings = localStorage.getItem(localKey);\n  if (!localSettings) {\n    localStorage.setItem(localKey, JSON.stringify(_getSettings(settings)));\n  }\n}\nfunction setPluginSettings(pluginId, key, value) {\n  const localKey = getPluginLocalKey(pluginId);\n  const localSettings = localStorage.getItem(localKey);\n  const parsedLocalSettings = JSON.parse(localSettings || \"{}\");\n  const updated = {\n    ...parsedLocalSettings,\n    [key]: value\n  };\n  localStorage.setItem(localKey, JSON.stringify(updated));\n  devtoolsContext.hooks.callHookWith((callbacks) => {\n    callbacks.forEach((cb) => cb({\n      pluginId,\n      key,\n      oldValue: parsedLocalSettings[key],\n      newValue: value,\n      settings: updated\n    }));\n  }, \"setPluginSettings\" /* SET_PLUGIN_SETTINGS */);\n}\n\n// src/hook/index.ts\ninit_esm_shims();\n\n\n\n// src/types/index.ts\ninit_esm_shims();\n\n// src/types/app.ts\ninit_esm_shims();\n\n// src/types/command.ts\ninit_esm_shims();\n\n// src/types/component.ts\ninit_esm_shims();\n\n// src/types/hook.ts\ninit_esm_shims();\n\n// src/types/inspector.ts\ninit_esm_shims();\n\n// src/types/plugin.ts\ninit_esm_shims();\n\n// src/types/router.ts\ninit_esm_shims();\n\n// src/types/tab.ts\ninit_esm_shims();\n\n// src/types/timeline.ts\ninit_esm_shims();\n\n// src/hook/index.ts\nvar _a11, _b11;\nvar devtoolsHooks = (_b11 = (_a11 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_HOOK) != null ? _b11 : _a11.__VUE_DEVTOOLS_HOOK = (0,hookable__WEBPACK_IMPORTED_MODULE_1__.createHooks)();\nvar on = {\n  vueAppInit(fn) {\n    devtoolsHooks.hook(\"app:init\" /* APP_INIT */, fn);\n  },\n  vueAppUnmount(fn) {\n    devtoolsHooks.hook(\"app:unmount\" /* APP_UNMOUNT */, fn);\n  },\n  vueAppConnected(fn) {\n    devtoolsHooks.hook(\"app:connected\" /* APP_CONNECTED */, fn);\n  },\n  componentAdded(fn) {\n    return devtoolsHooks.hook(\"component:added\" /* COMPONENT_ADDED */, fn);\n  },\n  componentEmit(fn) {\n    return devtoolsHooks.hook(\"component:emit\" /* COMPONENT_EMIT */, fn);\n  },\n  componentUpdated(fn) {\n    return devtoolsHooks.hook(\"component:updated\" /* COMPONENT_UPDATED */, fn);\n  },\n  componentRemoved(fn) {\n    return devtoolsHooks.hook(\"component:removed\" /* COMPONENT_REMOVED */, fn);\n  },\n  setupDevtoolsPlugin(fn) {\n    devtoolsHooks.hook(\"devtools-plugin:setup\" /* SETUP_DEVTOOLS_PLUGIN */, fn);\n  },\n  perfStart(fn) {\n    return devtoolsHooks.hook(\"perf:start\" /* PERFORMANCE_START */, fn);\n  },\n  perfEnd(fn) {\n    return devtoolsHooks.hook(\"perf:end\" /* PERFORMANCE_END */, fn);\n  }\n};\nfunction createDevToolsHook() {\n  return {\n    id: \"vue-devtools-next\",\n    devtoolsVersion: \"7.0\",\n    enabled: false,\n    appRecords: [],\n    apps: [],\n    events: /* @__PURE__ */ new Map(),\n    on(event, fn) {\n      var _a25;\n      if (!this.events.has(event))\n        this.events.set(event, []);\n      (_a25 = this.events.get(event)) == null ? void 0 : _a25.push(fn);\n      return () => this.off(event, fn);\n    },\n    once(event, fn) {\n      const onceFn = (...args) => {\n        this.off(event, onceFn);\n        fn(...args);\n      };\n      this.on(event, onceFn);\n      return [event, onceFn];\n    },\n    off(event, fn) {\n      if (this.events.has(event)) {\n        const eventCallbacks = this.events.get(event);\n        const index = eventCallbacks.indexOf(fn);\n        if (index !== -1)\n          eventCallbacks.splice(index, 1);\n      }\n    },\n    emit(event, ...payload) {\n      if (this.events.has(event))\n        this.events.get(event).forEach((fn) => fn(...payload));\n    }\n  };\n}\nfunction subscribeDevToolsHook(hook2) {\n  hook2.on(\"app:init\" /* APP_INIT */, (app, version, types) => {\n    var _a25, _b25, _c;\n    if ((_c = (_b25 = (_a25 = app == null ? void 0 : app._instance) == null ? void 0 : _a25.type) == null ? void 0 : _b25.devtools) == null ? void 0 : _c.hide)\n      return;\n    devtoolsHooks.callHook(\"app:init\" /* APP_INIT */, app, version, types);\n  });\n  hook2.on(\"app:unmount\" /* APP_UNMOUNT */, (app) => {\n    devtoolsHooks.callHook(\"app:unmount\" /* APP_UNMOUNT */, app);\n  });\n  hook2.on(\"component:added\" /* COMPONENT_ADDED */, async (app, uid, parentUid, component) => {\n    var _a25, _b25, _c;\n    if (((_c = (_b25 = (_a25 = app == null ? void 0 : app._instance) == null ? void 0 : _a25.type) == null ? void 0 : _b25.devtools) == null ? void 0 : _c.hide) || devtoolsState.highPerfModeEnabled)\n      return;\n    if (!app || typeof uid !== \"number\" && !uid || !component)\n      return;\n    devtoolsHooks.callHook(\"component:added\" /* COMPONENT_ADDED */, app, uid, parentUid, component);\n  });\n  hook2.on(\"component:updated\" /* COMPONENT_UPDATED */, (app, uid, parentUid, component) => {\n    if (!app || typeof uid !== \"number\" && !uid || !component || devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsHooks.callHook(\"component:updated\" /* COMPONENT_UPDATED */, app, uid, parentUid, component);\n  });\n  hook2.on(\"component:removed\" /* COMPONENT_REMOVED */, async (app, uid, parentUid, component) => {\n    if (!app || typeof uid !== \"number\" && !uid || !component || devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsHooks.callHook(\"component:removed\" /* COMPONENT_REMOVED */, app, uid, parentUid, component);\n  });\n  hook2.on(\"component:emit\" /* COMPONENT_EMIT */, async (app, instance, event, params) => {\n    if (!app || !instance || devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsHooks.callHook(\"component:emit\" /* COMPONENT_EMIT */, app, instance, event, params);\n  });\n  hook2.on(\"perf:start\" /* PERFORMANCE_START */, (app, uid, vm, type, time) => {\n    if (!app || devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsHooks.callHook(\"perf:start\" /* PERFORMANCE_START */, app, uid, vm, type, time);\n  });\n  hook2.on(\"perf:end\" /* PERFORMANCE_END */, (app, uid, vm, type, time) => {\n    if (!app || devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsHooks.callHook(\"perf:end\" /* PERFORMANCE_END */, app, uid, vm, type, time);\n  });\n  hook2.on(\"devtools-plugin:setup\" /* SETUP_DEVTOOLS_PLUGIN */, (pluginDescriptor, setupFn, options) => {\n    if ((options == null ? void 0 : options.target) === \"legacy\")\n      return;\n    devtoolsHooks.callHook(\"devtools-plugin:setup\" /* SETUP_DEVTOOLS_PLUGIN */, pluginDescriptor, setupFn);\n  });\n}\nvar hook = {\n  on,\n  setupDevToolsPlugin(pluginDescriptor, setupFn) {\n    return devtoolsHooks.callHook(\"devtools-plugin:setup\" /* SETUP_DEVTOOLS_PLUGIN */, pluginDescriptor, setupFn);\n  }\n};\n\n// src/api/v6/index.ts\nvar DevToolsV6PluginAPI = class {\n  constructor({ plugin, ctx }) {\n    this.hooks = ctx.hooks;\n    this.plugin = plugin;\n  }\n  get on() {\n    return {\n      // component inspector\n      visitComponentTree: (handler) => {\n        this.hooks.hook(\"visitComponentTree\" /* VISIT_COMPONENT_TREE */, handler);\n      },\n      inspectComponent: (handler) => {\n        this.hooks.hook(\"inspectComponent\" /* INSPECT_COMPONENT */, handler);\n      },\n      editComponentState: (handler) => {\n        this.hooks.hook(\"editComponentState\" /* EDIT_COMPONENT_STATE */, handler);\n      },\n      // custom inspector\n      getInspectorTree: (handler) => {\n        this.hooks.hook(\"getInspectorTree\" /* GET_INSPECTOR_TREE */, handler);\n      },\n      getInspectorState: (handler) => {\n        this.hooks.hook(\"getInspectorState\" /* GET_INSPECTOR_STATE */, handler);\n      },\n      editInspectorState: (handler) => {\n        this.hooks.hook(\"editInspectorState\" /* EDIT_INSPECTOR_STATE */, handler);\n      },\n      // timeline\n      inspectTimelineEvent: (handler) => {\n        this.hooks.hook(\"inspectTimelineEvent\" /* INSPECT_TIMELINE_EVENT */, handler);\n      },\n      timelineCleared: (handler) => {\n        this.hooks.hook(\"timelineCleared\" /* TIMELINE_CLEARED */, handler);\n      },\n      // settings\n      setPluginSettings: (handler) => {\n        this.hooks.hook(\"setPluginSettings\" /* SET_PLUGIN_SETTINGS */, handler);\n      }\n    };\n  }\n  // component inspector\n  notifyComponentUpdate(instance) {\n    var _a25;\n    if (devtoolsState.highPerfModeEnabled) {\n      return;\n    }\n    const inspector = getActiveInspectors().find((i) => i.packageName === this.plugin.descriptor.packageName);\n    if (inspector == null ? void 0 : inspector.id) {\n      if (instance) {\n        const args = [\n          instance.appContext.app,\n          instance.uid,\n          (_a25 = instance.parent) == null ? void 0 : _a25.uid,\n          instance\n        ];\n        devtoolsHooks.callHook(\"component:updated\" /* COMPONENT_UPDATED */, ...args);\n      } else {\n        devtoolsHooks.callHook(\"component:updated\" /* COMPONENT_UPDATED */);\n      }\n      this.hooks.callHook(\"sendInspectorState\" /* SEND_INSPECTOR_STATE */, { inspectorId: inspector.id, plugin: this.plugin });\n    }\n  }\n  // custom inspector\n  addInspector(options) {\n    this.hooks.callHook(\"addInspector\" /* ADD_INSPECTOR */, { inspector: options, plugin: this.plugin });\n    if (this.plugin.descriptor.settings) {\n      initPluginSettings(options.id, this.plugin.descriptor.settings);\n    }\n  }\n  sendInspectorTree(inspectorId) {\n    if (devtoolsState.highPerfModeEnabled) {\n      return;\n    }\n    this.hooks.callHook(\"sendInspectorTree\" /* SEND_INSPECTOR_TREE */, { inspectorId, plugin: this.plugin });\n  }\n  sendInspectorState(inspectorId) {\n    if (devtoolsState.highPerfModeEnabled) {\n      return;\n    }\n    this.hooks.callHook(\"sendInspectorState\" /* SEND_INSPECTOR_STATE */, { inspectorId, plugin: this.plugin });\n  }\n  selectInspectorNode(inspectorId, nodeId) {\n    this.hooks.callHook(\"customInspectorSelectNode\" /* CUSTOM_INSPECTOR_SELECT_NODE */, { inspectorId, nodeId, plugin: this.plugin });\n  }\n  visitComponentTree(payload) {\n    return this.hooks.callHook(\"visitComponentTree\" /* VISIT_COMPONENT_TREE */, payload);\n  }\n  // timeline\n  now() {\n    if (devtoolsState.highPerfModeEnabled) {\n      return 0;\n    }\n    return Date.now();\n  }\n  addTimelineLayer(options) {\n    this.hooks.callHook(\"timelineLayerAdded\" /* TIMELINE_LAYER_ADDED */, { options, plugin: this.plugin });\n  }\n  addTimelineEvent(options) {\n    if (devtoolsState.highPerfModeEnabled) {\n      return;\n    }\n    this.hooks.callHook(\"timelineEventAdded\" /* TIMELINE_EVENT_ADDED */, { options, plugin: this.plugin });\n  }\n  // settings\n  getSettings(pluginId) {\n    return getPluginSettings(pluginId != null ? pluginId : this.plugin.descriptor.id, this.plugin.descriptor.settings);\n  }\n  // utilities\n  getComponentInstances(app) {\n    return this.hooks.callHook(\"getComponentInstances\" /* GET_COMPONENT_INSTANCES */, { app });\n  }\n  getComponentBounds(instance) {\n    return this.hooks.callHook(\"getComponentBounds\" /* GET_COMPONENT_BOUNDS */, { instance });\n  }\n  getComponentName(instance) {\n    return this.hooks.callHook(\"getComponentName\" /* GET_COMPONENT_NAME */, { instance });\n  }\n  highlightElement(instance) {\n    const uid = instance.__VUE_DEVTOOLS_NEXT_UID__;\n    return this.hooks.callHook(\"componentHighlight\" /* COMPONENT_HIGHLIGHT */, { uid });\n  }\n  unhighlightElement() {\n    return this.hooks.callHook(\"componentUnhighlight\" /* COMPONENT_UNHIGHLIGHT */);\n  }\n};\n\n// src/api/index.ts\nvar DevToolsPluginAPI = DevToolsV6PluginAPI;\n\n// src/core/plugin/components.ts\ninit_esm_shims();\n\n\n// src/core/component/state/index.ts\ninit_esm_shims();\n\n// src/core/component/state/process.ts\ninit_esm_shims();\n\n\n// src/core/component/state/constants.ts\ninit_esm_shims();\nvar vueBuiltins = /* @__PURE__ */ new Set([\n  \"nextTick\",\n  \"defineComponent\",\n  \"defineAsyncComponent\",\n  \"defineCustomElement\",\n  \"ref\",\n  \"computed\",\n  \"reactive\",\n  \"readonly\",\n  \"watchEffect\",\n  \"watchPostEffect\",\n  \"watchSyncEffect\",\n  \"watch\",\n  \"isRef\",\n  \"unref\",\n  \"toRef\",\n  \"toRefs\",\n  \"isProxy\",\n  \"isReactive\",\n  \"isReadonly\",\n  \"shallowRef\",\n  \"triggerRef\",\n  \"customRef\",\n  \"shallowReactive\",\n  \"shallowReadonly\",\n  \"toRaw\",\n  \"markRaw\",\n  \"effectScope\",\n  \"getCurrentScope\",\n  \"onScopeDispose\",\n  \"onMounted\",\n  \"onUpdated\",\n  \"onUnmounted\",\n  \"onBeforeMount\",\n  \"onBeforeUpdate\",\n  \"onBeforeUnmount\",\n  \"onErrorCaptured\",\n  \"onRenderTracked\",\n  \"onRenderTriggered\",\n  \"onActivated\",\n  \"onDeactivated\",\n  \"onServerPrefetch\",\n  \"provide\",\n  \"inject\",\n  \"h\",\n  \"mergeProps\",\n  \"cloneVNode\",\n  \"isVNode\",\n  \"resolveComponent\",\n  \"resolveDirective\",\n  \"withDirectives\",\n  \"withModifiers\"\n]);\nvar symbolRE = /^\\[native Symbol Symbol\\((.*)\\)\\]$/;\nvar rawTypeRE = /^\\[object (\\w+)\\]$/;\nvar specialTypeRE = /^\\[native (\\w+) (.*?)(<>(([\\s\\S])*))?\\]$/;\nvar fnTypeRE = /^(?:function|class) (\\w+)/;\nvar MAX_STRING_SIZE = 1e4;\nvar MAX_ARRAY_SIZE = 5e3;\nvar UNDEFINED = \"__vue_devtool_undefined__\";\nvar INFINITY = \"__vue_devtool_infinity__\";\nvar NEGATIVE_INFINITY = \"__vue_devtool_negative_infinity__\";\nvar NAN = \"__vue_devtool_nan__\";\nvar ESC = {\n  \"<\": \"&lt;\",\n  \">\": \"&gt;\",\n  '\"': \"&quot;\",\n  \"&\": \"&amp;\"\n};\n\n// src/core/component/state/util.ts\ninit_esm_shims();\n\n// src/core/component/state/is.ts\ninit_esm_shims();\nfunction isVueInstance(value) {\n  if (!ensurePropertyExists(value, \"_\")) {\n    return false;\n  }\n  if (!isPlainObject(value._)) {\n    return false;\n  }\n  return Object.keys(value._).includes(\"vnode\");\n}\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Object]\";\n}\nfunction isPrimitive(data) {\n  if (data == null)\n    return true;\n  const type = typeof data;\n  return type === \"string\" || type === \"number\" || type === \"boolean\";\n}\nfunction isRef2(raw) {\n  return !!raw.__v_isRef;\n}\nfunction isComputed(raw) {\n  return isRef2(raw) && !!raw.effect;\n}\nfunction isReactive2(raw) {\n  return !!raw.__v_isReactive;\n}\nfunction isReadOnly(raw) {\n  return !!raw.__v_isReadonly;\n}\n\n// src/core/component/state/util.ts\nvar tokenMap = {\n  [UNDEFINED]: \"undefined\",\n  [NAN]: \"NaN\",\n  [INFINITY]: \"Infinity\",\n  [NEGATIVE_INFINITY]: \"-Infinity\"\n};\nvar reversedTokenMap = Object.entries(tokenMap).reduce((acc, [key, value]) => {\n  acc[value] = key;\n  return acc;\n}, {});\nfunction internalStateTokenToString(value) {\n  if (value === null)\n    return \"null\";\n  return typeof value === \"string\" && tokenMap[value] || false;\n}\nfunction replaceTokenToString(value) {\n  const replaceRegex = new RegExp(`\"(${Object.keys(tokenMap).join(\"|\")})\"`, \"g\");\n  return value.replace(replaceRegex, (_, g1) => tokenMap[g1]);\n}\nfunction replaceStringToToken(value) {\n  const literalValue = reversedTokenMap[value.trim()];\n  if (literalValue)\n    return `\"${literalValue}\"`;\n  const replaceRegex = new RegExp(`:\\\\s*(${Object.keys(reversedTokenMap).join(\"|\")})`, \"g\");\n  return value.replace(replaceRegex, (_, g1) => `:\"${reversedTokenMap[g1]}\"`);\n}\nfunction getPropType(type) {\n  if (Array.isArray(type))\n    return type.map((t) => getPropType(t)).join(\" or \");\n  if (type == null)\n    return \"null\";\n  const match = type.toString().match(fnTypeRE);\n  return typeof type === \"function\" ? match && match[1] || \"any\" : \"any\";\n}\nfunction sanitize(data) {\n  if (!isPrimitive(data) && !Array.isArray(data) && !isPlainObject(data)) {\n    return Object.prototype.toString.call(data);\n  } else {\n    return data;\n  }\n}\nfunction getSetupStateType(raw) {\n  try {\n    return {\n      ref: isRef2(raw),\n      computed: isComputed(raw),\n      reactive: isReactive2(raw),\n      readonly: isReadOnly(raw)\n    };\n  } catch (e) {\n    return {\n      ref: false,\n      computed: false,\n      reactive: false,\n      readonly: false\n    };\n  }\n}\nfunction toRaw2(value) {\n  if (value == null ? void 0 : value.__v_raw)\n    return value.__v_raw;\n  return value;\n}\nfunction escape(s) {\n  return s.replace(/[<>\"&]/g, (s2) => {\n    return ESC[s2] || s2;\n  });\n}\n\n// src/core/component/state/process.ts\nfunction mergeOptions(to, from, instance) {\n  if (typeof from === \"function\")\n    from = from.options;\n  if (!from)\n    return to;\n  const { mixins, extends: extendsOptions } = from;\n  extendsOptions && mergeOptions(to, extendsOptions, instance);\n  mixins && mixins.forEach(\n    (m) => mergeOptions(to, m, instance)\n  );\n  for (const key of [\"computed\", \"inject\"]) {\n    if (Object.prototype.hasOwnProperty.call(from, key)) {\n      if (!to[key])\n        to[key] = from[key];\n      else\n        Object.assign(to[key], from[key]);\n    }\n  }\n  return to;\n}\nfunction resolveMergedOptions(instance) {\n  const raw = instance == null ? void 0 : instance.type;\n  if (!raw)\n    return {};\n  const { mixins, extends: extendsOptions } = raw;\n  const globalMixins = instance.appContext.mixins;\n  if (!globalMixins.length && !mixins && !extendsOptions)\n    return raw;\n  const options = {};\n  globalMixins.forEach((m) => mergeOptions(options, m, instance));\n  mergeOptions(options, raw, instance);\n  return options;\n}\nfunction processProps(instance) {\n  var _a25;\n  const props = [];\n  const propDefinitions = (_a25 = instance == null ? void 0 : instance.type) == null ? void 0 : _a25.props;\n  for (const key in instance == null ? void 0 : instance.props) {\n    const propDefinition = propDefinitions ? propDefinitions[key] : null;\n    const camelizeKey = (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.camelize)(key);\n    props.push({\n      type: \"props\",\n      key: camelizeKey,\n      value: returnError(() => instance.props[key]),\n      editable: true,\n      meta: propDefinition ? {\n        type: propDefinition.type ? getPropType(propDefinition.type) : \"any\",\n        required: !!propDefinition.required,\n        ...propDefinition.default ? {\n          default: propDefinition.default.toString()\n        } : {}\n      } : { type: \"invalid\" }\n    });\n  }\n  return props;\n}\nfunction processState(instance) {\n  const type = instance.type;\n  const props = type == null ? void 0 : type.props;\n  const getters = type.vuex && type.vuex.getters;\n  const computedDefs = type.computed;\n  const data = {\n    ...instance.data,\n    ...instance.renderContext\n  };\n  return Object.keys(data).filter((key) => !(props && key in props) && !(getters && key in getters) && !(computedDefs && key in computedDefs)).map((key) => ({\n    key,\n    type: \"data\",\n    value: returnError(() => data[key]),\n    editable: true\n  }));\n}\nfunction getStateTypeAndName(info) {\n  const stateType = info.computed ? \"computed\" : info.ref ? \"ref\" : info.reactive ? \"reactive\" : null;\n  const stateTypeName = stateType ? `${stateType.charAt(0).toUpperCase()}${stateType.slice(1)}` : null;\n  return {\n    stateType,\n    stateTypeName\n  };\n}\nfunction processSetupState(instance) {\n  const raw = instance.devtoolsRawSetupState || {};\n  return Object.keys(instance.setupState).filter((key) => !vueBuiltins.has(key) && key.split(/(?=[A-Z])/)[0] !== \"use\").map((key) => {\n    var _a25, _b25, _c, _d;\n    const value = returnError(() => toRaw2(instance.setupState[key]));\n    const accessError = value instanceof Error;\n    const rawData = raw[key];\n    let result;\n    let isOtherType = accessError || typeof value === \"function\" || ensurePropertyExists(value, \"render\") && typeof value.render === \"function\" || ensurePropertyExists(value, \"__asyncLoader\") && typeof value.__asyncLoader === \"function\" || typeof value === \"object\" && value && (\"setup\" in value || \"props\" in value) || /^v[A-Z]/.test(key);\n    if (rawData && !accessError) {\n      const info = getSetupStateType(rawData);\n      const { stateType, stateTypeName } = getStateTypeAndName(info);\n      const isState = info.ref || info.computed || info.reactive;\n      const raw2 = ensurePropertyExists(rawData, \"effect\") ? ((_b25 = (_a25 = rawData.effect) == null ? void 0 : _a25.raw) == null ? void 0 : _b25.toString()) || ((_d = (_c = rawData.effect) == null ? void 0 : _c.fn) == null ? void 0 : _d.toString()) : null;\n      if (stateType)\n        isOtherType = false;\n      result = {\n        ...stateType ? { stateType, stateTypeName } : {},\n        ...raw2 ? { raw: raw2 } : {},\n        editable: isState && !info.readonly\n      };\n    }\n    const type = isOtherType ? \"setup (other)\" : \"setup\";\n    return {\n      key,\n      value,\n      type,\n      // @ts-expect-error ignore\n      ...result\n    };\n  });\n}\nfunction processComputed(instance, mergedType) {\n  const type = mergedType;\n  const computed = [];\n  const defs = type.computed || {};\n  for (const key in defs) {\n    const def = defs[key];\n    const type2 = typeof def === \"function\" && def.vuex ? \"vuex bindings\" : \"computed\";\n    computed.push({\n      type: type2,\n      key,\n      value: returnError(() => {\n        var _a25;\n        return (_a25 = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a25[key];\n      }),\n      editable: typeof def.set === \"function\"\n    });\n  }\n  return computed;\n}\nfunction processAttrs(instance) {\n  return Object.keys(instance.attrs).map((key) => ({\n    type: \"attrs\",\n    key,\n    value: returnError(() => instance.attrs[key])\n  }));\n}\nfunction processProvide(instance) {\n  return Reflect.ownKeys(instance.provides).map((key) => ({\n    type: \"provided\",\n    key: key.toString(),\n    value: returnError(() => instance.provides[key])\n  }));\n}\nfunction processInject(instance, mergedType) {\n  if (!(mergedType == null ? void 0 : mergedType.inject))\n    return [];\n  let keys = [];\n  let defaultValue;\n  if (Array.isArray(mergedType.inject)) {\n    keys = mergedType.inject.map((key) => ({\n      key,\n      originalKey: key\n    }));\n  } else {\n    keys = Reflect.ownKeys(mergedType.inject).map((key) => {\n      const value = mergedType.inject[key];\n      let originalKey;\n      if (typeof value === \"string\" || typeof value === \"symbol\") {\n        originalKey = value;\n      } else {\n        originalKey = value.from;\n        defaultValue = value.default;\n      }\n      return {\n        key,\n        originalKey\n      };\n    });\n  }\n  return keys.map(({ key, originalKey }) => ({\n    type: \"injected\",\n    key: originalKey && key !== originalKey ? `${originalKey.toString()} \\u279E ${key.toString()}` : key.toString(),\n    // eslint-disable-next-line no-prototype-builtins\n    value: returnError(() => instance.ctx.hasOwnProperty(key) ? instance.ctx[key] : instance.provides.hasOwnProperty(originalKey) ? instance.provides[originalKey] : defaultValue)\n  }));\n}\nfunction processRefs(instance) {\n  return Object.keys(instance.refs).map((key) => ({\n    type: \"template refs\",\n    key,\n    value: returnError(() => instance.refs[key])\n  }));\n}\nfunction processEventListeners(instance) {\n  var _a25, _b25;\n  const emitsDefinition = instance.type.emits;\n  const declaredEmits = Array.isArray(emitsDefinition) ? emitsDefinition : Object.keys(emitsDefinition != null ? emitsDefinition : {});\n  const keys = Object.keys((_b25 = (_a25 = instance == null ? void 0 : instance.vnode) == null ? void 0 : _a25.props) != null ? _b25 : {});\n  const result = [];\n  for (const key of keys) {\n    const [prefix, ...eventNameParts] = key.split(/(?=[A-Z])/);\n    if (prefix === \"on\") {\n      const eventName = eventNameParts.join(\"-\").toLowerCase();\n      const isDeclared = declaredEmits.includes(eventName);\n      result.push({\n        type: \"event listeners\",\n        key: eventName,\n        value: {\n          _custom: {\n            displayText: isDeclared ? \"\\u2705 Declared\" : \"\\u26A0\\uFE0F Not declared\",\n            key: isDeclared ? \"\\u2705 Declared\" : \"\\u26A0\\uFE0F Not declared\",\n            value: isDeclared ? \"\\u2705 Declared\" : \"\\u26A0\\uFE0F Not declared\",\n            tooltipText: !isDeclared ? `The event <code>${eventName}</code> is not declared in the <code>emits</code> option. It will leak into the component's attributes (<code>$attrs</code>).` : null\n          }\n        }\n      });\n    }\n  }\n  return result;\n}\nfunction processInstanceState(instance) {\n  const mergedType = resolveMergedOptions(instance);\n  return processProps(instance).concat(\n    processState(instance),\n    processSetupState(instance),\n    processComputed(instance, mergedType),\n    processAttrs(instance),\n    processProvide(instance),\n    processInject(instance, mergedType),\n    processRefs(instance),\n    processEventListeners(instance)\n  );\n}\n\n// src/core/component/state/index.ts\nfunction getInstanceState(params) {\n  var _a25;\n  const instance = getComponentInstance(activeAppRecord.value, params.instanceId);\n  const id = getUniqueComponentId(instance);\n  const name = getInstanceName(instance);\n  const file = (_a25 = instance == null ? void 0 : instance.type) == null ? void 0 : _a25.__file;\n  const state = processInstanceState(instance);\n  return {\n    id,\n    name,\n    file,\n    state,\n    instance\n  };\n}\n\n// src/core/component/tree/walker.ts\ninit_esm_shims();\n\n// src/core/component/tree/filter.ts\ninit_esm_shims();\n\nvar ComponentFilter = class {\n  constructor(filter) {\n    this.filter = filter || \"\";\n  }\n  /**\n   * Check if an instance is qualified.\n   *\n   * @param {Vue|Vnode} instance\n   * @return {boolean}\n   */\n  isQualified(instance) {\n    const name = getInstanceName(instance);\n    return (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.classify)(name).toLowerCase().includes(this.filter) || (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.kebabize)(name).toLowerCase().includes(this.filter);\n  }\n};\nfunction createComponentFilter(filterText) {\n  return new ComponentFilter(filterText);\n}\n\n// src/core/component/tree/walker.ts\nvar ComponentWalker = class {\n  constructor(options) {\n    // Dedupe instances (Some instances may be both on a component and on a child abstract/functional component)\n    this.captureIds = /* @__PURE__ */ new Map();\n    const { filterText = \"\", maxDepth, recursively, api } = options;\n    this.componentFilter = createComponentFilter(filterText);\n    this.maxDepth = maxDepth;\n    this.recursively = recursively;\n    this.api = api;\n  }\n  getComponentTree(instance) {\n    this.captureIds = /* @__PURE__ */ new Map();\n    return this.findQualifiedChildren(instance, 0);\n  }\n  getComponentParents(instance) {\n    this.captureIds = /* @__PURE__ */ new Map();\n    const parents = [];\n    this.captureId(instance);\n    let parent = instance;\n    while (parent = parent.parent) {\n      this.captureId(parent);\n      parents.push(parent);\n    }\n    return parents;\n  }\n  captureId(instance) {\n    if (!instance)\n      return null;\n    const id = instance.__VUE_DEVTOOLS_NEXT_UID__ != null ? instance.__VUE_DEVTOOLS_NEXT_UID__ : getUniqueComponentId(instance);\n    instance.__VUE_DEVTOOLS_NEXT_UID__ = id;\n    if (this.captureIds.has(id))\n      return null;\n    else\n      this.captureIds.set(id, void 0);\n    this.mark(instance);\n    return id;\n  }\n  /**\n   * Capture the meta information of an instance. (recursive)\n   *\n   * @param {Vue} instance\n   * @return {object}\n   */\n  async capture(instance, depth) {\n    var _a25;\n    if (!instance)\n      return null;\n    const id = this.captureId(instance);\n    const name = getInstanceName(instance);\n    const children = this.getInternalInstanceChildren(instance.subTree).filter((child) => !isBeingDestroyed(child));\n    const parents = this.getComponentParents(instance) || [];\n    const inactive = !!instance.isDeactivated || parents.some((parent) => parent.isDeactivated);\n    const treeNode = {\n      uid: instance.uid,\n      id,\n      name,\n      renderKey: getRenderKey(instance.vnode ? instance.vnode.key : null),\n      inactive,\n      children: [],\n      isFragment: isFragment(instance),\n      tags: typeof instance.type !== \"function\" ? [] : [\n        {\n          label: \"functional\",\n          textColor: 5592405,\n          backgroundColor: 15658734\n        }\n      ],\n      autoOpen: this.recursively,\n      file: instance.type.__file || \"\"\n    };\n    if (depth < this.maxDepth || instance.type.__isKeepAlive || parents.some((parent) => parent.type.__isKeepAlive)) {\n      treeNode.children = await Promise.all(children.map((child) => this.capture(child, depth + 1)).filter(Boolean));\n    }\n    if (this.isKeepAlive(instance)) {\n      const cachedComponents = this.getKeepAliveCachedInstances(instance);\n      const childrenIds = children.map((child) => child.__VUE_DEVTOOLS_NEXT_UID__);\n      for (const cachedChild of cachedComponents) {\n        if (!childrenIds.includes(cachedChild.__VUE_DEVTOOLS_NEXT_UID__)) {\n          const node = await this.capture({ ...cachedChild, isDeactivated: true }, depth + 1);\n          if (node)\n            treeNode.children.push(node);\n        }\n      }\n    }\n    const rootElements = getRootElementsFromComponentInstance(instance);\n    const firstElement = rootElements[0];\n    if (firstElement == null ? void 0 : firstElement.parentElement) {\n      const parentInstance = instance.parent;\n      const parentRootElements = parentInstance ? getRootElementsFromComponentInstance(parentInstance) : [];\n      let el = firstElement;\n      const indexList = [];\n      do {\n        indexList.push(Array.from(el.parentElement.childNodes).indexOf(el));\n        el = el.parentElement;\n      } while (el.parentElement && parentRootElements.length && !parentRootElements.includes(el));\n      treeNode.domOrder = indexList.reverse();\n    } else {\n      treeNode.domOrder = [-1];\n    }\n    if ((_a25 = instance.suspense) == null ? void 0 : _a25.suspenseKey) {\n      treeNode.tags.push({\n        label: instance.suspense.suspenseKey,\n        backgroundColor: 14979812,\n        textColor: 16777215\n      });\n      this.mark(instance, true);\n    }\n    this.api.visitComponentTree({\n      treeNode,\n      componentInstance: instance,\n      app: instance.appContext.app,\n      filter: this.componentFilter.filter\n    });\n    return treeNode;\n  }\n  /**\n   * Find qualified children from a single instance.\n   * If the instance itself is qualified, just return itself.\n   * This is ok because [].concat works in both cases.\n   *\n   * @param {Vue|Vnode} instance\n   * @return {Vue|Array}\n   */\n  async findQualifiedChildren(instance, depth) {\n    var _a25;\n    if (this.componentFilter.isQualified(instance) && !((_a25 = instance.type.devtools) == null ? void 0 : _a25.hide)) {\n      return [await this.capture(instance, depth)];\n    } else if (instance.subTree) {\n      const list = this.isKeepAlive(instance) ? this.getKeepAliveCachedInstances(instance) : this.getInternalInstanceChildren(instance.subTree);\n      return this.findQualifiedChildrenFromList(list, depth);\n    } else {\n      return [];\n    }\n  }\n  /**\n   * Iterate through an array of instances and flatten it into\n   * an array of qualified instances. This is a depth-first\n   * traversal - e.g. if an instance is not matched, we will\n   * recursively go deeper until a qualified child is found.\n   *\n   * @param {Array} instances\n   * @return {Array}\n   */\n  async findQualifiedChildrenFromList(instances, depth) {\n    instances = instances.filter((child) => {\n      var _a25;\n      return !isBeingDestroyed(child) && !((_a25 = child.type.devtools) == null ? void 0 : _a25.hide);\n    });\n    if (!this.componentFilter.filter)\n      return Promise.all(instances.map((child) => this.capture(child, depth)));\n    else\n      return Array.prototype.concat.apply([], await Promise.all(instances.map((i) => this.findQualifiedChildren(i, depth))));\n  }\n  /**\n   * Get children from a component instance.\n   */\n  getInternalInstanceChildren(subTree, suspense = null) {\n    const list = [];\n    if (subTree) {\n      if (subTree.component) {\n        !suspense ? list.push(subTree.component) : list.push({ ...subTree.component, suspense });\n      } else if (subTree.suspense) {\n        const suspenseKey = !subTree.suspense.isInFallback ? \"suspense default\" : \"suspense fallback\";\n        list.push(...this.getInternalInstanceChildren(subTree.suspense.activeBranch, { ...subTree.suspense, suspenseKey }));\n      } else if (Array.isArray(subTree.children)) {\n        subTree.children.forEach((childSubTree) => {\n          if (childSubTree.component)\n            !suspense ? list.push(childSubTree.component) : list.push({ ...childSubTree.component, suspense });\n          else\n            list.push(...this.getInternalInstanceChildren(childSubTree, suspense));\n        });\n      }\n    }\n    return list.filter((child) => {\n      var _a25;\n      return !isBeingDestroyed(child) && !((_a25 = child.type.devtools) == null ? void 0 : _a25.hide);\n    });\n  }\n  /**\n   * Mark an instance as captured and store it in the instance map.\n   *\n   * @param {Vue} instance\n   */\n  mark(instance, force = false) {\n    const instanceMap = getAppRecord(instance).instanceMap;\n    if (force || !instanceMap.has(instance.__VUE_DEVTOOLS_NEXT_UID__)) {\n      instanceMap.set(instance.__VUE_DEVTOOLS_NEXT_UID__, instance);\n      activeAppRecord.value.instanceMap = instanceMap;\n    }\n  }\n  isKeepAlive(instance) {\n    return instance.type.__isKeepAlive && instance.__v_cache;\n  }\n  getKeepAliveCachedInstances(instance) {\n    return Array.from(instance.__v_cache.values()).map((vnode) => vnode.component).filter(Boolean);\n  }\n};\n\n// src/core/timeline/index.ts\ninit_esm_shims();\n\n\n// src/core/timeline/perf.ts\ninit_esm_shims();\nvar markEndQueue = /* @__PURE__ */ new Map();\nvar PERFORMANCE_EVENT_LAYER_ID = \"performance\";\nasync function performanceMarkStart(api, app, uid, vm, type, time) {\n  const appRecord = await getAppRecord(app);\n  if (!appRecord) {\n    return;\n  }\n  const componentName = getInstanceName(vm) || \"Unknown Component\";\n  const groupId = devtoolsState.perfUniqueGroupId++;\n  const groupKey = `${uid}-${type}`;\n  appRecord.perfGroupIds.set(groupKey, { groupId, time });\n  await api.addTimelineEvent({\n    layerId: PERFORMANCE_EVENT_LAYER_ID,\n    event: {\n      time: Date.now(),\n      data: {\n        component: componentName,\n        type,\n        measure: \"start\"\n      },\n      title: componentName,\n      subtitle: type,\n      groupId\n    }\n  });\n  if (markEndQueue.has(groupKey)) {\n    const {\n      app: app2,\n      uid: uid2,\n      instance,\n      type: type2,\n      time: time2\n    } = markEndQueue.get(groupKey);\n    markEndQueue.delete(groupKey);\n    await performanceMarkEnd(\n      api,\n      app2,\n      uid2,\n      instance,\n      type2,\n      time2\n    );\n  }\n}\nfunction performanceMarkEnd(api, app, uid, vm, type, time) {\n  const appRecord = getAppRecord(app);\n  if (!appRecord)\n    return;\n  const componentName = getInstanceName(vm) || \"Unknown Component\";\n  const groupKey = `${uid}-${type}`;\n  const groupInfo = appRecord.perfGroupIds.get(groupKey);\n  if (groupInfo) {\n    const groupId = groupInfo.groupId;\n    const startTime = groupInfo.time;\n    const duration = time - startTime;\n    api.addTimelineEvent({\n      layerId: PERFORMANCE_EVENT_LAYER_ID,\n      event: {\n        time: Date.now(),\n        data: {\n          component: componentName,\n          type,\n          measure: \"end\",\n          duration: {\n            _custom: {\n              type: \"Duration\",\n              value: duration,\n              display: `${duration} ms`\n            }\n          }\n        },\n        title: componentName,\n        subtitle: type,\n        groupId\n      }\n    });\n  } else {\n    markEndQueue.set(groupKey, { app, uid, instance: vm, type, time });\n  }\n}\n\n// src/core/timeline/index.ts\nvar COMPONENT_EVENT_LAYER_ID = \"component-event\";\nfunction setupBuiltinTimelineLayers(api) {\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isBrowser)\n    return;\n  api.addTimelineLayer({\n    id: \"mouse\",\n    label: \"Mouse\",\n    color: 10768815\n  });\n  [\"mousedown\", \"mouseup\", \"click\", \"dblclick\"].forEach((eventType) => {\n    if (!devtoolsState.timelineLayersState.recordingState || !devtoolsState.timelineLayersState.mouseEventEnabled)\n      return;\n    window.addEventListener(eventType, async (event) => {\n      await api.addTimelineEvent({\n        layerId: \"mouse\",\n        event: {\n          time: Date.now(),\n          data: {\n            type: eventType,\n            x: event.clientX,\n            y: event.clientY\n          },\n          title: eventType\n        }\n      });\n    }, {\n      capture: true,\n      passive: true\n    });\n  });\n  api.addTimelineLayer({\n    id: \"keyboard\",\n    label: \"Keyboard\",\n    color: 8475055\n  });\n  [\"keyup\", \"keydown\", \"keypress\"].forEach((eventType) => {\n    window.addEventListener(eventType, async (event) => {\n      if (!devtoolsState.timelineLayersState.recordingState || !devtoolsState.timelineLayersState.keyboardEventEnabled)\n        return;\n      await api.addTimelineEvent({\n        layerId: \"keyboard\",\n        event: {\n          time: Date.now(),\n          data: {\n            type: eventType,\n            key: event.key,\n            ctrlKey: event.ctrlKey,\n            shiftKey: event.shiftKey,\n            altKey: event.altKey,\n            metaKey: event.metaKey\n          },\n          title: event.key\n        }\n      });\n    }, {\n      capture: true,\n      passive: true\n    });\n  });\n  api.addTimelineLayer({\n    id: COMPONENT_EVENT_LAYER_ID,\n    label: \"Component events\",\n    color: 5226637\n  });\n  hook.on.componentEmit(async (app, instance, event, params) => {\n    if (!devtoolsState.timelineLayersState.recordingState || !devtoolsState.timelineLayersState.componentEventEnabled)\n      return;\n    const appRecord = await getAppRecord(app);\n    if (!appRecord)\n      return;\n    const componentId = `${appRecord.id}:${instance.uid}`;\n    const componentName = getInstanceName(instance) || \"Unknown Component\";\n    api.addTimelineEvent({\n      layerId: COMPONENT_EVENT_LAYER_ID,\n      event: {\n        time: Date.now(),\n        data: {\n          component: {\n            _custom: {\n              type: \"component-definition\",\n              display: componentName\n            }\n          },\n          event,\n          params\n        },\n        title: event,\n        subtitle: `by ${componentName}`,\n        meta: {\n          componentId\n        }\n      }\n    });\n  });\n  api.addTimelineLayer({\n    id: \"performance\",\n    label: PERFORMANCE_EVENT_LAYER_ID,\n    color: 4307050\n  });\n  hook.on.perfStart((app, uid, vm, type, time) => {\n    if (!devtoolsState.timelineLayersState.recordingState || !devtoolsState.timelineLayersState.performanceEventEnabled)\n      return;\n    performanceMarkStart(api, app, uid, vm, type, time);\n  });\n  hook.on.perfEnd((app, uid, vm, type, time) => {\n    if (!devtoolsState.timelineLayersState.recordingState || !devtoolsState.timelineLayersState.performanceEventEnabled)\n      return;\n    performanceMarkEnd(api, app, uid, vm, type, time);\n  });\n}\n\n// src/core/vm/index.ts\ninit_esm_shims();\nvar MAX_$VM = 10;\nvar $vmQueue = [];\nfunction exposeInstanceToWindow(componentInstance) {\n  if (typeof window === \"undefined\")\n    return;\n  const win = window;\n  if (!componentInstance)\n    return;\n  win.$vm = componentInstance;\n  if ($vmQueue[0] !== componentInstance) {\n    if ($vmQueue.length >= MAX_$VM) {\n      $vmQueue.pop();\n    }\n    for (let i = $vmQueue.length; i > 0; i--) {\n      win[`$vm${i}`] = $vmQueue[i] = $vmQueue[i - 1];\n    }\n    win.$vm0 = $vmQueue[0] = componentInstance;\n  }\n}\n\n// src/core/plugin/components.ts\nvar INSPECTOR_ID = \"components\";\nfunction createComponentsDevToolsPlugin(app) {\n  const descriptor = {\n    id: INSPECTOR_ID,\n    label: \"Components\",\n    app\n  };\n  const setupFn = (api) => {\n    api.addInspector({\n      id: INSPECTOR_ID,\n      label: \"Components\",\n      treeFilterPlaceholder: \"Search components\"\n    });\n    setupBuiltinTimelineLayers(api);\n    api.on.getInspectorTree(async (payload) => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const instance = getComponentInstance(activeAppRecord.value, payload.instanceId);\n        if (instance) {\n          const walker2 = new ComponentWalker({\n            filterText: payload.filter,\n            // @TODO: should make this configurable?\n            maxDepth: 100,\n            recursively: false,\n            api\n          });\n          payload.rootNodes = await walker2.getComponentTree(instance);\n        }\n      }\n    });\n    api.on.getInspectorState(async (payload) => {\n      var _a25;\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        const result = getInstanceState({\n          instanceId: payload.nodeId\n        });\n        const componentInstance = result.instance;\n        const app2 = (_a25 = result.instance) == null ? void 0 : _a25.appContext.app;\n        const _payload = {\n          componentInstance,\n          app: app2,\n          instanceData: result\n        };\n        devtoolsContext.hooks.callHookWith((callbacks) => {\n          callbacks.forEach((cb) => cb(_payload));\n        }, \"inspectComponent\" /* INSPECT_COMPONENT */);\n        payload.state = result;\n        exposeInstanceToWindow(componentInstance);\n      }\n    });\n    api.on.editInspectorState(async (payload) => {\n      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n        editState(payload);\n        await api.sendInspectorState(\"components\");\n      }\n    });\n    const debounceSendInspectorTree = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => {\n      api.sendInspectorTree(INSPECTOR_ID);\n    }, 120);\n    const debounceSendInspectorState = (0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => {\n      api.sendInspectorState(INSPECTOR_ID);\n    }, 120);\n    const componentAddedCleanup = hook.on.componentAdded(async (app2, uid, parentUid, component) => {\n      var _a25, _b25, _c;\n      if (devtoolsState.highPerfModeEnabled)\n        return;\n      if ((_c = (_b25 = (_a25 = app2 == null ? void 0 : app2._instance) == null ? void 0 : _a25.type) == null ? void 0 : _b25.devtools) == null ? void 0 : _c.hide)\n        return;\n      if (!app2 || typeof uid !== \"number\" && !uid || !component)\n        return;\n      const id = await getComponentId({\n        app: app2,\n        uid,\n        instance: component\n      });\n      const appRecord = await getAppRecord(app2);\n      if (component) {\n        if (component.__VUE_DEVTOOLS_NEXT_UID__ == null)\n          component.__VUE_DEVTOOLS_NEXT_UID__ = id;\n        if (!(appRecord == null ? void 0 : appRecord.instanceMap.has(id))) {\n          appRecord == null ? void 0 : appRecord.instanceMap.set(id, component);\n          if (activeAppRecord.value.id === (appRecord == null ? void 0 : appRecord.id))\n            activeAppRecord.value.instanceMap = appRecord.instanceMap;\n        }\n      }\n      if (!appRecord)\n        return;\n      debounceSendInspectorTree();\n    });\n    const componentUpdatedCleanup = hook.on.componentUpdated(async (app2, uid, parentUid, component) => {\n      var _a25, _b25, _c;\n      if (devtoolsState.highPerfModeEnabled)\n        return;\n      if ((_c = (_b25 = (_a25 = app2 == null ? void 0 : app2._instance) == null ? void 0 : _a25.type) == null ? void 0 : _b25.devtools) == null ? void 0 : _c.hide)\n        return;\n      if (!app2 || typeof uid !== \"number\" && !uid || !component)\n        return;\n      const id = await getComponentId({\n        app: app2,\n        uid,\n        instance: component\n      });\n      const appRecord = await getAppRecord(app2);\n      if (component) {\n        if (component.__VUE_DEVTOOLS_NEXT_UID__ == null)\n          component.__VUE_DEVTOOLS_NEXT_UID__ = id;\n        if (!(appRecord == null ? void 0 : appRecord.instanceMap.has(id))) {\n          appRecord == null ? void 0 : appRecord.instanceMap.set(id, component);\n          if (activeAppRecord.value.id === (appRecord == null ? void 0 : appRecord.id))\n            activeAppRecord.value.instanceMap = appRecord.instanceMap;\n        }\n      }\n      if (!appRecord)\n        return;\n      debounceSendInspectorTree();\n      debounceSendInspectorState();\n    });\n    const componentRemovedCleanup = hook.on.componentRemoved(async (app2, uid, parentUid, component) => {\n      var _a25, _b25, _c;\n      if (devtoolsState.highPerfModeEnabled)\n        return;\n      if ((_c = (_b25 = (_a25 = app2 == null ? void 0 : app2._instance) == null ? void 0 : _a25.type) == null ? void 0 : _b25.devtools) == null ? void 0 : _c.hide)\n        return;\n      if (!app2 || typeof uid !== \"number\" && !uid || !component)\n        return;\n      const appRecord = await getAppRecord(app2);\n      if (!appRecord)\n        return;\n      const id = await getComponentId({\n        app: app2,\n        uid,\n        instance: component\n      });\n      appRecord == null ? void 0 : appRecord.instanceMap.delete(id);\n      if (activeAppRecord.value.id === (appRecord == null ? void 0 : appRecord.id))\n        activeAppRecord.value.instanceMap = appRecord.instanceMap;\n      debounceSendInspectorTree();\n    });\n  };\n  return [descriptor, setupFn];\n}\n\n// src/core/plugin/index.ts\nvar _a12, _b12;\n(_b12 = (_a12 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT__REGISTERED_PLUGIN_APPS__) != null ? _b12 : _a12.__VUE_DEVTOOLS_KIT__REGISTERED_PLUGIN_APPS__ = /* @__PURE__ */ new Set();\nfunction setupDevToolsPlugin(pluginDescriptor, setupFn) {\n  return hook.setupDevToolsPlugin(pluginDescriptor, setupFn);\n}\nfunction callDevToolsPluginSetupFn(plugin, app) {\n  const [pluginDescriptor, setupFn] = plugin;\n  if (pluginDescriptor.app !== app)\n    return;\n  const api = new DevToolsPluginAPI({\n    plugin: {\n      setupFn,\n      descriptor: pluginDescriptor\n    },\n    ctx: devtoolsContext\n  });\n  if (pluginDescriptor.packageName === \"vuex\") {\n    api.on.editInspectorState((payload) => {\n      api.sendInspectorState(payload.inspectorId);\n    });\n  }\n  setupFn(api);\n}\nfunction removeRegisteredPluginApp(app) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT__REGISTERED_PLUGIN_APPS__.delete(app);\n}\nfunction registerDevToolsPlugin(app, options) {\n  if (_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT__REGISTERED_PLUGIN_APPS__.has(app)) {\n    return;\n  }\n  if (devtoolsState.highPerfModeEnabled && !(options == null ? void 0 : options.inspectingComponent)) {\n    return;\n  }\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT__REGISTERED_PLUGIN_APPS__.add(app);\n  devtoolsPluginBuffer.forEach((plugin) => {\n    callDevToolsPluginSetupFn(plugin, app);\n  });\n}\n\n// src/core/router/index.ts\ninit_esm_shims();\n\n\n\n// src/ctx/router.ts\ninit_esm_shims();\n\nvar ROUTER_KEY = \"__VUE_DEVTOOLS_ROUTER__\";\nvar ROUTER_INFO_KEY = \"__VUE_DEVTOOLS_ROUTER_INFO__\";\nvar _a13, _b13;\n(_b13 = (_a13 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target)[ROUTER_INFO_KEY]) != null ? _b13 : _a13[ROUTER_INFO_KEY] = {\n  currentRoute: null,\n  routes: []\n};\nvar _a14, _b14;\n(_b14 = (_a14 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target)[ROUTER_KEY]) != null ? _b14 : _a14[ROUTER_KEY] = {};\nvar devtoolsRouterInfo = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_INFO_KEY], {\n  get(target22, property) {\n    return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_INFO_KEY][property];\n  }\n});\nvar devtoolsRouter = new Proxy(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_KEY], {\n  get(target22, property) {\n    if (property === \"value\") {\n      return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_KEY];\n    }\n  }\n});\n\n// src/core/router/index.ts\nfunction getRoutes(router) {\n  const routesMap = /* @__PURE__ */ new Map();\n  return ((router == null ? void 0 : router.getRoutes()) || []).filter((i) => !routesMap.has(i.path) && routesMap.set(i.path, 1));\n}\nfunction filterRoutes(routes) {\n  return routes.map((item) => {\n    let { path, name, children, meta } = item;\n    if (children == null ? void 0 : children.length)\n      children = filterRoutes(children);\n    return {\n      path,\n      name,\n      children,\n      meta\n    };\n  });\n}\nfunction filterCurrentRoute(route) {\n  if (route) {\n    const { fullPath, hash, href, path, name, matched, params, query } = route;\n    return {\n      fullPath,\n      hash,\n      href,\n      path,\n      name,\n      params,\n      query,\n      matched: filterRoutes(matched)\n    };\n  }\n  return route;\n}\nfunction normalizeRouterInfo(appRecord, activeAppRecord2) {\n  function init() {\n    var _a25;\n    const router = (_a25 = appRecord.app) == null ? void 0 : _a25.config.globalProperties.$router;\n    const currentRoute = filterCurrentRoute(router == null ? void 0 : router.currentRoute.value);\n    const routes = filterRoutes(getRoutes(router));\n    const c = console.warn;\n    console.warn = () => {\n    };\n    _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_INFO_KEY] = {\n      currentRoute: currentRoute ? (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.deepClone)(currentRoute) : {},\n      routes: (0,_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.deepClone)(routes)\n    };\n    _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_KEY] = router;\n    console.warn = c;\n  }\n  init();\n  hook.on.componentUpdated((0,perfect_debounce__WEBPACK_IMPORTED_MODULE_2__.debounce)(() => {\n    var _a25;\n    if (((_a25 = activeAppRecord2.value) == null ? void 0 : _a25.app) !== appRecord.app)\n      return;\n    init();\n    if (devtoolsState.highPerfModeEnabled)\n      return;\n    devtoolsContext.hooks.callHook(\"routerInfoUpdated\" /* ROUTER_INFO_UPDATED */, { state: _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[ROUTER_INFO_KEY] });\n  }, 200));\n}\n\n// src/ctx/api.ts\nfunction createDevToolsApi(hooks2) {\n  return {\n    // get inspector tree\n    async getInspectorTree(payload) {\n      const _payload = {\n        ...payload,\n        app: activeAppRecord.value.app,\n        rootNodes: []\n      };\n      await new Promise((resolve) => {\n        hooks2.callHookWith(async (callbacks) => {\n          await Promise.all(callbacks.map((cb) => cb(_payload)));\n          resolve();\n        }, \"getInspectorTree\" /* GET_INSPECTOR_TREE */);\n      });\n      return _payload.rootNodes;\n    },\n    // get inspector state\n    async getInspectorState(payload) {\n      const _payload = {\n        ...payload,\n        app: activeAppRecord.value.app,\n        state: null\n      };\n      const ctx = {\n        currentTab: `custom-inspector:${payload.inspectorId}`\n      };\n      await new Promise((resolve) => {\n        hooks2.callHookWith(async (callbacks) => {\n          await Promise.all(callbacks.map((cb) => cb(_payload, ctx)));\n          resolve();\n        }, \"getInspectorState\" /* GET_INSPECTOR_STATE */);\n      });\n      return _payload.state;\n    },\n    // edit inspector state\n    editInspectorState(payload) {\n      const stateEditor2 = new StateEditor();\n      const _payload = {\n        ...payload,\n        app: activeAppRecord.value.app,\n        set: (obj, path = payload.path, value = payload.state.value, cb) => {\n          stateEditor2.set(obj, path, value, cb || stateEditor2.createDefaultSetCallback(payload.state));\n        }\n      };\n      hooks2.callHookWith((callbacks) => {\n        callbacks.forEach((cb) => cb(_payload));\n      }, \"editInspectorState\" /* EDIT_INSPECTOR_STATE */);\n    },\n    // send inspector state\n    sendInspectorState(inspectorId) {\n      const inspector = getInspector(inspectorId);\n      hooks2.callHook(\"sendInspectorState\" /* SEND_INSPECTOR_STATE */, { inspectorId, plugin: {\n        descriptor: inspector.descriptor,\n        setupFn: () => ({})\n      } });\n    },\n    // inspect component inspector\n    inspectComponentInspector() {\n      return inspectComponentHighLighter();\n    },\n    // cancel inspect component inspector\n    cancelInspectComponentInspector() {\n      return cancelInspectComponentHighLighter();\n    },\n    // get component render code\n    getComponentRenderCode(id) {\n      const instance = getComponentInstance(activeAppRecord.value, id);\n      if (instance)\n        return !((instance == null ? void 0 : instance.type) instanceof Function) ? instance.render.toString() : instance.type.toString();\n    },\n    // scroll to component\n    scrollToComponent(id) {\n      return scrollToComponent({ id });\n    },\n    // open in editor\n    openInEditor,\n    // get vue inspector\n    getVueInspector: getComponentInspector,\n    // toggle app\n    toggleApp(id, options) {\n      const appRecord = devtoolsAppRecords.value.find((record) => record.id === id);\n      if (appRecord) {\n        setActiveAppRecordId(id);\n        setActiveAppRecord(appRecord);\n        normalizeRouterInfo(appRecord, activeAppRecord);\n        callInspectorUpdatedHook();\n        registerDevToolsPlugin(appRecord.app, options);\n      }\n    },\n    // inspect dom\n    inspectDOM(instanceId) {\n      const instance = getComponentInstance(activeAppRecord.value, instanceId);\n      if (instance) {\n        const [el] = getRootElementsFromComponentInstance(instance);\n        if (el) {\n          _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_INSPECT_DOM_TARGET__ = el;\n        }\n      }\n    },\n    updatePluginSettings(pluginId, key, value) {\n      setPluginSettings(pluginId, key, value);\n    },\n    getPluginSettings(pluginId) {\n      return {\n        options: getPluginSettingsOptions(pluginId),\n        values: getPluginSettings(pluginId)\n      };\n    }\n  };\n}\n\n// src/ctx/env.ts\ninit_esm_shims();\n\nvar _a15, _b15;\n(_b15 = (_a15 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_ENV__) != null ? _b15 : _a15.__VUE_DEVTOOLS_ENV__ = {\n  vitePluginDetected: false\n};\nfunction getDevToolsEnv() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_ENV__;\n}\nfunction setDevToolsEnv(env) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_ENV__ = {\n    ..._vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_ENV__,\n    ...env\n  };\n}\n\n// src/ctx/index.ts\nvar hooks = createDevToolsCtxHooks();\nvar _a16, _b16;\n(_b16 = (_a16 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_CONTEXT__) != null ? _b16 : _a16.__VUE_DEVTOOLS_KIT_CONTEXT__ = {\n  hooks,\n  get state() {\n    return {\n      ...devtoolsState,\n      activeAppRecordId: activeAppRecord.id,\n      activeAppRecord: activeAppRecord.value,\n      appRecords: devtoolsAppRecords.value\n    };\n  },\n  api: createDevToolsApi(hooks)\n};\nvar devtoolsContext = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_CONTEXT__;\n\n// src/core/app/index.ts\ninit_esm_shims();\nvar import_speakingurl = __toESM(require_speakingurl2(), 1);\n\nvar _a17, _b17;\nvar appRecordInfo = (_b17 = (_a17 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_NEXT_APP_RECORD_INFO__) != null ? _b17 : _a17.__VUE_DEVTOOLS_NEXT_APP_RECORD_INFO__ = {\n  id: 0,\n  appIds: /* @__PURE__ */ new Set()\n};\nfunction getAppRecordName(app, fallbackName) {\n  var _a25;\n  return ((_a25 = app == null ? void 0 : app._component) == null ? void 0 : _a25.name) || `App ${fallbackName}`;\n}\nfunction getAppRootInstance(app) {\n  var _a25, _b25, _c, _d;\n  if (app._instance)\n    return app._instance;\n  else if ((_b25 = (_a25 = app._container) == null ? void 0 : _a25._vnode) == null ? void 0 : _b25.component)\n    return (_d = (_c = app._container) == null ? void 0 : _c._vnode) == null ? void 0 : _d.component;\n}\nfunction removeAppRecordId(app) {\n  const id = app.__VUE_DEVTOOLS_NEXT_APP_RECORD_ID__;\n  if (id != null) {\n    appRecordInfo.appIds.delete(id);\n    appRecordInfo.id--;\n  }\n}\nfunction getAppRecordId(app, defaultId) {\n  if (app.__VUE_DEVTOOLS_NEXT_APP_RECORD_ID__ != null)\n    return app.__VUE_DEVTOOLS_NEXT_APP_RECORD_ID__;\n  let id = defaultId != null ? defaultId : (appRecordInfo.id++).toString();\n  if (defaultId && appRecordInfo.appIds.has(id)) {\n    let count = 1;\n    while (appRecordInfo.appIds.has(`${defaultId}_${count}`))\n      count++;\n    id = `${defaultId}_${count}`;\n  }\n  appRecordInfo.appIds.add(id);\n  app.__VUE_DEVTOOLS_NEXT_APP_RECORD_ID__ = id;\n  return id;\n}\nfunction createAppRecord(app, types) {\n  const rootInstance = getAppRootInstance(app);\n  if (rootInstance) {\n    appRecordInfo.id++;\n    const name = getAppRecordName(app, appRecordInfo.id.toString());\n    const id = getAppRecordId(app, (0, import_speakingurl.default)(name));\n    const record = {\n      id,\n      name,\n      types,\n      instanceMap: /* @__PURE__ */ new Map(),\n      perfGroupIds: /* @__PURE__ */ new Map(),\n      rootInstance\n    };\n    app.__VUE_DEVTOOLS_NEXT_APP_RECORD__ = record;\n    const rootId = `${record.id}:root`;\n    record.instanceMap.set(rootId, record.rootInstance);\n    record.rootInstance.__VUE_DEVTOOLS_NEXT_UID__ = rootId;\n    return record;\n  } else {\n    return {};\n  }\n}\n\n// src/core/index.ts\nfunction initDevTools() {\n  var _a25;\n  updateDevToolsState({\n    vitePluginDetected: getDevToolsEnv().vitePluginDetected\n  });\n  const isDevToolsNext = ((_a25 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_GLOBAL_HOOK__) == null ? void 0 : _a25.id) === \"vue-devtools-next\";\n  if (_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_GLOBAL_HOOK__ && isDevToolsNext)\n    return;\n  const _devtoolsHook = createDevToolsHook();\n  if (_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_HOOK_REPLAY__) {\n    try {\n      _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_HOOK_REPLAY__.forEach((cb) => cb(_devtoolsHook));\n      _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_HOOK_REPLAY__ = [];\n    } catch (e) {\n      console.error(\"[vue-devtools] Error during hook replay\", e);\n    }\n  }\n  _devtoolsHook.once(\"init\", (Vue) => {\n    _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_VUE2_APP_DETECTED__ = true;\n    console.log(\"%c[_____Vue DevTools v7 log_____]\", \"color: red; font-bold: 600; font-size: 16px;\");\n    console.log(\"%cVue DevTools v7 detected in your Vue2 project. v7 only supports Vue3 and will not work.\", \"font-bold: 500; font-size: 14px;\");\n    const url = \"https://chromewebstore.google.com/detail/vuejs-devtools/iaajmlceplecbljialhhkmedjlpdblhp\";\n    console.log(`%cThe legacy version that supports both Vue 2 and Vue 3 has been moved to %c ${url}`, \"font-size: 14px;\", \"text-decoration: underline; cursor: pointer;font-size: 14px;\");\n    console.log(\"%cPlease install and enable only the legacy version for your Vue2 app.\", \"font-bold: 500; font-size: 14px;\");\n    console.log(\"%c[_____Vue DevTools v7 log_____]\", \"color: red; font-bold: 600; font-size: 16px;\");\n  });\n  hook.on.setupDevtoolsPlugin((pluginDescriptor, setupFn) => {\n    var _a26;\n    addDevToolsPluginToBuffer(pluginDescriptor, setupFn);\n    const { app } = (_a26 = activeAppRecord) != null ? _a26 : {};\n    if (pluginDescriptor.settings) {\n      initPluginSettings(pluginDescriptor.id, pluginDescriptor.settings);\n    }\n    if (!app)\n      return;\n    callDevToolsPluginSetupFn([pluginDescriptor, setupFn], app);\n  });\n  onLegacyDevToolsPluginApiAvailable(() => {\n    const normalizedPluginBuffer = devtoolsPluginBuffer.filter(([item]) => item.id !== \"components\");\n    normalizedPluginBuffer.forEach(([pluginDescriptor, setupFn]) => {\n      _devtoolsHook.emit(\"devtools-plugin:setup\" /* SETUP_DEVTOOLS_PLUGIN */, pluginDescriptor, setupFn, { target: \"legacy\" });\n    });\n  });\n  hook.on.vueAppInit(async (app, version, types) => {\n    const appRecord = createAppRecord(app, types);\n    const normalizedAppRecord = {\n      ...appRecord,\n      app,\n      version\n    };\n    addDevToolsAppRecord(normalizedAppRecord);\n    if (devtoolsAppRecords.value.length === 1) {\n      setActiveAppRecord(normalizedAppRecord);\n      setActiveAppRecordId(normalizedAppRecord.id);\n      normalizeRouterInfo(normalizedAppRecord, activeAppRecord);\n      registerDevToolsPlugin(normalizedAppRecord.app);\n    }\n    setupDevToolsPlugin(...createComponentsDevToolsPlugin(normalizedAppRecord.app));\n    updateDevToolsState({\n      connected: true\n    });\n    _devtoolsHook.apps.push(app);\n  });\n  hook.on.vueAppUnmount(async (app) => {\n    const activeRecords = devtoolsAppRecords.value.filter((appRecord) => appRecord.app !== app);\n    if (activeRecords.length === 0) {\n      updateDevToolsState({\n        connected: false\n      });\n    }\n    removeDevToolsAppRecord(app);\n    removeAppRecordId(app);\n    if (activeAppRecord.value.app === app) {\n      setActiveAppRecord(activeRecords[0]);\n      devtoolsContext.hooks.callHook(\"sendActiveAppUpdatedToClient\" /* SEND_ACTIVE_APP_UNMOUNTED_TO_CLIENT */);\n    }\n    _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_GLOBAL_HOOK__.apps.splice(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_GLOBAL_HOOK__.apps.indexOf(app), 1);\n    removeRegisteredPluginApp(app);\n  });\n  subscribeDevToolsHook(_devtoolsHook);\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_GLOBAL_HOOK__) {\n    Object.defineProperty(_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target, \"__VUE_DEVTOOLS_GLOBAL_HOOK__\", {\n      get() {\n        return _devtoolsHook;\n      }\n    });\n  } else {\n    if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isNuxtApp) {\n      Object.assign(__VUE_DEVTOOLS_GLOBAL_HOOK__, _devtoolsHook);\n    }\n  }\n}\nfunction onDevToolsClientConnected(fn) {\n  return new Promise((resolve) => {\n    if (devtoolsState.connected && devtoolsState.clientConnected) {\n      fn();\n      resolve();\n      return;\n    }\n    devtoolsContext.hooks.hook(\"devtoolsConnectedUpdated\" /* DEVTOOLS_CONNECTED_UPDATED */, ({ state }) => {\n      if (state.connected && state.clientConnected) {\n        fn();\n        resolve();\n      }\n    });\n  });\n}\n\n// src/core/high-perf-mode/index.ts\ninit_esm_shims();\nfunction toggleHighPerfMode(state) {\n  devtoolsState.highPerfModeEnabled = state != null ? state : !devtoolsState.highPerfModeEnabled;\n  if (!state && activeAppRecord.value) {\n    registerDevToolsPlugin(activeAppRecord.value.app);\n  }\n}\n\n// src/core/component/state/format.ts\ninit_esm_shims();\n\n// src/core/component/state/reviver.ts\ninit_esm_shims();\n\nfunction reviveSet(val) {\n  const result = /* @__PURE__ */ new Set();\n  const list = val._custom.value;\n  for (let i = 0; i < list.length; i++) {\n    const value = list[i];\n    result.add(revive(value));\n  }\n  return result;\n}\nfunction reviveMap(val) {\n  const result = /* @__PURE__ */ new Map();\n  const list = val._custom.value;\n  for (let i = 0; i < list.length; i++) {\n    const { key, value } = list[i];\n    result.set(key, revive(value));\n  }\n  return result;\n}\nfunction revive(val) {\n  if (val === UNDEFINED) {\n    return void 0;\n  } else if (val === INFINITY) {\n    return Number.POSITIVE_INFINITY;\n  } else if (val === NEGATIVE_INFINITY) {\n    return Number.NEGATIVE_INFINITY;\n  } else if (val === NAN) {\n    return Number.NaN;\n  } else if (val && val._custom) {\n    const { _custom: custom } = val;\n    if (custom.type === \"component\")\n      return activeAppRecord.value.instanceMap.get(custom.id);\n    else if (custom.type === \"map\")\n      return reviveMap(val);\n    else if (custom.type === \"set\")\n      return reviveSet(val);\n    else if (custom.type === \"bigint\")\n      return BigInt(custom.value);\n    else\n      return revive(custom.value);\n  } else if (symbolRE.test(val)) {\n    const [, string] = symbolRE.exec(val);\n    return Symbol.for(string);\n  } else if (specialTypeRE.test(val)) {\n    const [, type, string, , details] = specialTypeRE.exec(val);\n    const result = new _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[type](string);\n    if (type === \"Error\" && details)\n      result.stack = details;\n    return result;\n  } else {\n    return val;\n  }\n}\nfunction reviver(key, value) {\n  return revive(value);\n}\n\n// src/core/component/state/format.ts\nfunction getInspectorStateValueType(value, raw = true) {\n  const type = typeof value;\n  if (value == null || value === UNDEFINED || value === \"undefined\") {\n    return \"null\";\n  } else if (type === \"boolean\" || type === \"number\" || value === INFINITY || value === NEGATIVE_INFINITY || value === NAN) {\n    return \"literal\";\n  } else if (value == null ? void 0 : value._custom) {\n    if (raw || value._custom.display != null || value._custom.displayText != null)\n      return \"custom\";\n    else\n      return getInspectorStateValueType(value._custom.value);\n  } else if (typeof value === \"string\") {\n    const typeMatch = specialTypeRE.exec(value);\n    if (typeMatch) {\n      const [, type2] = typeMatch;\n      return `native ${type2}`;\n    } else {\n      return \"string\";\n    }\n  } else if (Array.isArray(value) || (value == null ? void 0 : value._isArray)) {\n    return \"array\";\n  } else if (isPlainObject(value)) {\n    return \"plain-object\";\n  } else {\n    return \"unknown\";\n  }\n}\nfunction formatInspectorStateValue(value, quotes = false, options) {\n  var _a25, _b25, _c;\n  const { customClass } = options != null ? options : {};\n  let result;\n  const type = getInspectorStateValueType(value, false);\n  if (type !== \"custom\" && (value == null ? void 0 : value._custom))\n    value = value._custom.value;\n  if (result = internalStateTokenToString(value)) {\n    return result;\n  } else if (type === \"custom\") {\n    const nestedName = ((_a25 = value._custom.value) == null ? void 0 : _a25._custom) && formatInspectorStateValue(value._custom.value, quotes, options);\n    return nestedName || value._custom.displayText || value._custom.display;\n  } else if (type === \"array\") {\n    return `Array[${value.length}]`;\n  } else if (type === \"plain-object\") {\n    return `Object${Object.keys(value).length ? \"\" : \" (empty)\"}`;\n  } else if (type == null ? void 0 : type.includes(\"native\")) {\n    return escape((_b25 = specialTypeRE.exec(value)) == null ? void 0 : _b25[2]);\n  } else if (typeof value === \"string\") {\n    const typeMatch = value.match(rawTypeRE);\n    if (typeMatch) {\n      value = escapeString(typeMatch[1]);\n    } else if (quotes) {\n      value = `<span>\"</span>${(customClass == null ? void 0 : customClass.string) ? `<span class=${customClass.string}>${escapeString(value)}</span>` : escapeString(value)}<span>\"</span>`;\n    } else {\n      value = (customClass == null ? void 0 : customClass.string) ? `<span class=\"${(_c = customClass == null ? void 0 : customClass.string) != null ? _c : \"\"}\">${escapeString(value)}</span>` : escapeString(value);\n    }\n  }\n  return value;\n}\nfunction escapeString(value) {\n  return escape(value).replace(/ /g, \"&nbsp;\").replace(/\\n/g, \"<span>\\\\n</span>\");\n}\nfunction getRaw(value) {\n  var _a25, _b25, _c;\n  let customType;\n  const isCustom = getInspectorStateValueType(value) === \"custom\";\n  let inherit = {};\n  if (isCustom) {\n    const data = value;\n    const customValue = (_a25 = data._custom) == null ? void 0 : _a25.value;\n    const currentCustomType = (_b25 = data._custom) == null ? void 0 : _b25.type;\n    const nestedCustom = typeof customValue === \"object\" && customValue !== null && \"_custom\" in customValue ? getRaw(customValue) : { inherit: void 0, value: void 0, customType: void 0 };\n    inherit = nestedCustom.inherit || ((_c = data._custom) == null ? void 0 : _c.fields) || {};\n    value = nestedCustom.value || customValue;\n    customType = nestedCustom.customType || currentCustomType;\n  }\n  if (value && value._isArray)\n    value = value.items;\n  return { value, inherit, customType };\n}\nfunction toEdit(value, customType) {\n  if (customType === \"bigint\")\n    return value;\n  if (customType === \"date\")\n    return value;\n  return replaceTokenToString(JSON.stringify(value));\n}\nfunction toSubmit(value, customType) {\n  if (customType === \"bigint\")\n    return BigInt(value);\n  if (customType === \"date\")\n    return new Date(value);\n  return JSON.parse(replaceStringToToken(value), reviver);\n}\n\n// src/core/devtools-client/detected.ts\ninit_esm_shims();\n\nfunction updateDevToolsClientDetected(params) {\n  devtoolsState.devtoolsClientDetected = {\n    ...devtoolsState.devtoolsClientDetected,\n    ...params\n  };\n  const devtoolsClientVisible = Object.values(devtoolsState.devtoolsClientDetected).some(Boolean);\n  toggleHighPerfMode(!devtoolsClientVisible);\n}\nvar _a18, _b18;\n(_b18 = (_a18 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_UPDATE_CLIENT_DETECTED__) != null ? _b18 : _a18.__VUE_DEVTOOLS_UPDATE_CLIENT_DETECTED__ = updateDevToolsClientDetected;\n\n// src/messaging/index.ts\ninit_esm_shims();\n\n\n\n// src/messaging/presets/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/broadcast-channel/index.ts\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/index.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/class-registry.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/registry.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/double-indexed-kv.js\ninit_esm_shims();\nvar DoubleIndexedKV = class {\n  constructor() {\n    this.keyToValue = /* @__PURE__ */ new Map();\n    this.valueToKey = /* @__PURE__ */ new Map();\n  }\n  set(key, value) {\n    this.keyToValue.set(key, value);\n    this.valueToKey.set(value, key);\n  }\n  getByKey(key) {\n    return this.keyToValue.get(key);\n  }\n  getByValue(value) {\n    return this.valueToKey.get(value);\n  }\n  clear() {\n    this.keyToValue.clear();\n    this.valueToKey.clear();\n  }\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/registry.js\nvar Registry = class {\n  constructor(generateIdentifier) {\n    this.generateIdentifier = generateIdentifier;\n    this.kv = new DoubleIndexedKV();\n  }\n  register(value, identifier) {\n    if (this.kv.getByValue(value)) {\n      return;\n    }\n    if (!identifier) {\n      identifier = this.generateIdentifier(value);\n    }\n    this.kv.set(identifier, value);\n  }\n  clear() {\n    this.kv.clear();\n  }\n  getIdentifier(value) {\n    return this.kv.getByValue(value);\n  }\n  getValue(identifier) {\n    return this.kv.getByKey(identifier);\n  }\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/class-registry.js\nvar ClassRegistry = class extends Registry {\n  constructor() {\n    super((c) => c.name);\n    this.classToAllowedProps = /* @__PURE__ */ new Map();\n  }\n  register(value, options) {\n    if (typeof options === \"object\") {\n      if (options.allowProps) {\n        this.classToAllowedProps.set(value, options.allowProps);\n      }\n      super.register(value, options.identifier);\n    } else {\n      super.register(value, options);\n    }\n  }\n  getAllowedProps(value) {\n    return this.classToAllowedProps.get(value);\n  }\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/custom-transformer-registry.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/util.js\ninit_esm_shims();\nfunction valuesOfObj(record) {\n  if (\"values\" in Object) {\n    return Object.values(record);\n  }\n  const values = [];\n  for (const key in record) {\n    if (record.hasOwnProperty(key)) {\n      values.push(record[key]);\n    }\n  }\n  return values;\n}\nfunction find(record, predicate) {\n  const values = valuesOfObj(record);\n  if (\"find\" in values) {\n    return values.find(predicate);\n  }\n  const valuesNotNever = values;\n  for (let i = 0; i < valuesNotNever.length; i++) {\n    const value = valuesNotNever[i];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n  return void 0;\n}\nfunction forEach(record, run) {\n  Object.entries(record).forEach(([key, value]) => run(value, key));\n}\nfunction includes(arr, value) {\n  return arr.indexOf(value) !== -1;\n}\nfunction findArr(record, predicate) {\n  for (let i = 0; i < record.length; i++) {\n    const value = record[i];\n    if (predicate(value)) {\n      return value;\n    }\n  }\n  return void 0;\n}\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/custom-transformer-registry.js\nvar CustomTransformerRegistry = class {\n  constructor() {\n    this.transfomers = {};\n  }\n  register(transformer) {\n    this.transfomers[transformer.name] = transformer;\n  }\n  findApplicable(v) {\n    return find(this.transfomers, (transformer) => transformer.isApplicable(v));\n  }\n  findByName(name) {\n    return this.transfomers[name];\n  }\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/plainer.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/is.js\ninit_esm_shims();\nvar getType = (payload) => Object.prototype.toString.call(payload).slice(8, -1);\nvar isUndefined = (payload) => typeof payload === \"undefined\";\nvar isNull = (payload) => payload === null;\nvar isPlainObject2 = (payload) => {\n  if (typeof payload !== \"object\" || payload === null)\n    return false;\n  if (payload === Object.prototype)\n    return false;\n  if (Object.getPrototypeOf(payload) === null)\n    return true;\n  return Object.getPrototypeOf(payload) === Object.prototype;\n};\nvar isEmptyObject = (payload) => isPlainObject2(payload) && Object.keys(payload).length === 0;\nvar isArray = (payload) => Array.isArray(payload);\nvar isString = (payload) => typeof payload === \"string\";\nvar isNumber = (payload) => typeof payload === \"number\" && !isNaN(payload);\nvar isBoolean = (payload) => typeof payload === \"boolean\";\nvar isRegExp = (payload) => payload instanceof RegExp;\nvar isMap = (payload) => payload instanceof Map;\nvar isSet = (payload) => payload instanceof Set;\nvar isSymbol = (payload) => getType(payload) === \"Symbol\";\nvar isDate = (payload) => payload instanceof Date && !isNaN(payload.valueOf());\nvar isError = (payload) => payload instanceof Error;\nvar isNaNValue = (payload) => typeof payload === \"number\" && isNaN(payload);\nvar isPrimitive2 = (payload) => isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);\nvar isBigint = (payload) => typeof payload === \"bigint\";\nvar isInfinite = (payload) => payload === Infinity || payload === -Infinity;\nvar isTypedArray = (payload) => ArrayBuffer.isView(payload) && !(payload instanceof DataView);\nvar isURL = (payload) => payload instanceof URL;\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/pathstringifier.js\ninit_esm_shims();\nvar escapeKey = (key) => key.replace(/\\./g, \"\\\\.\");\nvar stringifyPath = (path) => path.map(String).map(escapeKey).join(\".\");\nvar parsePath = (string) => {\n  const result = [];\n  let segment = \"\";\n  for (let i = 0; i < string.length; i++) {\n    let char = string.charAt(i);\n    const isEscapedDot = char === \"\\\\\" && string.charAt(i + 1) === \".\";\n    if (isEscapedDot) {\n      segment += \".\";\n      i++;\n      continue;\n    }\n    const isEndOfSegment = char === \".\";\n    if (isEndOfSegment) {\n      result.push(segment);\n      segment = \"\";\n      continue;\n    }\n    segment += char;\n  }\n  const lastSegment = segment;\n  result.push(lastSegment);\n  return result;\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/transformer.js\ninit_esm_shims();\nfunction simpleTransformation(isApplicable, annotation, transform, untransform) {\n  return {\n    isApplicable,\n    annotation,\n    transform,\n    untransform\n  };\n}\nvar simpleRules = [\n  simpleTransformation(isUndefined, \"undefined\", () => null, () => void 0),\n  simpleTransformation(isBigint, \"bigint\", (v) => v.toString(), (v) => {\n    if (typeof BigInt !== \"undefined\") {\n      return BigInt(v);\n    }\n    console.error(\"Please add a BigInt polyfill.\");\n    return v;\n  }),\n  simpleTransformation(isDate, \"Date\", (v) => v.toISOString(), (v) => new Date(v)),\n  simpleTransformation(isError, \"Error\", (v, superJson) => {\n    const baseError = {\n      name: v.name,\n      message: v.message\n    };\n    superJson.allowedErrorProps.forEach((prop) => {\n      baseError[prop] = v[prop];\n    });\n    return baseError;\n  }, (v, superJson) => {\n    const e = new Error(v.message);\n    e.name = v.name;\n    e.stack = v.stack;\n    superJson.allowedErrorProps.forEach((prop) => {\n      e[prop] = v[prop];\n    });\n    return e;\n  }),\n  simpleTransformation(isRegExp, \"regexp\", (v) => \"\" + v, (regex) => {\n    const body = regex.slice(1, regex.lastIndexOf(\"/\"));\n    const flags = regex.slice(regex.lastIndexOf(\"/\") + 1);\n    return new RegExp(body, flags);\n  }),\n  simpleTransformation(\n    isSet,\n    \"set\",\n    // (sets only exist in es6+)\n    // eslint-disable-next-line es5/no-es6-methods\n    (v) => [...v.values()],\n    (v) => new Set(v)\n  ),\n  simpleTransformation(isMap, \"map\", (v) => [...v.entries()], (v) => new Map(v)),\n  simpleTransformation((v) => isNaNValue(v) || isInfinite(v), \"number\", (v) => {\n    if (isNaNValue(v)) {\n      return \"NaN\";\n    }\n    if (v > 0) {\n      return \"Infinity\";\n    } else {\n      return \"-Infinity\";\n    }\n  }, Number),\n  simpleTransformation((v) => v === 0 && 1 / v === -Infinity, \"number\", () => {\n    return \"-0\";\n  }, Number),\n  simpleTransformation(isURL, \"URL\", (v) => v.toString(), (v) => new URL(v))\n];\nfunction compositeTransformation(isApplicable, annotation, transform, untransform) {\n  return {\n    isApplicable,\n    annotation,\n    transform,\n    untransform\n  };\n}\nvar symbolRule = compositeTransformation((s, superJson) => {\n  if (isSymbol(s)) {\n    const isRegistered = !!superJson.symbolRegistry.getIdentifier(s);\n    return isRegistered;\n  }\n  return false;\n}, (s, superJson) => {\n  const identifier = superJson.symbolRegistry.getIdentifier(s);\n  return [\"symbol\", identifier];\n}, (v) => v.description, (_, a, superJson) => {\n  const value = superJson.symbolRegistry.getValue(a[1]);\n  if (!value) {\n    throw new Error(\"Trying to deserialize unknown symbol\");\n  }\n  return value;\n});\nvar constructorToName = [\n  Int8Array,\n  Uint8Array,\n  Int16Array,\n  Uint16Array,\n  Int32Array,\n  Uint32Array,\n  Float32Array,\n  Float64Array,\n  Uint8ClampedArray\n].reduce((obj, ctor) => {\n  obj[ctor.name] = ctor;\n  return obj;\n}, {});\nvar typedArrayRule = compositeTransformation(isTypedArray, (v) => [\"typed-array\", v.constructor.name], (v) => [...v], (v, a) => {\n  const ctor = constructorToName[a[1]];\n  if (!ctor) {\n    throw new Error(\"Trying to deserialize unknown typed array\");\n  }\n  return new ctor(v);\n});\nfunction isInstanceOfRegisteredClass(potentialClass, superJson) {\n  if (potentialClass == null ? void 0 : potentialClass.constructor) {\n    const isRegistered = !!superJson.classRegistry.getIdentifier(potentialClass.constructor);\n    return isRegistered;\n  }\n  return false;\n}\nvar classRule = compositeTransformation(isInstanceOfRegisteredClass, (clazz, superJson) => {\n  const identifier = superJson.classRegistry.getIdentifier(clazz.constructor);\n  return [\"class\", identifier];\n}, (clazz, superJson) => {\n  const allowedProps = superJson.classRegistry.getAllowedProps(clazz.constructor);\n  if (!allowedProps) {\n    return { ...clazz };\n  }\n  const result = {};\n  allowedProps.forEach((prop) => {\n    result[prop] = clazz[prop];\n  });\n  return result;\n}, (v, a, superJson) => {\n  const clazz = superJson.classRegistry.getValue(a[1]);\n  if (!clazz) {\n    throw new Error(`Trying to deserialize unknown class '${a[1]}' - check https://github.com/blitz-js/superjson/issues/116#issuecomment-773996564`);\n  }\n  return Object.assign(Object.create(clazz.prototype), v);\n});\nvar customRule = compositeTransformation((value, superJson) => {\n  return !!superJson.customTransformerRegistry.findApplicable(value);\n}, (value, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findApplicable(value);\n  return [\"custom\", transformer.name];\n}, (value, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findApplicable(value);\n  return transformer.serialize(value);\n}, (v, a, superJson) => {\n  const transformer = superJson.customTransformerRegistry.findByName(a[1]);\n  if (!transformer) {\n    throw new Error(\"Trying to deserialize unknown custom value\");\n  }\n  return transformer.deserialize(v);\n});\nvar compositeRules = [classRule, symbolRule, customRule, typedArrayRule];\nvar transformValue = (value, superJson) => {\n  const applicableCompositeRule = findArr(compositeRules, (rule) => rule.isApplicable(value, superJson));\n  if (applicableCompositeRule) {\n    return {\n      value: applicableCompositeRule.transform(value, superJson),\n      type: applicableCompositeRule.annotation(value, superJson)\n    };\n  }\n  const applicableSimpleRule = findArr(simpleRules, (rule) => rule.isApplicable(value, superJson));\n  if (applicableSimpleRule) {\n    return {\n      value: applicableSimpleRule.transform(value, superJson),\n      type: applicableSimpleRule.annotation\n    };\n  }\n  return void 0;\n};\nvar simpleRulesByAnnotation = {};\nsimpleRules.forEach((rule) => {\n  simpleRulesByAnnotation[rule.annotation] = rule;\n});\nvar untransformValue = (json, type, superJson) => {\n  if (isArray(type)) {\n    switch (type[0]) {\n      case \"symbol\":\n        return symbolRule.untransform(json, type, superJson);\n      case \"class\":\n        return classRule.untransform(json, type, superJson);\n      case \"custom\":\n        return customRule.untransform(json, type, superJson);\n      case \"typed-array\":\n        return typedArrayRule.untransform(json, type, superJson);\n      default:\n        throw new Error(\"Unknown transformation: \" + type);\n    }\n  } else {\n    const transformation = simpleRulesByAnnotation[type];\n    if (!transformation) {\n      throw new Error(\"Unknown transformation: \" + type);\n    }\n    return transformation.untransform(json, superJson);\n  }\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/accessDeep.js\ninit_esm_shims();\nvar getNthKey = (value, n) => {\n  if (n > value.size)\n    throw new Error(\"index out of bounds\");\n  const keys = value.keys();\n  while (n > 0) {\n    keys.next();\n    n--;\n  }\n  return keys.next().value;\n};\nfunction validatePath(path) {\n  if (includes(path, \"__proto__\")) {\n    throw new Error(\"__proto__ is not allowed as a property\");\n  }\n  if (includes(path, \"prototype\")) {\n    throw new Error(\"prototype is not allowed as a property\");\n  }\n  if (includes(path, \"constructor\")) {\n    throw new Error(\"constructor is not allowed as a property\");\n  }\n}\nvar getDeep = (object, path) => {\n  validatePath(path);\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    if (isSet(object)) {\n      object = getNthKey(object, +key);\n    } else if (isMap(object)) {\n      const row = +key;\n      const type = +path[++i] === 0 ? \"key\" : \"value\";\n      const keyOfRow = getNthKey(object, row);\n      switch (type) {\n        case \"key\":\n          object = keyOfRow;\n          break;\n        case \"value\":\n          object = object.get(keyOfRow);\n          break;\n      }\n    } else {\n      object = object[key];\n    }\n  }\n  return object;\n};\nvar setDeep = (object, path, mapper) => {\n  validatePath(path);\n  if (path.length === 0) {\n    return mapper(object);\n  }\n  let parent = object;\n  for (let i = 0; i < path.length - 1; i++) {\n    const key = path[i];\n    if (isArray(parent)) {\n      const index = +key;\n      parent = parent[index];\n    } else if (isPlainObject2(parent)) {\n      parent = parent[key];\n    } else if (isSet(parent)) {\n      const row = +key;\n      parent = getNthKey(parent, row);\n    } else if (isMap(parent)) {\n      const isEnd = i === path.length - 2;\n      if (isEnd) {\n        break;\n      }\n      const row = +key;\n      const type = +path[++i] === 0 ? \"key\" : \"value\";\n      const keyOfRow = getNthKey(parent, row);\n      switch (type) {\n        case \"key\":\n          parent = keyOfRow;\n          break;\n        case \"value\":\n          parent = parent.get(keyOfRow);\n          break;\n      }\n    }\n  }\n  const lastKey = path[path.length - 1];\n  if (isArray(parent)) {\n    parent[+lastKey] = mapper(parent[+lastKey]);\n  } else if (isPlainObject2(parent)) {\n    parent[lastKey] = mapper(parent[lastKey]);\n  }\n  if (isSet(parent)) {\n    const oldValue = getNthKey(parent, +lastKey);\n    const newValue = mapper(oldValue);\n    if (oldValue !== newValue) {\n      parent.delete(oldValue);\n      parent.add(newValue);\n    }\n  }\n  if (isMap(parent)) {\n    const row = +path[path.length - 2];\n    const keyToRow = getNthKey(parent, row);\n    const type = +lastKey === 0 ? \"key\" : \"value\";\n    switch (type) {\n      case \"key\": {\n        const newKey = mapper(keyToRow);\n        parent.set(newKey, parent.get(keyToRow));\n        if (newKey !== keyToRow) {\n          parent.delete(keyToRow);\n        }\n        break;\n      }\n      case \"value\": {\n        parent.set(keyToRow, mapper(parent.get(keyToRow)));\n        break;\n      }\n    }\n  }\n  return object;\n};\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/plainer.js\nfunction traverse(tree, walker2, origin = []) {\n  if (!tree) {\n    return;\n  }\n  if (!isArray(tree)) {\n    forEach(tree, (subtree, key) => traverse(subtree, walker2, [...origin, ...parsePath(key)]));\n    return;\n  }\n  const [nodeValue, children] = tree;\n  if (children) {\n    forEach(children, (child, key) => {\n      traverse(child, walker2, [...origin, ...parsePath(key)]);\n    });\n  }\n  walker2(nodeValue, origin);\n}\nfunction applyValueAnnotations(plain, annotations, superJson) {\n  traverse(annotations, (type, path) => {\n    plain = setDeep(plain, path, (v) => untransformValue(v, type, superJson));\n  });\n  return plain;\n}\nfunction applyReferentialEqualityAnnotations(plain, annotations) {\n  function apply(identicalPaths, path) {\n    const object = getDeep(plain, parsePath(path));\n    identicalPaths.map(parsePath).forEach((identicalObjectPath) => {\n      plain = setDeep(plain, identicalObjectPath, () => object);\n    });\n  }\n  if (isArray(annotations)) {\n    const [root, other] = annotations;\n    root.forEach((identicalPath) => {\n      plain = setDeep(plain, parsePath(identicalPath), () => plain);\n    });\n    if (other) {\n      forEach(other, apply);\n    }\n  } else {\n    forEach(annotations, apply);\n  }\n  return plain;\n}\nvar isDeep = (object, superJson) => isPlainObject2(object) || isArray(object) || isMap(object) || isSet(object) || isInstanceOfRegisteredClass(object, superJson);\nfunction addIdentity(object, path, identities) {\n  const existingSet = identities.get(object);\n  if (existingSet) {\n    existingSet.push(path);\n  } else {\n    identities.set(object, [path]);\n  }\n}\nfunction generateReferentialEqualityAnnotations(identitites, dedupe) {\n  const result = {};\n  let rootEqualityPaths = void 0;\n  identitites.forEach((paths) => {\n    if (paths.length <= 1) {\n      return;\n    }\n    if (!dedupe) {\n      paths = paths.map((path) => path.map(String)).sort((a, b) => a.length - b.length);\n    }\n    const [representativePath, ...identicalPaths] = paths;\n    if (representativePath.length === 0) {\n      rootEqualityPaths = identicalPaths.map(stringifyPath);\n    } else {\n      result[stringifyPath(representativePath)] = identicalPaths.map(stringifyPath);\n    }\n  });\n  if (rootEqualityPaths) {\n    if (isEmptyObject(result)) {\n      return [rootEqualityPaths];\n    } else {\n      return [rootEqualityPaths, result];\n    }\n  } else {\n    return isEmptyObject(result) ? void 0 : result;\n  }\n}\nvar walker = (object, identities, superJson, dedupe, path = [], objectsInThisPath = [], seenObjects = /* @__PURE__ */ new Map()) => {\n  var _a25;\n  const primitive = isPrimitive2(object);\n  if (!primitive) {\n    addIdentity(object, path, identities);\n    const seen = seenObjects.get(object);\n    if (seen) {\n      return dedupe ? {\n        transformedValue: null\n      } : seen;\n    }\n  }\n  if (!isDeep(object, superJson)) {\n    const transformed2 = transformValue(object, superJson);\n    const result2 = transformed2 ? {\n      transformedValue: transformed2.value,\n      annotations: [transformed2.type]\n    } : {\n      transformedValue: object\n    };\n    if (!primitive) {\n      seenObjects.set(object, result2);\n    }\n    return result2;\n  }\n  if (includes(objectsInThisPath, object)) {\n    return {\n      transformedValue: null\n    };\n  }\n  const transformationResult = transformValue(object, superJson);\n  const transformed = (_a25 = transformationResult == null ? void 0 : transformationResult.value) != null ? _a25 : object;\n  const transformedValue = isArray(transformed) ? [] : {};\n  const innerAnnotations = {};\n  forEach(transformed, (value, index) => {\n    if (index === \"__proto__\" || index === \"constructor\" || index === \"prototype\") {\n      throw new Error(`Detected property ${index}. This is a prototype pollution risk, please remove it from your object.`);\n    }\n    const recursiveResult = walker(value, identities, superJson, dedupe, [...path, index], [...objectsInThisPath, object], seenObjects);\n    transformedValue[index] = recursiveResult.transformedValue;\n    if (isArray(recursiveResult.annotations)) {\n      innerAnnotations[index] = recursiveResult.annotations;\n    } else if (isPlainObject2(recursiveResult.annotations)) {\n      forEach(recursiveResult.annotations, (tree, key) => {\n        innerAnnotations[escapeKey(index) + \".\" + key] = tree;\n      });\n    }\n  });\n  const result = isEmptyObject(innerAnnotations) ? {\n    transformedValue,\n    annotations: !!transformationResult ? [transformationResult.type] : void 0\n  } : {\n    transformedValue,\n    annotations: !!transformationResult ? [transformationResult.type, innerAnnotations] : innerAnnotations\n  };\n  if (!primitive) {\n    seenObjects.set(object, result);\n  }\n  return result;\n};\n\n// ../../node_modules/.pnpm/copy-anything@3.0.5/node_modules/copy-anything/dist/index.js\ninit_esm_shims();\n\n// ../../node_modules/.pnpm/is-what@4.1.16/node_modules/is-what/dist/index.js\ninit_esm_shims();\nfunction getType2(payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1);\n}\nfunction isArray2(payload) {\n  return getType2(payload) === \"Array\";\n}\nfunction isPlainObject3(payload) {\n  if (getType2(payload) !== \"Object\")\n    return false;\n  const prototype = Object.getPrototypeOf(payload);\n  return !!prototype && prototype.constructor === Object && prototype === Object.prototype;\n}\nfunction isNull2(payload) {\n  return getType2(payload) === \"Null\";\n}\nfunction isOneOf(a, b, c, d, e) {\n  return (value) => a(value) || b(value) || !!c && c(value) || !!d && d(value) || !!e && e(value);\n}\nfunction isUndefined2(payload) {\n  return getType2(payload) === \"Undefined\";\n}\nvar isNullOrUndefined = isOneOf(isNull2, isUndefined2);\n\n// ../../node_modules/.pnpm/copy-anything@3.0.5/node_modules/copy-anything/dist/index.js\nfunction assignProp(carry, key, newVal, originalObject, includeNonenumerable) {\n  const propType = {}.propertyIsEnumerable.call(originalObject, key) ? \"enumerable\" : \"nonenumerable\";\n  if (propType === \"enumerable\")\n    carry[key] = newVal;\n  if (includeNonenumerable && propType === \"nonenumerable\") {\n    Object.defineProperty(carry, key, {\n      value: newVal,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nfunction copy(target22, options = {}) {\n  if (isArray2(target22)) {\n    return target22.map((item) => copy(item, options));\n  }\n  if (!isPlainObject3(target22)) {\n    return target22;\n  }\n  const props = Object.getOwnPropertyNames(target22);\n  const symbols = Object.getOwnPropertySymbols(target22);\n  return [...props, ...symbols].reduce((carry, key) => {\n    if (isArray2(options.props) && !options.props.includes(key)) {\n      return carry;\n    }\n    const val = target22[key];\n    const newVal = copy(val, options);\n    assignProp(carry, key, newVal, target22, options.nonenumerable);\n    return carry;\n  }, {});\n}\n\n// ../../node_modules/.pnpm/superjson@2.2.2/node_modules/superjson/dist/index.js\nvar SuperJSON = class {\n  /**\n   * @param dedupeReferentialEqualities  If true, SuperJSON will make sure only one instance of referentially equal objects are serialized and the rest are replaced with `null`.\n   */\n  constructor({ dedupe = false } = {}) {\n    this.classRegistry = new ClassRegistry();\n    this.symbolRegistry = new Registry((s) => {\n      var _a25;\n      return (_a25 = s.description) != null ? _a25 : \"\";\n    });\n    this.customTransformerRegistry = new CustomTransformerRegistry();\n    this.allowedErrorProps = [];\n    this.dedupe = dedupe;\n  }\n  serialize(object) {\n    const identities = /* @__PURE__ */ new Map();\n    const output = walker(object, identities, this, this.dedupe);\n    const res = {\n      json: output.transformedValue\n    };\n    if (output.annotations) {\n      res.meta = {\n        ...res.meta,\n        values: output.annotations\n      };\n    }\n    const equalityAnnotations = generateReferentialEqualityAnnotations(identities, this.dedupe);\n    if (equalityAnnotations) {\n      res.meta = {\n        ...res.meta,\n        referentialEqualities: equalityAnnotations\n      };\n    }\n    return res;\n  }\n  deserialize(payload) {\n    const { json, meta } = payload;\n    let result = copy(json);\n    if (meta == null ? void 0 : meta.values) {\n      result = applyValueAnnotations(result, meta.values, this);\n    }\n    if (meta == null ? void 0 : meta.referentialEqualities) {\n      result = applyReferentialEqualityAnnotations(result, meta.referentialEqualities);\n    }\n    return result;\n  }\n  stringify(object) {\n    return JSON.stringify(this.serialize(object));\n  }\n  parse(string) {\n    return this.deserialize(JSON.parse(string));\n  }\n  registerClass(v, options) {\n    this.classRegistry.register(v, options);\n  }\n  registerSymbol(v, identifier) {\n    this.symbolRegistry.register(v, identifier);\n  }\n  registerCustom(transformer, name) {\n    this.customTransformerRegistry.register({\n      name,\n      ...transformer\n    });\n  }\n  allowErrorProps(...props) {\n    this.allowedErrorProps.push(...props);\n  }\n};\nSuperJSON.defaultInstance = new SuperJSON();\nSuperJSON.serialize = SuperJSON.defaultInstance.serialize.bind(SuperJSON.defaultInstance);\nSuperJSON.deserialize = SuperJSON.defaultInstance.deserialize.bind(SuperJSON.defaultInstance);\nSuperJSON.stringify = SuperJSON.defaultInstance.stringify.bind(SuperJSON.defaultInstance);\nSuperJSON.parse = SuperJSON.defaultInstance.parse.bind(SuperJSON.defaultInstance);\nSuperJSON.registerClass = SuperJSON.defaultInstance.registerClass.bind(SuperJSON.defaultInstance);\nSuperJSON.registerSymbol = SuperJSON.defaultInstance.registerSymbol.bind(SuperJSON.defaultInstance);\nSuperJSON.registerCustom = SuperJSON.defaultInstance.registerCustom.bind(SuperJSON.defaultInstance);\nSuperJSON.allowErrorProps = SuperJSON.defaultInstance.allowErrorProps.bind(SuperJSON.defaultInstance);\nvar serialize = SuperJSON.serialize;\nvar deserialize = SuperJSON.deserialize;\nvar stringify = SuperJSON.stringify;\nvar parse = SuperJSON.parse;\nvar registerClass = SuperJSON.registerClass;\nvar registerCustom = SuperJSON.registerCustom;\nvar registerSymbol = SuperJSON.registerSymbol;\nvar allowErrorProps = SuperJSON.allowErrorProps;\n\n// src/messaging/presets/broadcast-channel/context.ts\ninit_esm_shims();\nvar __DEVTOOLS_KIT_BROADCAST_MESSAGING_EVENT_KEY = \"__devtools-kit-broadcast-messaging-event-key__\";\n\n// src/messaging/presets/broadcast-channel/index.ts\nvar BROADCAST_CHANNEL_NAME = \"__devtools-kit:broadcast-channel__\";\nfunction createBroadcastChannel() {\n  const channel = new BroadcastChannel(BROADCAST_CHANNEL_NAME);\n  return {\n    post: (data) => {\n      channel.postMessage(SuperJSON.stringify({\n        event: __DEVTOOLS_KIT_BROADCAST_MESSAGING_EVENT_KEY,\n        data\n      }));\n    },\n    on: (handler) => {\n      channel.onmessage = (event) => {\n        const parsed = SuperJSON.parse(event.data);\n        if (parsed.event === __DEVTOOLS_KIT_BROADCAST_MESSAGING_EVENT_KEY) {\n          handler(parsed.data);\n        }\n      };\n    }\n  };\n}\n\n// src/messaging/presets/electron/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/electron/client.ts\ninit_esm_shims();\n\n// src/messaging/presets/electron/context.ts\ninit_esm_shims();\n\nvar __ELECTRON_CLIENT_CONTEXT__ = \"electron:client-context\";\nvar __ELECTRON_RPOXY_CONTEXT__ = \"electron:proxy-context\";\nvar __ELECTRON_SERVER_CONTEXT__ = \"electron:server-context\";\nvar __DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__ = {\n  // client\n  CLIENT_TO_PROXY: \"client->proxy\",\n  // on: proxy->client\n  // proxy\n  PROXY_TO_CLIENT: \"proxy->client\",\n  // on: server->proxy\n  PROXY_TO_SERVER: \"proxy->server\",\n  // on: client->proxy\n  // server\n  SERVER_TO_PROXY: \"server->proxy\"\n  // on: proxy->server\n};\nfunction getElectronClientContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_CLIENT_CONTEXT__];\n}\nfunction setElectronClientContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_CLIENT_CONTEXT__] = context;\n}\nfunction getElectronProxyContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_RPOXY_CONTEXT__];\n}\nfunction setElectronProxyContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_RPOXY_CONTEXT__] = context;\n}\nfunction getElectronServerContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_SERVER_CONTEXT__];\n}\nfunction setElectronServerContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__ELECTRON_SERVER_CONTEXT__] = context;\n}\n\n// src/messaging/presets/electron/client.ts\nfunction createElectronClientChannel() {\n  const socket = getElectronClientContext();\n  return {\n    post: (data) => {\n      socket.emit(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.CLIENT_TO_PROXY, SuperJSON.stringify(data));\n    },\n    on: (handler) => {\n      socket.on(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.PROXY_TO_CLIENT, (e) => {\n        handler(SuperJSON.parse(e));\n      });\n    }\n  };\n}\n\n// src/messaging/presets/electron/proxy.ts\ninit_esm_shims();\nfunction createElectronProxyChannel() {\n  const socket = getElectronProxyContext();\n  return {\n    post: (data) => {\n    },\n    on: (handler) => {\n      socket.on(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.SERVER_TO_PROXY, (data) => {\n        socket.broadcast.emit(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.PROXY_TO_CLIENT, data);\n      });\n      socket.on(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.CLIENT_TO_PROXY, (data) => {\n        socket.broadcast.emit(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.PROXY_TO_SERVER, data);\n      });\n    }\n  };\n}\n\n// src/messaging/presets/electron/server.ts\ninit_esm_shims();\nfunction createElectronServerChannel() {\n  const socket = getElectronServerContext();\n  return {\n    post: (data) => {\n      socket.emit(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.SERVER_TO_PROXY, SuperJSON.stringify(data));\n    },\n    on: (handler) => {\n      socket.on(__DEVTOOLS_KIT_ELECTRON_MESSAGING_EVENT_KEY__.PROXY_TO_SERVER, (data) => {\n        handler(SuperJSON.parse(data));\n      });\n    }\n  };\n}\n\n// src/messaging/presets/extension/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/extension/client.ts\ninit_esm_shims();\n\n// src/messaging/presets/extension/context.ts\ninit_esm_shims();\n\nvar __EXTENSION_CLIENT_CONTEXT__ = \"electron:client-context\";\nvar __DEVTOOLS_KIT_EXTENSION_MESSAGING_EVENT_KEY__ = {\n  // client\n  CLIENT_TO_PROXY: \"client->proxy\",\n  // on: proxy->client\n  // proxy\n  PROXY_TO_CLIENT: \"proxy->client\",\n  // on: server->proxy\n  PROXY_TO_SERVER: \"proxy->server\",\n  // on: client->proxy\n  // server\n  SERVER_TO_PROXY: \"server->proxy\"\n  // on: proxy->server\n};\nfunction getExtensionClientContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__EXTENSION_CLIENT_CONTEXT__];\n}\nfunction setExtensionClientContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__EXTENSION_CLIENT_CONTEXT__] = context;\n}\n\n// src/messaging/presets/extension/client.ts\nfunction createExtensionClientChannel() {\n  let disconnected = false;\n  let port = null;\n  let reconnectTimer = null;\n  let onMessageHandler = null;\n  function connect() {\n    try {\n      clearTimeout(reconnectTimer);\n      port = chrome.runtime.connect({\n        name: `${chrome.devtools.inspectedWindow.tabId}`\n      });\n      setExtensionClientContext(port);\n      disconnected = false;\n      port == null ? void 0 : port.onMessage.addListener(onMessageHandler);\n      port.onDisconnect.addListener(() => {\n        disconnected = true;\n        port == null ? void 0 : port.onMessage.removeListener(onMessageHandler);\n        reconnectTimer = setTimeout(connect, 1e3);\n      });\n    } catch (e) {\n      disconnected = true;\n    }\n  }\n  connect();\n  return {\n    post: (data) => {\n      if (disconnected) {\n        return;\n      }\n      port == null ? void 0 : port.postMessage(SuperJSON.stringify(data));\n    },\n    on: (handler) => {\n      onMessageHandler = (data) => {\n        if (disconnected) {\n          return;\n        }\n        handler(SuperJSON.parse(data));\n      };\n      port == null ? void 0 : port.onMessage.addListener(onMessageHandler);\n    }\n  };\n}\n\n// src/messaging/presets/extension/proxy.ts\ninit_esm_shims();\nfunction createExtensionProxyChannel() {\n  const port = chrome.runtime.connect({\n    name: \"content-script\"\n  });\n  function sendMessageToUserApp(payload) {\n    window.postMessage({\n      source: __DEVTOOLS_KIT_EXTENSION_MESSAGING_EVENT_KEY__.PROXY_TO_SERVER,\n      payload\n    }, \"*\");\n  }\n  function sendMessageToDevToolsClient(e) {\n    if (e.data && e.data.source === __DEVTOOLS_KIT_EXTENSION_MESSAGING_EVENT_KEY__.SERVER_TO_PROXY) {\n      try {\n        port.postMessage(e.data.payload);\n      } catch (e2) {\n      }\n    }\n  }\n  port.onMessage.addListener(sendMessageToUserApp);\n  window.addEventListener(\"message\", sendMessageToDevToolsClient);\n  port.onDisconnect.addListener(() => {\n    window.removeEventListener(\"message\", sendMessageToDevToolsClient);\n    sendMessageToUserApp(SuperJSON.stringify({\n      event: \"shutdown\"\n    }));\n  });\n  sendMessageToUserApp(SuperJSON.stringify({\n    event: \"init\"\n  }));\n  return {\n    post: (data) => {\n    },\n    on: (handler) => {\n    }\n  };\n}\n\n// src/messaging/presets/extension/server.ts\ninit_esm_shims();\nfunction createExtensionServerChannel() {\n  return {\n    post: (data) => {\n      window.postMessage({\n        source: __DEVTOOLS_KIT_EXTENSION_MESSAGING_EVENT_KEY__.SERVER_TO_PROXY,\n        payload: SuperJSON.stringify(data)\n      }, \"*\");\n    },\n    on: (handler) => {\n      const listener = (event) => {\n        if (event.data.source === __DEVTOOLS_KIT_EXTENSION_MESSAGING_EVENT_KEY__.PROXY_TO_SERVER && event.data.payload) {\n          handler(SuperJSON.parse(event.data.payload));\n        }\n      };\n      window.addEventListener(\"message\", listener);\n      return () => {\n        window.removeEventListener(\"message\", listener);\n      };\n    }\n  };\n}\n\n// src/messaging/presets/iframe/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/iframe/client.ts\ninit_esm_shims();\n\n\n// src/messaging/presets/iframe/context.ts\ninit_esm_shims();\n\nvar __DEVTOOLS_KIT_IFRAME_MESSAGING_EVENT_KEY = \"__devtools-kit-iframe-messaging-event-key__\";\nvar __IFRAME_SERVER_CONTEXT__ = \"iframe:server-context\";\nfunction getIframeServerContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__IFRAME_SERVER_CONTEXT__];\n}\nfunction setIframeServerContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__IFRAME_SERVER_CONTEXT__] = context;\n}\n\n// src/messaging/presets/iframe/client.ts\nfunction createIframeClientChannel() {\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isBrowser) {\n    return {\n      post: (data) => {\n      },\n      on: (handler) => {\n      }\n    };\n  }\n  return {\n    post: (data) => window.parent.postMessage(SuperJSON.stringify({\n      event: __DEVTOOLS_KIT_IFRAME_MESSAGING_EVENT_KEY,\n      data\n    }), \"*\"),\n    on: (handler) => window.addEventListener(\"message\", (event) => {\n      try {\n        const parsed = SuperJSON.parse(event.data);\n        if (event.source === window.parent && parsed.event === __DEVTOOLS_KIT_IFRAME_MESSAGING_EVENT_KEY) {\n          handler(parsed.data);\n        }\n      } catch (e) {\n      }\n    })\n  };\n}\n\n// src/messaging/presets/iframe/server.ts\ninit_esm_shims();\n\nfunction createIframeServerChannel() {\n  if (!_vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.isBrowser) {\n    return {\n      post: (data) => {\n      },\n      on: (handler) => {\n      }\n    };\n  }\n  return {\n    post: (data) => {\n      var _a25;\n      const iframe = getIframeServerContext();\n      (_a25 = iframe == null ? void 0 : iframe.contentWindow) == null ? void 0 : _a25.postMessage(SuperJSON.stringify({\n        event: __DEVTOOLS_KIT_IFRAME_MESSAGING_EVENT_KEY,\n        data\n      }), \"*\");\n    },\n    on: (handler) => {\n      window.addEventListener(\"message\", (event) => {\n        const iframe = getIframeServerContext();\n        try {\n          const parsed = SuperJSON.parse(event.data);\n          if (event.source === (iframe == null ? void 0 : iframe.contentWindow) && parsed.event === __DEVTOOLS_KIT_IFRAME_MESSAGING_EVENT_KEY) {\n            handler(parsed.data);\n          }\n        } catch (e) {\n        }\n      });\n    }\n  };\n}\n\n// src/messaging/presets/vite/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/vite/client.ts\ninit_esm_shims();\n\n// src/messaging/presets/vite/context.ts\ninit_esm_shims();\n\nvar __DEVTOOLS_KIT_VITE_MESSAGING_EVENT_KEY = \"__devtools-kit-vite-messaging-event-key__\";\nvar __VITE_CLIENT_CONTEXT__ = \"vite:client-context\";\nvar __VITE_SERVER_CONTEXT__ = \"vite:server-context\";\nfunction getViteClientContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__VITE_CLIENT_CONTEXT__];\n}\nfunction setViteClientContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__VITE_CLIENT_CONTEXT__] = context;\n}\nfunction getViteServerContext() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__VITE_SERVER_CONTEXT__];\n}\nfunction setViteServerContext(context) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target[__VITE_SERVER_CONTEXT__] = context;\n}\n\n// src/messaging/presets/vite/client.ts\nfunction createViteClientChannel() {\n  const client = getViteClientContext();\n  return {\n    post: (data) => {\n      client == null ? void 0 : client.send(__DEVTOOLS_KIT_VITE_MESSAGING_EVENT_KEY, SuperJSON.stringify(data));\n    },\n    on: (handler) => {\n      client == null ? void 0 : client.on(__DEVTOOLS_KIT_VITE_MESSAGING_EVENT_KEY, (event) => {\n        handler(SuperJSON.parse(event));\n      });\n    }\n  };\n}\n\n// src/messaging/presets/vite/server.ts\ninit_esm_shims();\nfunction createViteServerChannel() {\n  var _a25;\n  const viteServer = getViteServerContext();\n  const ws = (_a25 = viteServer.hot) != null ? _a25 : viteServer.ws;\n  return {\n    post: (data) => ws == null ? void 0 : ws.send(__DEVTOOLS_KIT_VITE_MESSAGING_EVENT_KEY, SuperJSON.stringify(data)),\n    on: (handler) => ws == null ? void 0 : ws.on(__DEVTOOLS_KIT_VITE_MESSAGING_EVENT_KEY, (event) => {\n      handler(SuperJSON.parse(event));\n    })\n  };\n}\n\n// src/messaging/presets/ws/index.ts\ninit_esm_shims();\n\n// src/messaging/presets/ws/client.ts\ninit_esm_shims();\n\n// src/messaging/presets/ws/context.ts\ninit_esm_shims();\n\n\n// src/messaging/presets/ws/server.ts\ninit_esm_shims();\n\n// src/messaging/index.ts\nvar _a19, _b19;\n(_b19 = (_a19 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_MESSAGE_CHANNELS__) != null ? _b19 : _a19.__VUE_DEVTOOLS_KIT_MESSAGE_CHANNELS__ = [];\nvar _a20, _b20;\n(_b20 = (_a20 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_RPC_CLIENT__) != null ? _b20 : _a20.__VUE_DEVTOOLS_KIT_RPC_CLIENT__ = null;\nvar _a21, _b21;\n(_b21 = (_a21 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_RPC_SERVER__) != null ? _b21 : _a21.__VUE_DEVTOOLS_KIT_RPC_SERVER__ = null;\nvar _a22, _b22;\n(_b22 = (_a22 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_VITE_RPC_CLIENT__) != null ? _b22 : _a22.__VUE_DEVTOOLS_KIT_VITE_RPC_CLIENT__ = null;\nvar _a23, _b23;\n(_b23 = (_a23 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_VITE_RPC_SERVER__) != null ? _b23 : _a23.__VUE_DEVTOOLS_KIT_VITE_RPC_SERVER__ = null;\nvar _a24, _b24;\n(_b24 = (_a24 = _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target).__VUE_DEVTOOLS_KIT_BROADCAST_RPC_SERVER__) != null ? _b24 : _a24.__VUE_DEVTOOLS_KIT_BROADCAST_RPC_SERVER__ = null;\nfunction setRpcClientToGlobal(rpc) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_RPC_CLIENT__ = rpc;\n}\nfunction setRpcServerToGlobal(rpc) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_RPC_SERVER__ = rpc;\n}\nfunction getRpcClient() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_RPC_CLIENT__;\n}\nfunction getRpcServer() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_RPC_SERVER__;\n}\nfunction setViteRpcClientToGlobal(rpc) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_VITE_RPC_CLIENT__ = rpc;\n}\nfunction setViteRpcServerToGlobal(rpc) {\n  _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_VITE_RPC_SERVER__ = rpc;\n}\nfunction getViteRpcClient() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_VITE_RPC_CLIENT__;\n}\nfunction getViteRpcServer() {\n  return _vue_devtools_shared__WEBPACK_IMPORTED_MODULE_0__.target.__VUE_DEVTOOLS_KIT_VITE_RPC_SERVER__;\n}\nfunction getChannel(preset, host = \"client\") {\n  const channel = {\n    iframe: {\n      client: createIframeClientChannel,\n      server: createIframeServerChannel\n    }[host],\n    electron: {\n      client: createElectronClientChannel,\n      proxy: createElectronProxyChannel,\n      server: createElectronServerChannel\n    }[host],\n    vite: {\n      client: createViteClientChannel,\n      server: createViteServerChannel\n    }[host],\n    broadcast: {\n      client: createBroadcastChannel,\n      server: createBroadcastChannel\n    }[host],\n    extension: {\n      client: createExtensionClientChannel,\n      proxy: createExtensionProxyChannel,\n      server: createExtensionServerChannel\n    }[host]\n  }[preset];\n  return channel();\n}\nfunction createRpcClient(functions, options = {}) {\n  const { channel: _channel, options: _options, preset } = options;\n  const channel = preset ? getChannel(preset) : _channel;\n  const rpc = (0,birpc__WEBPACK_IMPORTED_MODULE_3__.createBirpc)(functions, {\n    ..._options,\n    ...channel,\n    timeout: -1\n  });\n  if (preset === \"vite\") {\n    setViteRpcClientToGlobal(rpc);\n    return;\n  }\n  setRpcClientToGlobal(rpc);\n  return rpc;\n}\nfunction createRpcServer(functions, options = {}) {\n  const { channel: _channel, options: _options, preset } = options;\n  const channel = preset ? getChannel(preset, \"server\") : _channel;\n  const rpcServer = getRpcServer();\n  if (!rpcServer) {\n    const group = (0,birpc__WEBPACK_IMPORTED_MODULE_3__.createBirpcGroup)(functions, [channel], {\n      ..._options,\n      timeout: -1\n    });\n    if (preset === \"vite\") {\n      setViteRpcServerToGlobal(group);\n      return;\n    }\n    setRpcServerToGlobal(group);\n  } else {\n    rpcServer.updateChannels((channels) => {\n      channels.push(channel);\n    });\n  }\n}\nfunction createRpcProxy(options = {}) {\n  const { channel: _channel, options: _options, preset } = options;\n  const channel = preset ? getChannel(preset, \"proxy\") : _channel;\n  return (0,birpc__WEBPACK_IMPORTED_MODULE_3__.createBirpc)({}, {\n    ..._options,\n    ...channel,\n    timeout: -1\n  });\n}\n\n// src/shared/index.ts\ninit_esm_shims();\n\n// src/shared/env.ts\ninit_esm_shims();\n\n// src/shared/time.ts\ninit_esm_shims();\n\n// src/shared/util.ts\ninit_esm_shims();\n\n// src/core/component/state/replacer.ts\ninit_esm_shims();\n\n// src/core/component/state/custom.ts\ninit_esm_shims();\nfunction getFunctionDetails(func) {\n  let string = \"\";\n  let matches = null;\n  try {\n    string = Function.prototype.toString.call(func);\n    matches = String.prototype.match.call(string, /\\([\\s\\S]*?\\)/);\n  } catch (e) {\n  }\n  const match = matches && matches[0];\n  const args = typeof match === \"string\" ? match : \"(?)\";\n  const name = typeof func.name === \"string\" ? func.name : \"\";\n  return {\n    _custom: {\n      type: \"function\",\n      displayText: `<span style=\"opacity:.8;margin-right:5px;\">function</span> <span style=\"white-space:nowrap;\">${escape(name)}${args}</span>`,\n      tooltipText: string.trim() ? `<pre>${string}</pre>` : null\n    }\n  };\n}\nfunction getBigIntDetails(val) {\n  const stringifiedBigInt = BigInt.prototype.toString.call(val);\n  return {\n    _custom: {\n      type: \"bigint\",\n      displayText: `BigInt(${stringifiedBigInt})`,\n      value: stringifiedBigInt\n    }\n  };\n}\nfunction getDateDetails(val) {\n  const date = new Date(val.getTime());\n  date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n  return {\n    _custom: {\n      type: \"date\",\n      displayText: Date.prototype.toString.call(val),\n      value: date.toISOString().slice(0, -1)\n    }\n  };\n}\nfunction getMapDetails(val) {\n  const list = Object.fromEntries(val);\n  return {\n    _custom: {\n      type: \"map\",\n      displayText: \"Map\",\n      value: list,\n      readOnly: true,\n      fields: {\n        abstract: true\n      }\n    }\n  };\n}\nfunction getSetDetails(val) {\n  const list = Array.from(val);\n  return {\n    _custom: {\n      type: \"set\",\n      displayText: `Set[${list.length}]`,\n      value: list,\n      readOnly: true\n    }\n  };\n}\nfunction getCaughtGetters(store) {\n  const getters = {};\n  const origGetters = store.getters || {};\n  const keys = Object.keys(origGetters);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    Object.defineProperty(getters, key, {\n      enumerable: true,\n      get: () => {\n        try {\n          return origGetters[key];\n        } catch (e) {\n          return e;\n        }\n      }\n    });\n  }\n  return getters;\n}\nfunction reduceStateList(list) {\n  if (!list.length)\n    return void 0;\n  return list.reduce((map, item) => {\n    const key = item.type || \"data\";\n    const obj = map[key] = map[key] || {};\n    obj[item.key] = item.value;\n    return map;\n  }, {});\n}\nfunction namedNodeMapToObject(map) {\n  const result = {};\n  const l = map.length;\n  for (let i = 0; i < l; i++) {\n    const node = map.item(i);\n    result[node.name] = node.value;\n  }\n  return result;\n}\nfunction getStoreDetails(store) {\n  return {\n    _custom: {\n      type: \"store\",\n      displayText: \"Store\",\n      value: {\n        state: store.state,\n        getters: getCaughtGetters(store)\n      },\n      fields: {\n        abstract: true\n      }\n    }\n  };\n}\nfunction getRouterDetails(router) {\n  return {\n    _custom: {\n      type: \"router\",\n      displayText: \"VueRouter\",\n      value: {\n        options: router.options,\n        currentRoute: router.currentRoute\n      },\n      fields: {\n        abstract: true\n      }\n    }\n  };\n}\nfunction getInstanceDetails(instance) {\n  if (instance._)\n    instance = instance._;\n  const state = processInstanceState(instance);\n  return {\n    _custom: {\n      type: \"component\",\n      id: instance.__VUE_DEVTOOLS_NEXT_UID__,\n      displayText: getInstanceName(instance),\n      tooltipText: \"Component instance\",\n      value: reduceStateList(state),\n      fields: {\n        abstract: true\n      }\n    }\n  };\n}\nfunction getComponentDefinitionDetails(definition) {\n  let display = getComponentName(definition);\n  if (display) {\n    if (definition.name && definition.__file)\n      display += ` <span>(${definition.__file})</span>`;\n  } else {\n    display = \"<i>Unknown Component</i>\";\n  }\n  return {\n    _custom: {\n      type: \"component-definition\",\n      displayText: display,\n      tooltipText: \"Component definition\",\n      ...definition.__file ? {\n        file: definition.__file\n      } : {}\n    }\n  };\n}\nfunction getHTMLElementDetails(value) {\n  try {\n    return {\n      _custom: {\n        type: \"HTMLElement\",\n        displayText: `<span class=\"opacity-30\">&lt;</span><span class=\"text-blue-500\">${value.tagName.toLowerCase()}</span><span class=\"opacity-30\">&gt;</span>`,\n        value: namedNodeMapToObject(value.attributes)\n      }\n    };\n  } catch (e) {\n    return {\n      _custom: {\n        type: \"HTMLElement\",\n        displayText: `<span class=\"text-blue-500\">${String(value)}</span>`\n      }\n    };\n  }\n}\nfunction tryGetRefValue(ref) {\n  if (ensurePropertyExists(ref, \"_value\", true)) {\n    return ref._value;\n  }\n  if (ensurePropertyExists(ref, \"value\", true)) {\n    return ref.value;\n  }\n}\nfunction getObjectDetails(object) {\n  var _a25, _b25, _c, _d;\n  const info = getSetupStateType(object);\n  const isState = info.ref || info.computed || info.reactive;\n  if (isState) {\n    const stateTypeName = info.computed ? \"Computed\" : info.ref ? \"Ref\" : info.reactive ? \"Reactive\" : null;\n    const value = toRaw2(info.reactive ? object : tryGetRefValue(object));\n    const raw = ensurePropertyExists(object, \"effect\") ? ((_b25 = (_a25 = object.effect) == null ? void 0 : _a25.raw) == null ? void 0 : _b25.toString()) || ((_d = (_c = object.effect) == null ? void 0 : _c.fn) == null ? void 0 : _d.toString()) : null;\n    return {\n      _custom: {\n        type: stateTypeName == null ? void 0 : stateTypeName.toLowerCase(),\n        stateTypeName,\n        value,\n        ...raw ? { tooltipText: `<span class=\"font-mono\">${raw}</span>` } : {}\n      }\n    };\n  }\n  if (ensurePropertyExists(object, \"__asyncLoader\") && typeof object.__asyncLoader === \"function\") {\n    return {\n      _custom: {\n        type: \"component-definition\",\n        display: \"Async component definition\"\n      }\n    };\n  }\n}\n\n// src/core/component/state/replacer.ts\nfunction stringifyReplacer(key, _value, depth, seenInstance) {\n  var _a25;\n  if (key === \"compilerOptions\")\n    return;\n  const val = this[key];\n  const type = typeof val;\n  if (Array.isArray(val)) {\n    const l = val.length;\n    if (l > MAX_ARRAY_SIZE) {\n      return {\n        _isArray: true,\n        length: l,\n        items: val.slice(0, MAX_ARRAY_SIZE)\n      };\n    }\n    return val;\n  } else if (typeof val === \"string\") {\n    if (val.length > MAX_STRING_SIZE)\n      return `${val.substring(0, MAX_STRING_SIZE)}... (${val.length} total length)`;\n    else\n      return val;\n  } else if (type === \"undefined\") {\n    return UNDEFINED;\n  } else if (val === Number.POSITIVE_INFINITY) {\n    return INFINITY;\n  } else if (val === Number.NEGATIVE_INFINITY) {\n    return NEGATIVE_INFINITY;\n  } else if (typeof val === \"function\") {\n    return getFunctionDetails(val);\n  } else if (type === \"symbol\") {\n    return `[native Symbol ${Symbol.prototype.toString.call(val)}]`;\n  } else if (typeof val === \"bigint\") {\n    return getBigIntDetails(val);\n  } else if (val !== null && typeof val === \"object\") {\n    const proto = Object.prototype.toString.call(val);\n    if (proto === \"[object Map]\") {\n      return getMapDetails(val);\n    } else if (proto === \"[object Set]\") {\n      return getSetDetails(val);\n    } else if (proto === \"[object RegExp]\") {\n      return `[native RegExp ${RegExp.prototype.toString.call(val)}]`;\n    } else if (proto === \"[object Date]\") {\n      return getDateDetails(val);\n    } else if (proto === \"[object Error]\") {\n      return `[native Error ${val.message}<>${val.stack}]`;\n    } else if (ensurePropertyExists(val, \"state\", true) && ensurePropertyExists(val, \"_vm\", true)) {\n      return getStoreDetails(val);\n    } else if (val.constructor && val.constructor.name === \"VueRouter\") {\n      return getRouterDetails(val);\n    } else if (isVueInstance(val)) {\n      const componentVal = getInstanceDetails(val);\n      const parentInstanceDepth = seenInstance == null ? void 0 : seenInstance.get(val);\n      if (parentInstanceDepth && parentInstanceDepth < depth) {\n        return `[[CircularRef]] <${componentVal._custom.displayText}>`;\n      }\n      seenInstance == null ? void 0 : seenInstance.set(val, depth);\n      return componentVal;\n    } else if (ensurePropertyExists(val, \"render\", true) && typeof val.render === \"function\") {\n      return getComponentDefinitionDetails(val);\n    } else if (val.constructor && val.constructor.name === \"VNode\") {\n      return `[native VNode <${val.tag}>]`;\n    } else if (typeof HTMLElement !== \"undefined\" && val instanceof HTMLElement) {\n      return getHTMLElementDetails(val);\n    } else if (((_a25 = val.constructor) == null ? void 0 : _a25.name) === \"Store\" && \"_wrappedGetters\" in val) {\n      return \"[object Store]\";\n    } else if (ensurePropertyExists(val, \"currentRoute\", true)) {\n      return \"[object Router]\";\n    }\n    const customDetails = getObjectDetails(val);\n    if (customDetails != null)\n      return customDetails;\n  } else if (Number.isNaN(val)) {\n    return NAN;\n  }\n  return sanitize(val);\n}\n\n// src/shared/transfer.ts\ninit_esm_shims();\nvar MAX_SERIALIZED_SIZE = 2 * 1024 * 1024;\nfunction isObject(_data, proto) {\n  return proto === \"[object Object]\";\n}\nfunction isArray3(_data, proto) {\n  return proto === \"[object Array]\";\n}\nfunction isVueReactiveLinkNode(node) {\n  var _a25;\n  const constructorName = (_a25 = node == null ? void 0 : node.constructor) == null ? void 0 : _a25.name;\n  return constructorName === \"Dep\" && \"activeLink\" in node || constructorName === \"Link\" && \"dep\" in node;\n}\nfunction encode(data, replacer, list, seen, depth = 0, seenVueInstance = /* @__PURE__ */ new Map()) {\n  let stored;\n  let key;\n  let value;\n  let i;\n  let l;\n  const seenIndex = seen.get(data);\n  if (seenIndex != null)\n    return seenIndex;\n  const index = list.length;\n  const proto = Object.prototype.toString.call(data);\n  if (isObject(data, proto)) {\n    if (isVueReactiveLinkNode(data)) {\n      return index;\n    }\n    stored = {};\n    seen.set(data, index);\n    list.push(stored);\n    const keys = Object.keys(data);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      if (key === \"compilerOptions\")\n        return index;\n      value = data[key];\n      const isVm = value != null && isObject(value, Object.prototype.toString.call(data)) && isVueInstance(value);\n      try {\n        if (replacer) {\n          value = replacer.call(data, key, value, depth, seenVueInstance);\n        }\n      } catch (e) {\n        value = e;\n      }\n      stored[key] = encode(value, replacer, list, seen, depth + 1, seenVueInstance);\n      if (isVm) {\n        seenVueInstance.delete(value);\n      }\n    }\n  } else if (isArray3(data, proto)) {\n    stored = [];\n    seen.set(data, index);\n    list.push(stored);\n    for (i = 0, l = data.length; i < l; i++) {\n      try {\n        value = data[i];\n        if (replacer)\n          value = replacer.call(data, i, value, depth, seenVueInstance);\n      } catch (e) {\n        value = e;\n      }\n      stored[i] = encode(value, replacer, list, seen, depth + 1, seenVueInstance);\n    }\n  } else {\n    list.push(data);\n  }\n  return index;\n}\nfunction decode(list, reviver2 = null) {\n  let i = list.length;\n  let j, k, data, key, value, proto;\n  while (i--) {\n    data = list[i];\n    proto = Object.prototype.toString.call(data);\n    if (proto === \"[object Object]\") {\n      const keys = Object.keys(data);\n      for (j = 0, k = keys.length; j < k; j++) {\n        key = keys[j];\n        value = list[data[key]];\n        if (reviver2)\n          value = reviver2.call(data, key, value);\n        data[key] = value;\n      }\n    } else if (proto === \"[object Array]\") {\n      for (j = 0, k = data.length; j < k; j++) {\n        value = list[data[j]];\n        if (reviver2)\n          value = reviver2.call(data, j, value);\n        data[j] = value;\n      }\n    }\n  }\n}\nfunction stringifyCircularAutoChunks(data, replacer = null, space = null) {\n  let result;\n  try {\n    result = arguments.length === 1 ? JSON.stringify(data) : JSON.stringify(data, (k, v) => {\n      var _a25;\n      return (_a25 = replacer == null ? void 0 : replacer(k, v)) == null ? void 0 : _a25.call(this);\n    }, space);\n  } catch (e) {\n    result = stringifyStrictCircularAutoChunks(data, replacer, space);\n  }\n  if (result.length > MAX_SERIALIZED_SIZE) {\n    const chunkCount = Math.ceil(result.length / MAX_SERIALIZED_SIZE);\n    const chunks = [];\n    for (let i = 0; i < chunkCount; i++)\n      chunks.push(result.slice(i * MAX_SERIALIZED_SIZE, (i + 1) * MAX_SERIALIZED_SIZE));\n    return chunks;\n  }\n  return result;\n}\nfunction stringifyStrictCircularAutoChunks(data, replacer = null, space = null) {\n  const list = [];\n  encode(data, replacer, list, /* @__PURE__ */ new Map());\n  return space ? ` ${JSON.stringify(list, null, space)}` : ` ${JSON.stringify(list)}`;\n}\nfunction parseCircularAutoChunks(data, reviver2 = null) {\n  if (Array.isArray(data))\n    data = data.join(\"\");\n  const hasCircular = /^\\s/.test(data);\n  if (!hasCircular) {\n    return arguments.length === 1 ? JSON.parse(data) : JSON.parse(data, reviver2);\n  } else {\n    const list = JSON.parse(data);\n    decode(list, reviver2);\n    return list[0];\n  }\n}\n\n// src/shared/util.ts\nfunction stringify2(data) {\n  return stringifyCircularAutoChunks(data, stringifyReplacer);\n}\nfunction parse2(data, revive2 = false) {\n  if (data == void 0)\n    return {};\n  return revive2 ? parseCircularAutoChunks(data, reviver) : parseCircularAutoChunks(data);\n}\n\n// src/index.ts\nvar devtools = {\n  hook,\n  init: () => {\n    initDevTools();\n  },\n  get ctx() {\n    return devtoolsContext;\n  },\n  get api() {\n    return devtoolsContext.api;\n  }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@vue/devtools-kit/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@vue/devtools-shared/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@vue/devtools-shared/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROADCAST_CHANNEL_NAME: () => (/* binding */ BROADCAST_CHANNEL_NAME),\n/* harmony export */   NOOP: () => (/* binding */ NOOP),\n/* harmony export */   VIEW_MODE_STORAGE_KEY: () => (/* binding */ VIEW_MODE_STORAGE_KEY),\n/* harmony export */   VITE_PLUGIN_CLIENT_URL_STORAGE_KEY: () => (/* binding */ VITE_PLUGIN_CLIENT_URL_STORAGE_KEY),\n/* harmony export */   VITE_PLUGIN_DETECTED_STORAGE_KEY: () => (/* binding */ VITE_PLUGIN_DETECTED_STORAGE_KEY),\n/* harmony export */   basename: () => (/* binding */ basename),\n/* harmony export */   camelize: () => (/* binding */ camelize),\n/* harmony export */   classify: () => (/* binding */ classify),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isInChromePanel: () => (/* binding */ isInChromePanel),\n/* harmony export */   isInElectron: () => (/* binding */ isInElectron),\n/* harmony export */   isInIframe: () => (/* binding */ isInIframe),\n/* harmony export */   isInSeparateWindow: () => (/* binding */ isInSeparateWindow),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isNumeric: () => (/* binding */ isNumeric),\n/* harmony export */   isNuxtApp: () => (/* binding */ isNuxtApp),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isUrlString: () => (/* binding */ isUrlString),\n/* harmony export */   kebabize: () => (/* binding */ kebabize),\n/* harmony export */   randomStr: () => (/* binding */ randomStr),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   target: () => (/* binding */ target)\n/* harmony export */ });\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target2) => (target2 = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target2, \"default\", { value: mod, enumerable: true }) : target2,\n  mod\n));\n\n// ../../node_modules/.pnpm/tsup@8.3.5_@microsoft+api-extractor@7.48.1_@types+node@22.10.5__jiti@2.4.2_postcss@8.4.49_tsx_s7k37zks4wtn7x2grzma6lrsfa/node_modules/tsup/assets/esm_shims.js\nvar init_esm_shims = __esm({\n  \"../../node_modules/.pnpm/tsup@8.3.5_@microsoft+api-extractor@7.48.1_@types+node@22.10.5__jiti@2.4.2_postcss@8.4.49_tsx_s7k37zks4wtn7x2grzma6lrsfa/node_modules/tsup/assets/esm_shims.js\"() {\n    \"use strict\";\n  }\n});\n\n// ../../node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/index.js\nvar require_rfdc = __commonJS({\n  \"../../node_modules/.pnpm/rfdc@1.4.1/node_modules/rfdc/index.js\"(exports, module) {\n    \"use strict\";\n    init_esm_shims();\n    module.exports = rfdc2;\n    function copyBuffer(cur) {\n      if (cur instanceof Buffer) {\n        return Buffer.from(cur);\n      }\n      return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);\n    }\n    function rfdc2(opts) {\n      opts = opts || {};\n      if (opts.circles) return rfdcCircles(opts);\n      const constructorHandlers = /* @__PURE__ */ new Map();\n      constructorHandlers.set(Date, (o) => new Date(o));\n      constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));\n      constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));\n      if (opts.constructorHandlers) {\n        for (const handler2 of opts.constructorHandlers) {\n          constructorHandlers.set(handler2[0], handler2[1]);\n        }\n      }\n      let handler = null;\n      return opts.proto ? cloneProto : clone;\n      function cloneArray(a, fn) {\n        const keys = Object.keys(a);\n        const a2 = new Array(keys.length);\n        for (let i = 0; i < keys.length; i++) {\n          const k = keys[i];\n          const cur = a[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            a2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            a2[k] = handler(cur, fn);\n          } else if (ArrayBuffer.isView(cur)) {\n            a2[k] = copyBuffer(cur);\n          } else {\n            a2[k] = fn(cur);\n          }\n        }\n        return a2;\n      }\n      function clone(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, clone);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n          return handler(o, clone);\n        }\n        const o2 = {};\n        for (const k in o) {\n          if (Object.hasOwnProperty.call(o, k) === false) continue;\n          const cur = o[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            o2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            o2[k] = handler(cur, clone);\n          } else if (ArrayBuffer.isView(cur)) {\n            o2[k] = copyBuffer(cur);\n          } else {\n            o2[k] = clone(cur);\n          }\n        }\n        return o2;\n      }\n      function cloneProto(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n          return handler(o, cloneProto);\n        }\n        const o2 = {};\n        for (const k in o) {\n          const cur = o[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            o2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            o2[k] = handler(cur, cloneProto);\n          } else if (ArrayBuffer.isView(cur)) {\n            o2[k] = copyBuffer(cur);\n          } else {\n            o2[k] = cloneProto(cur);\n          }\n        }\n        return o2;\n      }\n    }\n    function rfdcCircles(opts) {\n      const refs = [];\n      const refsNew = [];\n      const constructorHandlers = /* @__PURE__ */ new Map();\n      constructorHandlers.set(Date, (o) => new Date(o));\n      constructorHandlers.set(Map, (o, fn) => new Map(cloneArray(Array.from(o), fn)));\n      constructorHandlers.set(Set, (o, fn) => new Set(cloneArray(Array.from(o), fn)));\n      if (opts.constructorHandlers) {\n        for (const handler2 of opts.constructorHandlers) {\n          constructorHandlers.set(handler2[0], handler2[1]);\n        }\n      }\n      let handler = null;\n      return opts.proto ? cloneProto : clone;\n      function cloneArray(a, fn) {\n        const keys = Object.keys(a);\n        const a2 = new Array(keys.length);\n        for (let i = 0; i < keys.length; i++) {\n          const k = keys[i];\n          const cur = a[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            a2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            a2[k] = handler(cur, fn);\n          } else if (ArrayBuffer.isView(cur)) {\n            a2[k] = copyBuffer(cur);\n          } else {\n            const index = refs.indexOf(cur);\n            if (index !== -1) {\n              a2[k] = refsNew[index];\n            } else {\n              a2[k] = fn(cur);\n            }\n          }\n        }\n        return a2;\n      }\n      function clone(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, clone);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n          return handler(o, clone);\n        }\n        const o2 = {};\n        refs.push(o);\n        refsNew.push(o2);\n        for (const k in o) {\n          if (Object.hasOwnProperty.call(o, k) === false) continue;\n          const cur = o[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            o2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            o2[k] = handler(cur, clone);\n          } else if (ArrayBuffer.isView(cur)) {\n            o2[k] = copyBuffer(cur);\n          } else {\n            const i = refs.indexOf(cur);\n            if (i !== -1) {\n              o2[k] = refsNew[i];\n            } else {\n              o2[k] = clone(cur);\n            }\n          }\n        }\n        refs.pop();\n        refsNew.pop();\n        return o2;\n      }\n      function cloneProto(o) {\n        if (typeof o !== \"object\" || o === null) return o;\n        if (Array.isArray(o)) return cloneArray(o, cloneProto);\n        if (o.constructor !== Object && (handler = constructorHandlers.get(o.constructor))) {\n          return handler(o, cloneProto);\n        }\n        const o2 = {};\n        refs.push(o);\n        refsNew.push(o2);\n        for (const k in o) {\n          const cur = o[k];\n          if (typeof cur !== \"object\" || cur === null) {\n            o2[k] = cur;\n          } else if (cur.constructor !== Object && (handler = constructorHandlers.get(cur.constructor))) {\n            o2[k] = handler(cur, cloneProto);\n          } else if (ArrayBuffer.isView(cur)) {\n            o2[k] = copyBuffer(cur);\n          } else {\n            const i = refs.indexOf(cur);\n            if (i !== -1) {\n              o2[k] = refsNew[i];\n            } else {\n              o2[k] = cloneProto(cur);\n            }\n          }\n        }\n        refs.pop();\n        refsNew.pop();\n        return o2;\n      }\n    }\n  }\n});\n\n// src/index.ts\ninit_esm_shims();\n\n// src/constants.ts\ninit_esm_shims();\nvar VIEW_MODE_STORAGE_KEY = \"__vue-devtools-view-mode__\";\nvar VITE_PLUGIN_DETECTED_STORAGE_KEY = \"__vue-devtools-vite-plugin-detected__\";\nvar VITE_PLUGIN_CLIENT_URL_STORAGE_KEY = \"__vue-devtools-vite-plugin-client-url__\";\nvar BROADCAST_CHANNEL_NAME = \"__vue-devtools-broadcast-channel__\";\n\n// src/env.ts\ninit_esm_shims();\nvar isBrowser = typeof navigator !== \"undefined\";\nvar target = typeof window !== \"undefined\" ? window : typeof globalThis !== \"undefined\" ? globalThis : typeof global !== \"undefined\" ? global : {};\nvar isInChromePanel = typeof target.chrome !== \"undefined\" && !!target.chrome.devtools;\nvar isInIframe = isBrowser && target.self !== target.top;\nvar _a;\nvar isInElectron = typeof navigator !== \"undefined\" && ((_a = navigator.userAgent) == null ? void 0 : _a.toLowerCase().includes(\"electron\"));\nvar isNuxtApp = typeof window !== \"undefined\" && !!window.__NUXT__;\nvar isInSeparateWindow = !isInIframe && !isInChromePanel && !isInElectron;\n\n// src/general.ts\ninit_esm_shims();\nvar import_rfdc = __toESM(require_rfdc(), 1);\nfunction NOOP() {\n}\nvar isNumeric = (str) => `${+str}` === str;\nvar isMacOS = () => (navigator == null ? void 0 : navigator.platform) ? navigator == null ? void 0 : navigator.platform.toLowerCase().includes(\"mac\") : /Macintosh/.test(navigator.userAgent);\nvar classifyRE = /(?:^|[-_/])(\\w)/g;\nvar camelizeRE = /-(\\w)/g;\nvar kebabizeRE = /([a-z0-9])([A-Z])/g;\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : \"\";\n}\nfunction classify(str) {\n  return str && `${str}`.replace(classifyRE, toUpper);\n}\nfunction camelize(str) {\n  return str && str.replace(camelizeRE, toUpper);\n}\nfunction kebabize(str) {\n  return str && str.replace(kebabizeRE, (_, lowerCaseCharacter, upperCaseLetter) => {\n    return `${lowerCaseCharacter}-${upperCaseLetter}`;\n  }).toLowerCase();\n}\nfunction basename(filename, ext) {\n  let normalizedFilename = filename.replace(/^[a-z]:/i, \"\").replace(/\\\\/g, \"/\");\n  if (normalizedFilename.endsWith(`index${ext}`)) {\n    normalizedFilename = normalizedFilename.replace(`/index${ext}`, ext);\n  }\n  const lastSlashIndex = normalizedFilename.lastIndexOf(\"/\");\n  const baseNameWithExt = normalizedFilename.substring(lastSlashIndex + 1);\n  if (ext) {\n    const extIndex = baseNameWithExt.lastIndexOf(ext);\n    return baseNameWithExt.substring(0, extIndex);\n  }\n  return \"\";\n}\nfunction sortByKey(state) {\n  return state && state.slice().sort((a, b) => {\n    if (a.key < b.key)\n      return -1;\n    if (a.key > b.key)\n      return 1;\n    return 0;\n  });\n}\nvar HTTP_URL_RE = /^https?:\\/\\//;\nfunction isUrlString(str) {\n  return str.startsWith(\"/\") || HTTP_URL_RE.test(str);\n}\nvar deepClone = (0, import_rfdc.default)({ circles: true });\nfunction randomStr() {\n  return Math.random().toString(36).slice(2);\n}\nfunction isObject(value) {\n  return typeof value === \"object\" && !Array.isArray(value) && value !== null;\n}\nfunction isArray(value) {\n  return Array.isArray(value);\n}\nfunction isSet(value) {\n  return value instanceof Set;\n}\nfunction isMap(value) {\n  return value instanceof Map;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@vue/devtools-shared/dist/index.js\n");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLGtCQUFrQjtBQUNsQixtQkFBbUI7QUFDbkIscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsU0FBUztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixTQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLFVBQVU7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanM/Mzc3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/birpc/dist/index.mjs":
/*!*******************************************!*\
  !*** ./node_modules/birpc/dist/index.mjs ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TIMEOUT: () => (/* binding */ DEFAULT_TIMEOUT),\n/* harmony export */   cachedMap: () => (/* binding */ cachedMap),\n/* harmony export */   createBirpc: () => (/* binding */ createBirpc),\n/* harmony export */   createBirpcGroup: () => (/* binding */ createBirpcGroup)\n/* harmony export */ });\nconst DEFAULT_TIMEOUT = 6e4;\nfunction defaultSerialize(i) {\n  return i;\n}\nconst defaultDeserialize = defaultSerialize;\nconst { clearTimeout, setTimeout } = globalThis;\nconst random = Math.random.bind(Math);\nfunction createBirpc(functions, options) {\n  const {\n    post,\n    on,\n    off = () => {\n    },\n    eventNames = [],\n    serialize = defaultSerialize,\n    deserialize = defaultDeserialize,\n    resolver,\n    bind = \"rpc\",\n    timeout = DEFAULT_TIMEOUT\n  } = options;\n  const rpcPromiseMap = /* @__PURE__ */ new Map();\n  let _promise;\n  let closed = false;\n  const rpc = new Proxy({}, {\n    get(_, method) {\n      if (method === \"$functions\")\n        return functions;\n      if (method === \"$close\")\n        return close;\n      if (method === \"then\" && !eventNames.includes(\"then\") && !(\"then\" in functions))\n        return void 0;\n      const sendEvent = (...args) => {\n        post(serialize({ m: method, a: args, t: \"q\" }));\n      };\n      if (eventNames.includes(method)) {\n        sendEvent.asEvent = sendEvent;\n        return sendEvent;\n      }\n      const sendCall = async (...args) => {\n        if (closed)\n          throw new Error(`[birpc] rpc is closed, cannot call \"${method}\"`);\n        if (_promise) {\n          try {\n            await _promise;\n          } finally {\n            _promise = void 0;\n          }\n        }\n        return new Promise((resolve, reject) => {\n          const id = nanoid();\n          let timeoutId;\n          if (timeout >= 0) {\n            timeoutId = setTimeout(() => {\n              try {\n                options.onTimeoutError?.(method, args);\n                throw new Error(`[birpc] timeout on calling \"${method}\"`);\n              } catch (e) {\n                reject(e);\n              }\n              rpcPromiseMap.delete(id);\n            }, timeout);\n            if (typeof timeoutId === \"object\")\n              timeoutId = timeoutId.unref?.();\n          }\n          rpcPromiseMap.set(id, { resolve, reject, timeoutId, method });\n          post(serialize({ m: method, a: args, i: id, t: \"q\" }));\n        });\n      };\n      sendCall.asEvent = sendEvent;\n      return sendCall;\n    }\n  });\n  function close() {\n    closed = true;\n    rpcPromiseMap.forEach(({ reject, method }) => {\n      reject(new Error(`[birpc] rpc is closed, cannot call \"${method}\"`));\n    });\n    rpcPromiseMap.clear();\n    off(onMessage);\n  }\n  async function onMessage(data, ...extra) {\n    const msg = deserialize(data);\n    if (msg.t === \"q\") {\n      const { m: method, a: args } = msg;\n      let result, error;\n      const fn = resolver ? resolver(method, functions[method]) : functions[method];\n      if (!fn) {\n        error = new Error(`[birpc] function \"${method}\" not found`);\n      } else {\n        try {\n          result = await fn.apply(bind === \"rpc\" ? rpc : functions, args);\n        } catch (e) {\n          error = e;\n        }\n      }\n      if (msg.i) {\n        if (error && options.onError)\n          options.onError(error, method, args);\n        post(serialize({ t: \"s\", i: msg.i, r: result, e: error }), ...extra);\n      }\n    } else {\n      const { i: ack, r: result, e: error } = msg;\n      const promise = rpcPromiseMap.get(ack);\n      if (promise) {\n        clearTimeout(promise.timeoutId);\n        if (error)\n          promise.reject(error);\n        else\n          promise.resolve(result);\n      }\n      rpcPromiseMap.delete(ack);\n    }\n  }\n  _promise = on(onMessage);\n  return rpc;\n}\nconst cacheMap = /* @__PURE__ */ new WeakMap();\nfunction cachedMap(items, fn) {\n  return items.map((i) => {\n    let r = cacheMap.get(i);\n    if (!r) {\n      r = fn(i);\n      cacheMap.set(i, r);\n    }\n    return r;\n  });\n}\nfunction createBirpcGroup(functions, channels, options = {}) {\n  const getChannels = () => typeof channels === \"function\" ? channels() : channels;\n  const getClients = (channels2 = getChannels()) => cachedMap(channels2, (s) => createBirpc(functions, { ...options, ...s }));\n  const broadcastProxy = new Proxy({}, {\n    get(_, method) {\n      const client = getClients();\n      const callbacks = client.map((c) => c[method]);\n      const sendCall = (...args) => {\n        return Promise.all(callbacks.map((i) => i(...args)));\n      };\n      sendCall.asEvent = (...args) => {\n        callbacks.map((i) => i.asEvent(...args));\n      };\n      return sendCall;\n    }\n  });\n  function updateChannels(fn) {\n    const channels2 = getChannels();\n    fn?.(channels2);\n    return getClients(channels2);\n  }\n  getClients();\n  return {\n    get clients() {\n      return getClients();\n    },\n    functions,\n    updateChannels,\n    broadcast: broadcastProxy,\n    /**\n     * @deprecated use `broadcast`\n     */\n    // @ts-expect-error deprecated\n    boardcast: broadcastProxy\n  };\n}\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\nfunction nanoid(size = 21) {\n  let id = \"\";\n  let i = size;\n  while (i--)\n    id += urlAlphabet[random() * 64 | 0];\n  return id;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/birpc/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = __webpack_require__.g.TYPED_ARRAY_SUPPORT !== undefined\n  ? __webpack_require__.g.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/hookable/dist/index.mjs":
/*!**********************************************!*\
  !*** ./node_modules/hookable/dist/index.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hookable: () => (/* binding */ Hookable),\n/* harmony export */   createDebugger: () => (/* binding */ createDebugger),\n/* harmony export */   createHooks: () => (/* binding */ createHooks),\n/* harmony export */   flatHooks: () => (/* binding */ flatHooks),\n/* harmony export */   mergeHooks: () => (/* binding */ mergeHooks),\n/* harmony export */   parallelCaller: () => (/* binding */ parallelCaller),\n/* harmony export */   serial: () => (/* binding */ serial),\n/* harmony export */   serialCaller: () => (/* binding */ serialCaller)\n/* harmony export */ });\nfunction flatHooks(configHooks, hooks = {}, parentName) {\n  for (const key in configHooks) {\n    const subHook = configHooks[key];\n    const name = parentName ? `${parentName}:${key}` : key;\n    if (typeof subHook === \"object\" && subHook !== null) {\n      flatHooks(subHook, hooks, name);\n    } else if (typeof subHook === \"function\") {\n      hooks[name] = subHook;\n    }\n  }\n  return hooks;\n}\nfunction mergeHooks(...hooks) {\n  const finalHooks = {};\n  for (const hook of hooks) {\n    const flatenHook = flatHooks(hook);\n    for (const key in flatenHook) {\n      if (finalHooks[key]) {\n        finalHooks[key].push(flatenHook[key]);\n      } else {\n        finalHooks[key] = [flatenHook[key]];\n      }\n    }\n  }\n  for (const key in finalHooks) {\n    if (finalHooks[key].length > 1) {\n      const array = finalHooks[key];\n      finalHooks[key] = (...arguments_) => serial(array, (function_) => function_(...arguments_));\n    } else {\n      finalHooks[key] = finalHooks[key][0];\n    }\n  }\n  return finalHooks;\n}\nfunction serial(tasks, function_) {\n  return tasks.reduce(\n    (promise, task) => promise.then(() => function_(task)),\n    Promise.resolve()\n  );\n}\nconst defaultTask = { run: (function_) => function_() };\nconst _createTask = () => defaultTask;\nconst createTask = typeof console.createTask !== \"undefined\" ? console.createTask : _createTask;\nfunction serialTaskCaller(hooks, args) {\n  const name = args.shift();\n  const task = createTask(name);\n  return hooks.reduce(\n    (promise, hookFunction) => promise.then(() => task.run(() => hookFunction(...args))),\n    Promise.resolve()\n  );\n}\nfunction parallelTaskCaller(hooks, args) {\n  const name = args.shift();\n  const task = createTask(name);\n  return Promise.all(hooks.map((hook) => task.run(() => hook(...args))));\n}\nfunction serialCaller(hooks, arguments_) {\n  return hooks.reduce(\n    (promise, hookFunction) => promise.then(() => hookFunction(...arguments_ || [])),\n    Promise.resolve()\n  );\n}\nfunction parallelCaller(hooks, args) {\n  return Promise.all(hooks.map((hook) => hook(...args || [])));\n}\nfunction callEachWith(callbacks, arg0) {\n  for (const callback of [...callbacks]) {\n    callback(arg0);\n  }\n}\n\nclass Hookable {\n  constructor() {\n    this._hooks = {};\n    this._before = void 0;\n    this._after = void 0;\n    this._deprecatedMessages = void 0;\n    this._deprecatedHooks = {};\n    this.hook = this.hook.bind(this);\n    this.callHook = this.callHook.bind(this);\n    this.callHookWith = this.callHookWith.bind(this);\n  }\n  hook(name, function_, options = {}) {\n    if (!name || typeof function_ !== \"function\") {\n      return () => {\n      };\n    }\n    const originalName = name;\n    let dep;\n    while (this._deprecatedHooks[name]) {\n      dep = this._deprecatedHooks[name];\n      name = dep.to;\n    }\n    if (dep && !options.allowDeprecated) {\n      let message = dep.message;\n      if (!message) {\n        message = `${originalName} hook has been deprecated` + (dep.to ? `, please use ${dep.to}` : \"\");\n      }\n      if (!this._deprecatedMessages) {\n        this._deprecatedMessages = /* @__PURE__ */ new Set();\n      }\n      if (!this._deprecatedMessages.has(message)) {\n        console.warn(message);\n        this._deprecatedMessages.add(message);\n      }\n    }\n    if (!function_.name) {\n      try {\n        Object.defineProperty(function_, \"name\", {\n          get: () => \"_\" + name.replace(/\\W+/g, \"_\") + \"_hook_cb\",\n          configurable: true\n        });\n      } catch {\n      }\n    }\n    this._hooks[name] = this._hooks[name] || [];\n    this._hooks[name].push(function_);\n    return () => {\n      if (function_) {\n        this.removeHook(name, function_);\n        function_ = void 0;\n      }\n    };\n  }\n  hookOnce(name, function_) {\n    let _unreg;\n    let _function = (...arguments_) => {\n      if (typeof _unreg === \"function\") {\n        _unreg();\n      }\n      _unreg = void 0;\n      _function = void 0;\n      return function_(...arguments_);\n    };\n    _unreg = this.hook(name, _function);\n    return _unreg;\n  }\n  removeHook(name, function_) {\n    if (this._hooks[name]) {\n      const index = this._hooks[name].indexOf(function_);\n      if (index !== -1) {\n        this._hooks[name].splice(index, 1);\n      }\n      if (this._hooks[name].length === 0) {\n        delete this._hooks[name];\n      }\n    }\n  }\n  deprecateHook(name, deprecated) {\n    this._deprecatedHooks[name] = typeof deprecated === \"string\" ? { to: deprecated } : deprecated;\n    const _hooks = this._hooks[name] || [];\n    delete this._hooks[name];\n    for (const hook of _hooks) {\n      this.hook(name, hook);\n    }\n  }\n  deprecateHooks(deprecatedHooks) {\n    Object.assign(this._deprecatedHooks, deprecatedHooks);\n    for (const name in deprecatedHooks) {\n      this.deprecateHook(name, deprecatedHooks[name]);\n    }\n  }\n  addHooks(configHooks) {\n    const hooks = flatHooks(configHooks);\n    const removeFns = Object.keys(hooks).map(\n      (key) => this.hook(key, hooks[key])\n    );\n    return () => {\n      for (const unreg of removeFns.splice(0, removeFns.length)) {\n        unreg();\n      }\n    };\n  }\n  removeHooks(configHooks) {\n    const hooks = flatHooks(configHooks);\n    for (const key in hooks) {\n      this.removeHook(key, hooks[key]);\n    }\n  }\n  removeAllHooks() {\n    for (const key in this._hooks) {\n      delete this._hooks[key];\n    }\n  }\n  callHook(name, ...arguments_) {\n    arguments_.unshift(name);\n    return this.callHookWith(serialTaskCaller, name, ...arguments_);\n  }\n  callHookParallel(name, ...arguments_) {\n    arguments_.unshift(name);\n    return this.callHookWith(parallelTaskCaller, name, ...arguments_);\n  }\n  callHookWith(caller, name, ...arguments_) {\n    const event = this._before || this._after ? { name, args: arguments_, context: {} } : void 0;\n    if (this._before) {\n      callEachWith(this._before, event);\n    }\n    const result = caller(\n      name in this._hooks ? [...this._hooks[name]] : [],\n      arguments_\n    );\n    if (result instanceof Promise) {\n      return result.finally(() => {\n        if (this._after && event) {\n          callEachWith(this._after, event);\n        }\n      });\n    }\n    if (this._after && event) {\n      callEachWith(this._after, event);\n    }\n    return result;\n  }\n  beforeEach(function_) {\n    this._before = this._before || [];\n    this._before.push(function_);\n    return () => {\n      if (this._before !== void 0) {\n        const index = this._before.indexOf(function_);\n        if (index !== -1) {\n          this._before.splice(index, 1);\n        }\n      }\n    };\n  }\n  afterEach(function_) {\n    this._after = this._after || [];\n    this._after.push(function_);\n    return () => {\n      if (this._after !== void 0) {\n        const index = this._after.indexOf(function_);\n        if (index !== -1) {\n          this._after.splice(index, 1);\n        }\n      }\n    };\n  }\n}\nfunction createHooks() {\n  return new Hookable();\n}\n\nconst isBrowser = typeof window !== \"undefined\";\nfunction createDebugger(hooks, _options = {}) {\n  const options = {\n    inspect: isBrowser,\n    group: isBrowser,\n    filter: () => true,\n    ..._options\n  };\n  const _filter = options.filter;\n  const filter = typeof _filter === \"string\" ? (name) => name.startsWith(_filter) : _filter;\n  const _tag = options.tag ? `[${options.tag}] ` : \"\";\n  const logPrefix = (event) => _tag + event.name + \"\".padEnd(event._id, \"\\0\");\n  const _idCtr = {};\n  const unsubscribeBefore = hooks.beforeEach((event) => {\n    if (filter !== void 0 && !filter(event.name)) {\n      return;\n    }\n    _idCtr[event.name] = _idCtr[event.name] || 0;\n    event._id = _idCtr[event.name]++;\n    console.time(logPrefix(event));\n  });\n  const unsubscribeAfter = hooks.afterEach((event) => {\n    if (filter !== void 0 && !filter(event.name)) {\n      return;\n    }\n    if (options.group) {\n      console.groupCollapsed(event.name);\n    }\n    if (options.inspect) {\n      console.timeLog(logPrefix(event), event.args);\n    } else {\n      console.timeEnd(logPrefix(event));\n    }\n    if (options.group) {\n      console.groupEnd();\n    }\n    _idCtr[event.name]--;\n  });\n  return {\n    /** Stop debugging and remove listeners */\n    close: () => {\n      unsubscribeBefore();\n      unsubscribeAfter();\n    }\n  };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/hookable/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsV0FBVzs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUyxXQUFXOztBQUVwQjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFdBQVc7O0FBRXBCO0FBQ0E7QUFDQSxTQUFTLFVBQVU7O0FBRW5CO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz9lYmMxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/***/ ((module) => {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzP2I2OGUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/perfect-debounce/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/perfect-debounce/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   debounce: () => (/* binding */ debounce)\n/* harmony export */ });\nconst DEBOUNCE_DEFAULTS = {\n  trailing: true\n};\nfunction debounce(fn, wait = 25, options = {}) {\n  options = { ...DEBOUNCE_DEFAULTS, ...options };\n  if (!Number.isFinite(wait)) {\n    throw new TypeError(\"Expected `wait` to be a finite number\");\n  }\n  let leadingValue;\n  let timeout;\n  let resolveList = [];\n  let currentPromise;\n  let trailingArgs;\n  const applyFn = (_this, args) => {\n    currentPromise = _applyPromised(fn, _this, args);\n    currentPromise.finally(() => {\n      currentPromise = null;\n      if (options.trailing && trailingArgs && !timeout) {\n        const promise = applyFn(_this, trailingArgs);\n        trailingArgs = null;\n        return promise;\n      }\n    });\n    return currentPromise;\n  };\n  return function(...args) {\n    if (currentPromise) {\n      if (options.trailing) {\n        trailingArgs = args;\n      }\n      return currentPromise;\n    }\n    return new Promise((resolve) => {\n      const shouldCallNow = !timeout && options.leading;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        timeout = null;\n        const promise = options.leading ? leadingValue : applyFn(this, args);\n        for (const _resolve of resolveList) {\n          _resolve(promise);\n        }\n        resolveList = [];\n      }, wait);\n      if (shouldCallNow) {\n        leadingValue = applyFn(this, args);\n        resolve(leadingValue);\n      } else {\n        resolveList.push(resolve);\n      }\n    });\n  };\n}\nasync function _applyPromised(fn, _this, args) {\n  return await fn.apply(_this, args);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGVyZmVjdC1kZWJvdW5jZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BlcmZlY3QtZGVib3VuY2UvZGlzdC9pbmRleC5tanM/NDZkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUJPVU5DRV9ERUZBVUxUUyA9IHtcbiAgdHJhaWxpbmc6IHRydWVcbn07XG5mdW5jdGlvbiBkZWJvdW5jZShmbiwgd2FpdCA9IDI1LCBvcHRpb25zID0ge30pIHtcbiAgb3B0aW9ucyA9IHsgLi4uREVCT1VOQ0VfREVGQVVMVFMsIC4uLm9wdGlvbnMgfTtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUod2FpdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXhwZWN0ZWQgYHdhaXRgIHRvIGJlIGEgZmluaXRlIG51bWJlclwiKTtcbiAgfVxuICBsZXQgbGVhZGluZ1ZhbHVlO1xuICBsZXQgdGltZW91dDtcbiAgbGV0IHJlc29sdmVMaXN0ID0gW107XG4gIGxldCBjdXJyZW50UHJvbWlzZTtcbiAgbGV0IHRyYWlsaW5nQXJncztcbiAgY29uc3QgYXBwbHlGbiA9IChfdGhpcywgYXJncykgPT4ge1xuICAgIGN1cnJlbnRQcm9taXNlID0gX2FwcGx5UHJvbWlzZWQoZm4sIF90aGlzLCBhcmdzKTtcbiAgICBjdXJyZW50UHJvbWlzZS5maW5hbGx5KCgpID0+IHtcbiAgICAgIGN1cnJlbnRQcm9taXNlID0gbnVsbDtcbiAgICAgIGlmIChvcHRpb25zLnRyYWlsaW5nICYmIHRyYWlsaW5nQXJncyAmJiAhdGltZW91dCkge1xuICAgICAgICBjb25zdCBwcm9taXNlID0gYXBwbHlGbihfdGhpcywgdHJhaWxpbmdBcmdzKTtcbiAgICAgICAgdHJhaWxpbmdBcmdzID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGN1cnJlbnRQcm9taXNlO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmIChjdXJyZW50UHJvbWlzZSkge1xuICAgICAgaWYgKG9wdGlvbnMudHJhaWxpbmcpIHtcbiAgICAgICAgdHJhaWxpbmdBcmdzID0gYXJncztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJyZW50UHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCBzaG91bGRDYWxsTm93ID0gIXRpbWVvdXQgJiYgb3B0aW9ucy5sZWFkaW5nO1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG9wdGlvbnMubGVhZGluZyA/IGxlYWRpbmdWYWx1ZSA6IGFwcGx5Rm4odGhpcywgYXJncyk7XG4gICAgICAgIGZvciAoY29uc3QgX3Jlc29sdmUgb2YgcmVzb2x2ZUxpc3QpIHtcbiAgICAgICAgICBfcmVzb2x2ZShwcm9taXNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlTGlzdCA9IFtdO1xuICAgICAgfSwgd2FpdCk7XG4gICAgICBpZiAoc2hvdWxkQ2FsbE5vdykge1xuICAgICAgICBsZWFkaW5nVmFsdWUgPSBhcHBseUZuKHRoaXMsIGFyZ3MpO1xuICAgICAgICByZXNvbHZlKGxlYWRpbmdWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlTGlzdC5wdXNoKHJlc29sdmUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gX2FwcGx5UHJvbWlzZWQoZm4sIF90aGlzLCBhcmdzKSB7XG4gIHJldHVybiBhd2FpdCBmbi5hcHBseShfdGhpcywgYXJncyk7XG59XG5cbmV4cG9ydCB7IGRlYm91bmNlIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/perfect-debounce/dist/index.mjs\n");

/***/ }),

/***/ "./node_modules/vee-validate/node_modules/@vue/devtools-api/dist/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/vee-validate/node_modules/@vue/devtools-api/dist/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addCustomCommand: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.addCustomCommand),\n/* harmony export */   addCustomTab: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.addCustomTab),\n/* harmony export */   onDevToolsClientConnected: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.onDevToolsClientConnected),\n/* harmony export */   onDevToolsConnected: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.onDevToolsConnected),\n/* harmony export */   removeCustomCommand: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.removeCustomCommand),\n/* harmony export */   setupDevToolsPlugin: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.setupDevToolsPlugin),\n/* harmony export */   setupDevtoolsPlugin: () => (/* reexport safe */ _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__.setupDevToolsPlugin)\n/* harmony export */ });\n/* harmony import */ var _vue_devtools_kit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/devtools-kit */ \"./node_modules/@vue/devtools-kit/dist/index.js\");\n// src/index.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdmVlLXZhbGlkYXRlL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFTMkI7QUFTekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmVlLXZhbGlkYXRlL25vZGVfbW9kdWxlcy9AdnVlL2RldnRvb2xzLWFwaS9kaXN0L2luZGV4LmpzPzE5YWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luZGV4LnRzXG5pbXBvcnQge1xuICBhZGRDdXN0b21Db21tYW5kLFxuICBhZGRDdXN0b21UYWIsXG4gIG9uRGV2VG9vbHNDbGllbnRDb25uZWN0ZWQsXG4gIG9uRGV2VG9vbHNDb25uZWN0ZWQsXG4gIHJlbW92ZUN1c3RvbUNvbW1hbmQsXG4gIHNldHVwRGV2VG9vbHNQbHVnaW4sXG4gIHNldHVwRGV2VG9vbHNQbHVnaW4gYXMgc2V0dXBEZXZUb29sc1BsdWdpbjJcbn0gZnJvbSBcIkB2dWUvZGV2dG9vbHMta2l0XCI7XG5leHBvcnQge1xuICBhZGRDdXN0b21Db21tYW5kLFxuICBhZGRDdXN0b21UYWIsXG4gIG9uRGV2VG9vbHNDbGllbnRDb25uZWN0ZWQsXG4gIG9uRGV2VG9vbHNDb25uZWN0ZWQsXG4gIHJlbW92ZUN1c3RvbUNvbW1hbmQsXG4gIHNldHVwRGV2VG9vbHNQbHVnaW4sXG4gIHNldHVwRGV2VG9vbHNQbHVnaW4yIGFzIHNldHVwRGV2dG9vbHNQbHVnaW5cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/vee-validate/node_modules/@vue/devtools-api/dist/index.js\n");

/***/ })

}]);